
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800bc40  0800bc40  0001bc40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c224  0800c224  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c224  0800c224  0001c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c22c  0800c22c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c22c  0800c22c  0001c22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c230  0800c230  0001c230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00004a9c  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c80  20004c80  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014830  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ddd  00000000  00000000  00034a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  00037828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e80  00000000  00000000  000387b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004322  00000000  00000000  00039630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001117c  00000000  00000000  0003d952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3d60  00000000  00000000  0004eace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011282e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005830  00000000  00000000  00112880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc28 	.word	0x0800bc28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800bc28 	.word	0x0800bc28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffc:	f000 fbc2 	bl	8001784 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001000:	f000 f84a 	bl	8001098 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001004:	f000 f8da 	bl	80011bc <MX_GPIO_Init>
	MX_UART4_Init();
 8001008:	f000 f8ae 	bl	8001168 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800100c:	f001 fff8 	bl	8003000 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of UARTdataQueue */
	UARTdataQueueHandle = osMessageQueueNew(4, sizeof(uint8_t),
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <main+0x6c>)
 8001012:	2101      	movs	r1, #1
 8001014:	2004      	movs	r0, #4
 8001016:	f002 f9d3 	bl	80033c0 <osMessageQueueNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <main+0x70>)
 800101e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Task1 */
	Task1Handle = osThreadNew(readUART, NULL, &Task1_attributes);
 8001020:	4a12      	ldr	r2, [pc, #72]	; (800106c <main+0x74>)
 8001022:	2100      	movs	r1, #0
 8001024:	4812      	ldr	r0, [pc, #72]	; (8001070 <main+0x78>)
 8001026:	f002 f835 	bl	8003094 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <main+0x7c>)
 800102e:	6013      	str	r3, [r2, #0]

	/* creation of Task2 */
	Task2Handle = osThreadNew(printUART, NULL, &Task2_attributes);
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <main+0x80>)
 8001032:	2100      	movs	r1, #0
 8001034:	4811      	ldr	r0, [pc, #68]	; (800107c <main+0x84>)
 8001036:	f002 f82d 	bl	8003094 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <main+0x88>)
 800103e:	6013      	str	r3, [r2, #0]

	/* creation of Task3 */
	Task3Handle = osThreadNew(controlLEDs, NULL, &Task3_attributes);
 8001040:	4a10      	ldr	r2, [pc, #64]	; (8001084 <main+0x8c>)
 8001042:	2100      	movs	r1, #0
 8001044:	4810      	ldr	r0, [pc, #64]	; (8001088 <main+0x90>)
 8001046:	f002 f825 	bl	8003094 <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <main+0x94>)
 800104e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Create the event(s) */
	/* creation of UARTFlags */
	UARTFlagsHandle = osEventFlagsNew(&UARTFlags_attributes);
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <main+0x98>)
 8001052:	f002 f8cc 	bl	80031ee <osEventFlagsNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <main+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800105c:	f001 fff4 	bl	8003048 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
 8001060:	e7fe      	b.n	8001060 <main+0x68>
 8001062:	bf00      	nop
 8001064:	0800bd2c 	.word	0x0800bd2c
 8001068:	20000250 	.word	0x20000250
 800106c:	0800bcc0 	.word	0x0800bcc0
 8001070:	080012bd 	.word	0x080012bd
 8001074:	20000244 	.word	0x20000244
 8001078:	0800bce4 	.word	0x0800bce4
 800107c:	0800135d 	.word	0x0800135d
 8001080:	20000248 	.word	0x20000248
 8001084:	0800bd08 	.word	0x0800bd08
 8001088:	080013cd 	.word	0x080013cd
 800108c:	2000024c 	.word	0x2000024c
 8001090:	0800bd44 	.word	0x0800bd44
 8001094:	20000254 	.word	0x20000254

08001098 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	; 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fc0d 	bl	80068c6 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <SystemClock_Config+0xc8>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <SystemClock_Config+0xc8>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <SystemClock_Config+0xc8>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <SystemClock_Config+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <SystemClock_Config+0xcc>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <SystemClock_Config+0xcc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800110c:	2354      	movs	r3, #84	; 0x54
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fe3f 	bl	8001da0 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001128:	f000 f98e 	bl	8001448 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2102      	movs	r1, #2
 8001148:	4618      	mov	r0, r3
 800114a:	f001 f8a1 	bl	8002290 <HAL_RCC_ClockConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001154:	f000 f978 	bl	8001448 <Error_Handler>
	}
}
 8001158:	bf00      	nop
 800115a:	3750      	adds	r7, #80	; 0x50
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_UART4_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_UART4_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_UART4_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_UART4_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_UART4_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_UART4_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_UART4_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_UART4_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_UART4_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_UART4_Init+0x4c>)
 80011a0:	f001 fa96 	bl	80026d0 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_UART4_Init+0x46>
	{
		Error_Handler();
 80011aa:	f000 f94d 	bl	8001448 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000200 	.word	0x20000200
 80011b8:	40004c00 	.word	0x40004c00

080011bc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_GPIO_Init+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <MX_GPIO_Init+0x98>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_GPIO_Init+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_GPIO_Init+0x98>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <MX_GPIO_Init+0x98>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_GPIO_Init+0x98>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_GPIO_Init+0x98>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <MX_GPIO_Init+0x98>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_GPIO_Init+0x98>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin,
 8001226:	2200      	movs	r2, #0
 8001228:	210f      	movs	r1, #15
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <MX_GPIO_Init+0x9c>)
 800122c:	f000 fd9e 	bl	8001d6c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin;
 8001230:	230f      	movs	r3, #15
 8001232:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_GPIO_Init+0x9c>)
 8001248:	f000 fbf4 	bl	8001a34 <HAL_GPIO_Init>

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40020400 	.word	0x40020400

0800125c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, sizeof(ch) - 1, HAL_MAX_DELAY);
 8001264:	1d39      	adds	r1, r7, #4
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	2203      	movs	r2, #3
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <__io_putchar+0x20>)
 800126e:	f001 fa7c 	bl	800276a <HAL_UART_Transmit>
	return ch;
 8001272:	687b      	ldr	r3, [r7, #4]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000200 	.word	0x20000200

08001280 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	71fb      	strb	r3, [r7, #7]

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <__io_getchar+0x38>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <__io_getchar+0x38>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

	/* Wait for reception of a character on the USART RX line and echo this
	 * character on console */
	HAL_UART_Receive(&huart4, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80012a0:	1df9      	adds	r1, r7, #7
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	2201      	movs	r2, #1
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <__io_getchar+0x38>)
 80012aa:	f001 faf0 	bl	800288e <HAL_UART_Receive>
	return ch;
 80012ae:	79fb      	ldrb	r3, [r7, #7]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000200 	.word	0x20000200

080012bc <readUART>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_readUART */
void readUART(void *argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	char buffer[4];
	/* Infinite loop */
	for (;;)
	{
		scanf("%s", buffer);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	4820      	ldr	r0, [pc, #128]	; (800134c <readUART+0x90>)
 80012cc:	f006 fb02 	bl	80078d4 <iscanf>
		for (int i = 0; i < 4; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e017      	b.n	8001306 <readUART+0x4a>
		{
			if (buffer[i] != '0' || buffer[i] != '1')
 80012d6:	f107 0208 	add.w	r2, r7, #8
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b30      	cmp	r3, #48	; 0x30
 80012e2:	d106      	bne.n	80012f2 <readUART+0x36>
 80012e4:	f107 0208 	add.w	r2, r7, #8
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b31      	cmp	r3, #49	; 0x31
 80012f0:	d006      	beq.n	8001300 <readUART+0x44>
			{
				osEventFlagsSet(UARTFlagsHandle, UART_DATA_ERROR);
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <readUART+0x94>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2102      	movs	r1, #2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 ffb7 	bl	800326c <osEventFlagsSet>
				break;
 80012fe:	e005      	b.n	800130c <readUART+0x50>
		for (int i = 0; i < 4; i++)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3301      	adds	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2b03      	cmp	r3, #3
 800130a:	dde4      	ble.n	80012d6 <readUART+0x1a>
			}
		}
		if (osEventFlagsWait(UARTFlagsHandle, UART_DATA_ERROR, osFlagsWaitAny,
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <readUART+0x94>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	2332      	movs	r3, #50	; 0x32
 8001312:	2200      	movs	r2, #0
 8001314:	2102      	movs	r1, #2
 8001316:	f001 ffed 	bl	80032f4 <osEventFlagsWait>
 800131a:	4603      	mov	r3, r0
 800131c:	2b02      	cmp	r3, #2
 800131e:	d00e      	beq.n	800133e <readUART+0x82>
				50) != UART_DATA_ERROR)
		{
			osMessageQueuePut(UARTdataQueueHandle, &buffer, 0U, 0U);
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <readUART+0x98>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	f107 0108 	add.w	r1, r7, #8
 8001328:	2300      	movs	r3, #0
 800132a:	2200      	movs	r2, #0
 800132c:	f002 f8bc 	bl	80034a8 <osMessageQueuePut>
			osEventFlagsSet(UARTFlagsHandle, UART_DATA_RECEIVED);
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <readUART+0x94>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f001 ff98 	bl	800326c <osEventFlagsSet>
 800133c:	e002      	b.n	8001344 <readUART+0x88>
		}
		else
		{
			printf("%s\n", "Input Error!");
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <readUART+0x9c>)
 8001340:	f006 fa46 	bl	80077d0 <puts>
		}
		osDelay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f001 ff37 	bl	80031b8 <osDelay>
		scanf("%s", buffer);
 800134a:	e7bb      	b.n	80012c4 <readUART+0x8>
 800134c:	0800bc74 	.word	0x0800bc74
 8001350:	20000254 	.word	0x20000254
 8001354:	20000250 	.word	0x20000250
 8001358:	0800bc78 	.word	0x0800bc78

0800135c <printUART>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_printUART */
void printUART(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN printUART */
	char buffer[4];
	/* Infinite loop */
	for (;;)
	{
		if (osEventFlagsWait(UARTFlagsHandle, UART_DATA_RECEIVED,
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <printUART+0x64>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	2332      	movs	r3, #50	; 0x32
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	f001 ffc1 	bl	80032f4 <osEventFlagsWait>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d11b      	bne.n	80013b0 <printUART+0x54>
		osFlagsWaitAny, 50) == UART_DATA_RECEIVED)
		{
			// print data from UART
			osMessageQueueGet(UARTdataQueueHandle, &buffer, 0U, 0U);
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <printUART+0x68>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	f107 010c 	add.w	r1, r7, #12
 8001380:	2300      	movs	r3, #0
 8001382:	2200      	movs	r2, #0
 8001384:	f002 f8f0 	bl	8003568 <osMessageQueueGet>
			printf("%s\n", buffer);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4618      	mov	r0, r3
 800138e:	f006 fa1f 	bl	80077d0 <puts>
			osMessageQueuePut(UARTdataQueueHandle, &buffer, 0U, 0U);
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <printUART+0x68>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f107 010c 	add.w	r1, r7, #12
 800139a:	2300      	movs	r3, #0
 800139c:	2200      	movs	r2, #0
 800139e:	f002 f883 	bl	80034a8 <osMessageQueuePut>
			osEventFlagsSet(UARTFlagsHandle, UART_PRINTED);
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <printUART+0x64>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2104      	movs	r1, #4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 ff5f 	bl	800326c <osEventFlagsSet>
 80013ae:	e7d9      	b.n	8001364 <printUART+0x8>
		}
		else
		{
			printf("%s\n", "Program running...");
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <printUART+0x6c>)
 80013b2:	f006 fa0d 	bl	80077d0 <puts>
			osDelay(500);
 80013b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ba:	f001 fefd 	bl	80031b8 <osDelay>
		if (osEventFlagsWait(UARTFlagsHandle, UART_DATA_RECEIVED,
 80013be:	e7d1      	b.n	8001364 <printUART+0x8>
 80013c0:	20000254 	.word	0x20000254
 80013c4:	20000250 	.word	0x20000250
 80013c8:	0800bc88 	.word	0x0800bc88

080013cc <controlLEDs>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_controlLEDs */
void controlLEDs(void *argument)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN controlLEDs */
	char buffer[4];
	/* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(UARTFlagsHandle, UART_PRINTED, osFlagsWaitAny,
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <controlLEDs+0x70>)
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	2200      	movs	r2, #0
 80013de:	2104      	movs	r1, #4
 80013e0:	f001 ff88 	bl	80032f4 <osEventFlagsWait>
		osWaitForever);
		osMessageQueueGet(UARTdataQueueHandle, &buffer, 0U, 0U);
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <controlLEDs+0x74>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	f107 010c 	add.w	r1, r7, #12
 80013ec:	2300      	movs	r3, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	f002 f8ba 	bl	8003568 <osMessageQueueGet>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, buffer[0] - 48);
 80013f4:	7b3b      	ldrb	r3, [r7, #12]
 80013f6:	3b30      	subs	r3, #48	; 0x30
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	2101      	movs	r1, #1
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <controlLEDs+0x78>)
 8001400:	f000 fcb4 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED2_Pin, buffer[1] - 48);
 8001404:	7b7b      	ldrb	r3, [r7, #13]
 8001406:	3b30      	subs	r3, #48	; 0x30
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	2102      	movs	r1, #2
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <controlLEDs+0x78>)
 8001410:	f000 fcac 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED3_Pin, buffer[2] - 48);
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	3b30      	subs	r3, #48	; 0x30
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	2104      	movs	r1, #4
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <controlLEDs+0x78>)
 8001420:	f000 fca4 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED4_Pin, buffer[3] - 48);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3b30      	subs	r3, #48	; 0x30
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	2108      	movs	r1, #8
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <controlLEDs+0x78>)
 8001430:	f000 fc9c 	bl	8001d6c <HAL_GPIO_WritePin>
		osDelay(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f001 febf 	bl	80031b8 <osDelay>
		osEventFlagsWait(UARTFlagsHandle, UART_PRINTED, osFlagsWaitAny,
 800143a:	e7cb      	b.n	80013d4 <controlLEDs+0x8>
 800143c:	20000254 	.word	0x20000254
 8001440:	20000250 	.word	0x20000250
 8001444:	40020400 	.word	0x40020400

08001448 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_MspInit+0x54>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_MspInit+0x54>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x54>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_MspInit+0x54>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_MspInit+0x54>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_MspInit+0x54>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	210f      	movs	r1, #15
 8001496:	f06f 0001 	mvn.w	r0, #1
 800149a:	f000 faa2 	bl	80019e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_UART_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12c      	bne.n	8001528 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001506:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001518:	2308      	movs	r3, #8
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_UART_MspInit+0x8c>)
 8001524:	f000 fa86 	bl	8001a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40004c00 	.word	0x40004c00
 8001534:	40023800 	.word	0x40023800
 8001538:	40020800 	.word	0x40020800

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 f95c 	bl	8001828 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001570:	f003 ffba 	bl	80054e8 <xTaskGetSchedulerState>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d001      	beq.n	800157e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800157a:	f004 fddd 	bl	8006138 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}

08001582 <_getpid>:
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
 8001586:	2301      	movs	r3, #1
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_kill>:
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
 800159c:	f005 f846 	bl	800662c <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2216      	movs	r2, #22
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_exit>:
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	f04f 31ff 	mov.w	r1, #4294967295
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffe7 	bl	8001592 <_kill>
 80015c4:	e7fe      	b.n	80015c4 <_exit+0x12>

080015c6 <_read>:
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e00a      	b.n	80015ee <_read+0x28>
 80015d8:	f7ff fe52 	bl	8001280 <__io_getchar>
 80015dc:	4601      	mov	r1, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	60ba      	str	r2, [r7, #8]
 80015e4:	b2ca      	uxtb	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dbf0      	blt.n	80015d8 <_read+0x12>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_write>:
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e009      	b.n	8001626 <_write+0x26>
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	60ba      	str	r2, [r7, #8]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe1e 	bl	800125c <__io_putchar>
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	dbf1      	blt.n	8001612 <_write+0x12>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_close>:
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_fstat>:
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	2300      	movs	r3, #0
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_isatty>:
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	2301      	movs	r3, #1
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_lseek>:
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	2300      	movs	r3, #0
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_sbrk>:
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
 80016d0:	f004 ffac 	bl	800662c <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_sbrk+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20020000 	.word	0x20020000
 8001700:	00000400 	.word	0x00000400
 8001704:	20000258 	.word	0x20000258
 8001708:	20004c80 	.word	0x20004c80

0800170c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <SystemInit+0x20>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <SystemInit+0x20>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <Reset_Handler>:
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopFillZerobss+0x12>
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <LoopFillZerobss+0x16>)
 8001736:	490e      	ldr	r1, [pc, #56]	; (8001770 <LoopFillZerobss+0x1a>)
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <LoopFillZerobss+0x1e>)
 800173a:	2300      	movs	r3, #0
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:
 800173e:	58d4      	ldr	r4, [r2, r3]
 8001740:	50c4      	str	r4, [r0, r3]
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:
 8001744:	18c4      	adds	r4, r0, r3
 8001746:	428c      	cmp	r4, r1
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <LoopFillZerobss+0x22>)
 800174c:	4c0b      	ldr	r4, [pc, #44]	; (800177c <LoopFillZerobss+0x26>)
 800174e:	2300      	movs	r3, #0
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:
 8001756:	42a2      	cmp	r2, r4
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>
 800175a:	f7ff ffd7 	bl	800170c <SystemInit>
 800175e:	f005 f87d 	bl	800685c <__libc_init_array>
 8001762:	f7ff fc49 	bl	8000ff8 <main>
 8001766:	4770      	bx	lr
 8001768:	20020000 	.word	0x20020000
 800176c:	20000000 	.word	0x20000000
 8001770:	200001e4 	.word	0x200001e4
 8001774:	0800c234 	.word	0x0800c234
 8001778:	200001e4 	.word	0x200001e4
 800177c:	20004c80 	.word	0x20004c80

08001780 <ADC_IRQHandler>:
 8001780:	e7fe      	b.n	8001780 <ADC_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <HAL_Init+0x40>)
 800178e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_Init+0x40>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_Init+0x40>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f90d 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fe4c 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023c00 	.word	0x40023c00

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f917 	bl	8001a1a <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f8ed 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000000 	.word	0x20000000
 8001820:	20000008 	.word	0x20000008
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x20>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_IncTick+0x24>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008
 800184c:	2000025c 	.word	0x2000025c

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000025c 	.word	0x2000025c

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff47 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff5c 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffb0 	bl	8001988 <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e16b      	b.n	8001d28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 815a 	bne.w	8001d22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d005      	beq.n	8001a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d130      	bne.n	8001ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 0201 	and.w	r2, r3, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d017      	beq.n	8001b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d123      	bne.n	8001b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80b4 	beq.w	8001d22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <HAL_GPIO_Init+0x30c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a5f      	ldr	r2, [pc, #380]	; (8001d40 <HAL_GPIO_Init+0x30c>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_GPIO_Init+0x30c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd6:	4a5b      	ldr	r2, [pc, #364]	; (8001d44 <HAL_GPIO_Init+0x310>)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_GPIO_Init+0x314>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02b      	beq.n	8001c5a <HAL_GPIO_Init+0x226>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <HAL_GPIO_Init+0x318>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x222>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <HAL_GPIO_Init+0x31c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x21e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4f      	ldr	r2, [pc, #316]	; (8001d54 <HAL_GPIO_Init+0x320>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x21a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <HAL_GPIO_Init+0x324>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x216>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <HAL_GPIO_Init+0x328>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4c      	ldr	r2, [pc, #304]	; (8001d60 <HAL_GPIO_Init+0x32c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4b      	ldr	r2, [pc, #300]	; (8001d64 <HAL_GPIO_Init+0x330>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x20a>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e00e      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c3e:	2308      	movs	r3, #8
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <HAL_GPIO_Init+0x310>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a32      	ldr	r2, [pc, #200]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a27      	ldr	r2, [pc, #156]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae90 	bls.w	8001a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e267      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d075      	beq.n	8001eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d00c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd6:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b7e      	ldr	r3, [pc, #504]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d05b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d157      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e242      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x74>
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x98>
 8001e1e:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6f      	ldr	r2, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6c      	ldr	r2, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e38:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a68      	ldr	r2, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fcfa 	bl	8001850 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fcf6 	bl	8001850 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e207      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fce6 	bl	8001850 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fce2 	bl	8001850 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1f3      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0xe8>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1c7      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4937      	ldr	r1, [pc, #220]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_RCC_OscConfig+0x244>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff fc9b 	bl	8001850 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fc97 	bl	8001850 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1a8      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4925      	ldr	r1, [pc, #148]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_RCC_OscConfig+0x244>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff fc7a 	bl	8001850 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff fc76 	bl	8001850 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e187      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d036      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_RCC_OscConfig+0x248>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff fc5a 	bl	8001850 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fc56 	bl	8001850 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e167      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x200>
 8001fbe:	e01b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_OscConfig+0x248>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fc43 	bl	8001850 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	e00e      	b.n	8001fec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff fc3f 	bl	8001850 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d907      	bls.n	8001fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e150      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	42470000 	.word	0x42470000
 8001fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	4b88      	ldr	r3, [pc, #544]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ea      	bne.n	8001fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 8097 	beq.w	8002134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b81      	ldr	r3, [pc, #516]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a7c      	ldr	r2, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b77      	ldr	r3, [pc, #476]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002042:	4b74      	ldr	r3, [pc, #464]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a73      	ldr	r2, [pc, #460]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204e:	f7ff fbff 	bl	8001850 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7ff fbfb 	bl	8001850 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e10c      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x2ea>
 800207c:	4b64      	ldr	r3, [pc, #400]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a63      	ldr	r2, [pc, #396]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	e01c      	b.n	80020c4 <HAL_RCC_OscConfig+0x324>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b05      	cmp	r3, #5
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x30c>
 8002092:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a5b      	ldr	r2, [pc, #364]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0x324>
 80020ac:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a57      	ldr	r2, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	4b55      	ldr	r3, [pc, #340]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff fbc0 	bl	8001850 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff fbbc 	bl	8001850 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0cb      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ee      	beq.n	80020d4 <HAL_RCC_OscConfig+0x334>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fbaa 	bl	8001850 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff fba6 	bl	8001850 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0b5      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ee      	bne.n	8002100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80a1 	beq.w	8002280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213e:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b08      	cmp	r3, #8
 8002148:	d05c      	beq.n	8002204 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d141      	bne.n	80021d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fb7a 	bl	8001850 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff fb76 	bl	8001850 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e087      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	019b      	lsls	r3, r3, #6
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	491b      	ldr	r1, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff fb4f 	bl	8001850 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff fb4b 	bl	8001850 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e05c      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x416>
 80021d4:	e054      	b.n	8002280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fb38 	bl	8001850 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff fb34 	bl	8001850 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e045      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x444>
 8002202:	e03d      	b.n	8002280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e038      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
 8002210:	40023800 	.word	0x40023800
 8002214:	40007000 	.word	0x40007000
 8002218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x4ec>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d028      	beq.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d121      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d11a      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002254:	4293      	cmp	r3, r2
 8002256:	d111      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	085b      	lsrs	r3, r3, #1
 8002264:	3b01      	subs	r3, #1
 8002266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0cc      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d90c      	bls.n	80022cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b65      	ldr	r3, [pc, #404]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0b8      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e4:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	494d      	ldr	r1, [pc, #308]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d044      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d119      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d003      	beq.n	800234e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234a:	2b03      	cmp	r3, #3
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e067      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4934      	ldr	r1, [pc, #208]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002380:	f7ff fa66 	bl	8001850 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7ff fa62 	bl	8001850 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e04f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d20c      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e032      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4916      	ldr	r1, [pc, #88]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002416:	f000 f821 	bl	800245c <HAL_RCC_GetSysClockFreq>
 800241a:	4602      	mov	r2, r0
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	490a      	ldr	r1, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	5ccb      	ldrb	r3, [r1, r3]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff f9c6 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00
 800244c:	40023800 	.word	0x40023800
 8002450:	0800bd54 	.word	0x0800bd54
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002460:	b094      	sub	sp, #80	; 0x50
 8002462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	647b      	str	r3, [r7, #68]	; 0x44
 8002468:	2300      	movs	r3, #0
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800246c:	2300      	movs	r3, #0
 800246e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002474:	4b79      	ldr	r3, [pc, #484]	; (800265c <HAL_RCC_GetSysClockFreq+0x200>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d00d      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x40>
 8002480:	2b08      	cmp	r3, #8
 8002482:	f200 80e1 	bhi.w	8002648 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x34>
 800248a:	2b04      	cmp	r3, #4
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x3a>
 800248e:	e0db      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b73      	ldr	r3, [pc, #460]	; (8002660 <HAL_RCC_GetSysClockFreq+0x204>)
 8002492:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002494:	e0db      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002496:	4b73      	ldr	r3, [pc, #460]	; (8002664 <HAL_RCC_GetSysClockFreq+0x208>)
 8002498:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800249a:	e0d8      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCC_GetSysClockFreq+0x200>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a6:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCC_GetSysClockFreq+0x200>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d063      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_GetSysClockFreq+0x200>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	2200      	movs	r2, #0
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80024bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024ce:	4622      	mov	r2, r4
 80024d0:	462b      	mov	r3, r5
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	0159      	lsls	r1, r3, #5
 80024dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e0:	0150      	lsls	r0, r2, #5
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4621      	mov	r1, r4
 80024e8:	1a51      	subs	r1, r2, r1
 80024ea:	6139      	str	r1, [r7, #16]
 80024ec:	4629      	mov	r1, r5
 80024ee:	eb63 0301 	sbc.w	r3, r3, r1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002500:	4659      	mov	r1, fp
 8002502:	018b      	lsls	r3, r1, #6
 8002504:	4651      	mov	r1, sl
 8002506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800250a:	4651      	mov	r1, sl
 800250c:	018a      	lsls	r2, r1, #6
 800250e:	4651      	mov	r1, sl
 8002510:	ebb2 0801 	subs.w	r8, r2, r1
 8002514:	4659      	mov	r1, fp
 8002516:	eb63 0901 	sbc.w	r9, r3, r1
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800252a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252e:	4690      	mov	r8, r2
 8002530:	4699      	mov	r9, r3
 8002532:	4623      	mov	r3, r4
 8002534:	eb18 0303 	adds.w	r3, r8, r3
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	462b      	mov	r3, r5
 800253c:	eb49 0303 	adc.w	r3, r9, r3
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800254e:	4629      	mov	r1, r5
 8002550:	024b      	lsls	r3, r1, #9
 8002552:	4621      	mov	r1, r4
 8002554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002558:	4621      	mov	r1, r4
 800255a:	024a      	lsls	r2, r1, #9
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002562:	2200      	movs	r2, #0
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
 8002566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800256c:	f7fe fb8c 	bl	8000c88 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4613      	mov	r3, r2
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002578:	e058      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4b38      	ldr	r3, [pc, #224]	; (800265c <HAL_RCC_GetSysClockFreq+0x200>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	2200      	movs	r2, #0
 8002582:	4618      	mov	r0, r3
 8002584:	4611      	mov	r1, r2
 8002586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002594:	4642      	mov	r2, r8
 8002596:	464b      	mov	r3, r9
 8002598:	f04f 0000 	mov.w	r0, #0
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	0159      	lsls	r1, r3, #5
 80025a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a6:	0150      	lsls	r0, r2, #5
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4641      	mov	r1, r8
 80025ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80025b2:	4649      	mov	r1, r9
 80025b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025cc:	ebb2 040a 	subs.w	r4, r2, sl
 80025d0:	eb63 050b 	sbc.w	r5, r3, fp
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	00eb      	lsls	r3, r5, #3
 80025de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e2:	00e2      	lsls	r2, r4, #3
 80025e4:	4614      	mov	r4, r2
 80025e6:	461d      	mov	r5, r3
 80025e8:	4643      	mov	r3, r8
 80025ea:	18e3      	adds	r3, r4, r3
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	464b      	mov	r3, r9
 80025f0:	eb45 0303 	adc.w	r3, r5, r3
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002602:	4629      	mov	r1, r5
 8002604:	028b      	lsls	r3, r1, #10
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800260c:	4621      	mov	r1, r4
 800260e:	028a      	lsls	r2, r1, #10
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002616:	2200      	movs	r2, #0
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	61fa      	str	r2, [r7, #28]
 800261c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002620:	f7fe fb32 	bl	8000c88 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4613      	mov	r3, r2
 800262a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_GetSysClockFreq+0x200>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	3301      	adds	r3, #1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800263c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800263e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002646:	e002      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetSysClockFreq+0x204>)
 800264a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800264c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002650:	4618      	mov	r0, r3
 8002652:	3750      	adds	r7, #80	; 0x50
 8002654:	46bd      	mov	sp, r7
 8002656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	00f42400 	.word	0x00f42400
 8002664:	007a1200 	.word	0x007a1200

08002668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff fff0 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0a9b      	lsrs	r3, r3, #10
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4903      	ldr	r1, [pc, #12]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	0800bd64 	.word	0x0800bd64

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026ac:	f7ff ffdc 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0b5b      	lsrs	r3, r3, #13
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	0800bd64 	.word	0x0800bd64

080026d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e03f      	b.n	8002762 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fed8 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	; 0x24
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f9cb 	bl	8002ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b08a      	sub	sp, #40	; 0x28
 800276e:	af02      	add	r7, sp, #8
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b20      	cmp	r3, #32
 8002788:	d17c      	bne.n	8002884 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_UART_Transmit+0x2c>
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e075      	b.n	8002886 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Transmit+0x3e>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e06e      	b.n	8002886 <HAL_UART_Transmit+0x11c>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2221      	movs	r2, #33	; 0x21
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027be:	f7ff f847 	bl	8001850 <HAL_GetTick>
 80027c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	88fa      	ldrh	r2, [r7, #6]
 80027c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d8:	d108      	bne.n	80027ec <HAL_UART_Transmit+0x82>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	e003      	b.n	80027f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027fc:	e02a      	b.n	8002854 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f8e2 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e036      	b.n	8002886 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10b      	bne.n	8002836 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800282c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	3302      	adds	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	e007      	b.n	8002846 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	3301      	adds	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1cf      	bne.n	80027fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f8b2 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e006      	b.n	8002886 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b08a      	sub	sp, #40	; 0x28
 8002892:	af02      	add	r7, sp, #8
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	f040 808c 	bne.w	80029c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_UART_Receive+0x2e>
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e084      	b.n	80029ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Receive+0x40>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e07d      	b.n	80029ca <HAL_UART_Receive+0x13c>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2222      	movs	r2, #34	; 0x22
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ea:	f7fe ffb1 	bl	8001850 <HAL_GetTick>
 80028ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002904:	d108      	bne.n	8002918 <HAL_UART_Receive+0x8a>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	e003      	b.n	8002920 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002928:	e043      	b.n	80029b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2120      	movs	r1, #32
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f84c 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e042      	b.n	80029ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002956:	b29a      	uxth	r2, r3
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	3302      	adds	r3, #2
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e01f      	b.n	80029a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296c:	d007      	beq.n	800297e <HAL_UART_Receive+0xf0>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <HAL_UART_Receive+0xfe>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e008      	b.n	800299e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002998:	b2da      	uxtb	r2, r3
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3301      	adds	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1b6      	bne.n	800292a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b090      	sub	sp, #64	; 0x40
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e2:	e050      	b.n	8002a86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d04c      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80029f2:	f7fe ff2d 	bl	8001850 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d241      	bcs.n	8002a86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a22:	637a      	str	r2, [r7, #52]	; 0x34
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e5      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	613b      	str	r3, [r7, #16]
   return(result);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3314      	adds	r3, #20
 8002a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a56:	623a      	str	r2, [r7, #32]
 8002a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	69f9      	ldr	r1, [r7, #28]
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e5      	bne.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e00f      	b.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d09f      	beq.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3740      	adds	r7, #64	; 0x40
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b0c0      	sub	sp, #256	; 0x100
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002acc:	68d9      	ldr	r1, [r3, #12]
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	ea40 0301 	orr.w	r3, r0, r1
 8002ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b08:	f021 010c 	bic.w	r1, r1, #12
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b16:	430b      	orrs	r3, r1
 8002b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	6999      	ldr	r1, [r3, #24]
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	ea40 0301 	orr.w	r3, r0, r1
 8002b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4b8f      	ldr	r3, [pc, #572]	; (8002d7c <UART_SetConfig+0x2cc>)
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d005      	beq.n	8002b50 <UART_SetConfig+0xa0>
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b8d      	ldr	r3, [pc, #564]	; (8002d80 <UART_SetConfig+0x2d0>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d104      	bne.n	8002b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b50:	f7ff fdaa 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8002b54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b58:	e003      	b.n	8002b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b5a:	f7ff fd91 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6c:	f040 810c 	bne.w	8002d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b82:	4622      	mov	r2, r4
 8002b84:	462b      	mov	r3, r5
 8002b86:	1891      	adds	r1, r2, r2
 8002b88:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b92:	4621      	mov	r1, r4
 8002b94:	eb12 0801 	adds.w	r8, r2, r1
 8002b98:	4629      	mov	r1, r5
 8002b9a:	eb43 0901 	adc.w	r9, r3, r1
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb2:	4690      	mov	r8, r2
 8002bb4:	4699      	mov	r9, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	eb18 0303 	adds.w	r3, r8, r3
 8002bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	eb49 0303 	adc.w	r3, r9, r3
 8002bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bde:	460b      	mov	r3, r1
 8002be0:	18db      	adds	r3, r3, r3
 8002be2:	653b      	str	r3, [r7, #80]	; 0x50
 8002be4:	4613      	mov	r3, r2
 8002be6:	eb42 0303 	adc.w	r3, r2, r3
 8002bea:	657b      	str	r3, [r7, #84]	; 0x54
 8002bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bf4:	f7fe f848 	bl	8000c88 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	011c      	lsls	r4, r3, #4
 8002c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c18:	4642      	mov	r2, r8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c20:	415b      	adcs	r3, r3
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c28:	4641      	mov	r1, r8
 8002c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c2e:	4649      	mov	r1, r9
 8002c30:	eb43 0b01 	adc.w	fp, r3, r1
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c48:	4692      	mov	sl, r2
 8002c4a:	469b      	mov	fp, r3
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c56:	464b      	mov	r3, r9
 8002c58:	eb4b 0303 	adc.w	r3, fp, r3
 8002c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c74:	460b      	mov	r3, r1
 8002c76:	18db      	adds	r3, r3, r3
 8002c78:	643b      	str	r3, [r7, #64]	; 0x40
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	647b      	str	r3, [r7, #68]	; 0x44
 8002c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c8a:	f7fd fffd 	bl	8000c88 <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002c96:	fba3 2301 	umull	r2, r3, r3, r1
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2264      	movs	r2, #100	; 0x64
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	1acb      	subs	r3, r1, r3
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002cac:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cb8:	441c      	add	r4, r3
 8002cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	1891      	adds	r1, r2, r2
 8002cd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cd4:	415b      	adcs	r3, r3
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cdc:	4641      	mov	r1, r8
 8002cde:	1851      	adds	r1, r2, r1
 8002ce0:	6339      	str	r1, [r7, #48]	; 0x30
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	414b      	adcs	r3, r1
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	00cb      	lsls	r3, r1, #3
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfe:	4651      	mov	r1, sl
 8002d00:	00ca      	lsls	r2, r1, #3
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d10:	464b      	mov	r3, r9
 8002d12:	460a      	mov	r2, r1
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d30:	460b      	mov	r3, r1
 8002d32:	18db      	adds	r3, r3, r3
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d36:	4613      	mov	r3, r2
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d46:	f7fd ff9f 	bl	8000c88 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002d50:	fba3 1302 	umull	r1, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2164      	movs	r1, #100	; 0x64
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 0207 	and.w	r2, r3, #7
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4422      	add	r2, r4
 8002d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d78:	e105      	b.n	8002f86 <UART_SetConfig+0x4d6>
 8002d7a:	bf00      	nop
 8002d7c:	40011000 	.word	0x40011000
 8002d80:	40011400 	.word	0x40011400
 8002d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d9a:	4642      	mov	r2, r8
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	1891      	adds	r1, r2, r2
 8002da0:	6239      	str	r1, [r7, #32]
 8002da2:	415b      	adcs	r3, r3
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
 8002da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002daa:	4641      	mov	r1, r8
 8002dac:	1854      	adds	r4, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb43 0501 	adc.w	r5, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	00eb      	lsls	r3, r5, #3
 8002dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc2:	00e2      	lsls	r2, r4, #3
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4643      	mov	r3, r8
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dd0:	464b      	mov	r3, r9
 8002dd2:	eb45 0303 	adc.w	r3, r5, r3
 8002dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002de6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002df6:	4629      	mov	r1, r5
 8002df8:	008b      	lsls	r3, r1, #2
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e00:	4621      	mov	r1, r4
 8002e02:	008a      	lsls	r2, r1, #2
 8002e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e08:	f7fd ff3e 	bl	8000c88 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002e12:	fba3 2302 	umull	r2, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	011c      	lsls	r4, r3, #4
 8002e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	464b      	mov	r3, r9
 8002e30:	1891      	adds	r1, r2, r2
 8002e32:	61b9      	str	r1, [r7, #24]
 8002e34:	415b      	adcs	r3, r3
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	1851      	adds	r1, r2, r1
 8002e40:	6139      	str	r1, [r7, #16]
 8002e42:	4649      	mov	r1, r9
 8002e44:	414b      	adcs	r3, r1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e54:	4659      	mov	r1, fp
 8002e56:	00cb      	lsls	r3, r1, #3
 8002e58:	4651      	mov	r1, sl
 8002e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5e:	4651      	mov	r1, sl
 8002e60:	00ca      	lsls	r2, r1, #3
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	4642      	mov	r2, r8
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e70:	464b      	mov	r3, r9
 8002e72:	460a      	mov	r2, r1
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e94:	4649      	mov	r1, r9
 8002e96:	008b      	lsls	r3, r1, #2
 8002e98:	4641      	mov	r1, r8
 8002e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	008a      	lsls	r2, r1, #2
 8002ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ea6:	f7fd feef 	bl	8000c88 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	2164      	movs	r1, #100	; 0x64
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	3332      	adds	r3, #50	; 0x32
 8002ec2:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ece:	441c      	add	r4, r3
 8002ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ed8:	677a      	str	r2, [r7, #116]	; 0x74
 8002eda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ede:	4642      	mov	r2, r8
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	1891      	adds	r1, r2, r2
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	415b      	adcs	r3, r3
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eee:	4641      	mov	r1, r8
 8002ef0:	1851      	adds	r1, r2, r1
 8002ef2:	6039      	str	r1, [r7, #0]
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	414b      	adcs	r3, r1
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f06:	4659      	mov	r1, fp
 8002f08:	00cb      	lsls	r3, r1, #3
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f10:	4651      	mov	r1, sl
 8002f12:	00ca      	lsls	r2, r1, #3
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4642      	mov	r2, r8
 8002f1c:	189b      	adds	r3, r3, r2
 8002f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f20:	464b      	mov	r3, r9
 8002f22:	460a      	mov	r2, r1
 8002f24:	eb42 0303 	adc.w	r3, r2, r3
 8002f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	663b      	str	r3, [r7, #96]	; 0x60
 8002f34:	667a      	str	r2, [r7, #100]	; 0x64
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f42:	4649      	mov	r1, r9
 8002f44:	008b      	lsls	r3, r1, #2
 8002f46:	4641      	mov	r1, r8
 8002f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	008a      	lsls	r2, r1, #2
 8002f50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f54:	f7fd fe98 	bl	8000c88 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2164      	movs	r1, #100	; 0x64
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	3332      	adds	r3, #50	; 0x32
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4422      	add	r2, r4
 8002f84:	609a      	str	r2, [r3, #8]
}
 8002f86:	bf00      	nop
 8002f88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f92:	bf00      	nop
 8002f94:	51eb851f 	.word	0x51eb851f

08002f98 <__NVIC_SetPriority>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	f06f 0004 	mvn.w	r0, #4
 8002ff6:	f7ff ffcf 	bl	8002f98 <__NVIC_SetPriority>
#endif
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003006:	f3ef 8305 	mrs	r3, IPSR
 800300a:	603b      	str	r3, [r7, #0]
  return(result);
 800300c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003012:	f06f 0305 	mvn.w	r3, #5
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	e00c      	b.n	8003034 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <osKernelInitialize+0x44>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <osKernelInitialize+0x44>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	e002      	b.n	8003034 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003034:	687b      	ldr	r3, [r7, #4]
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000260 	.word	0x20000260

08003048 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800304e:	f3ef 8305 	mrs	r3, IPSR
 8003052:	603b      	str	r3, [r7, #0]
  return(result);
 8003054:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <osKernelStart+0x1a>
    stat = osErrorISR;
 800305a:	f06f 0305 	mvn.w	r3, #5
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	e010      	b.n	8003084 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <osKernelStart+0x48>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d109      	bne.n	800307e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800306a:	f7ff ffbf 	bl	8002fec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <osKernelStart+0x48>)
 8003070:	2202      	movs	r2, #2
 8003072:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003074:	f001 fd3e 	bl	8004af4 <vTaskStartScheduler>
      stat = osOK;
 8003078:	2300      	movs	r3, #0
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	e002      	b.n	8003084 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003084:	687b      	ldr	r3, [r7, #4]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000260 	.word	0x20000260

08003094 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b08e      	sub	sp, #56	; 0x38
 8003098:	af04      	add	r7, sp, #16
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a4:	f3ef 8305 	mrs	r3, IPSR
 80030a8:	617b      	str	r3, [r7, #20]
  return(result);
 80030aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d17e      	bne.n	80031ae <osThreadNew+0x11a>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d07b      	beq.n	80031ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030ba:	2318      	movs	r3, #24
 80030bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d045      	beq.n	800315a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <osThreadNew+0x48>
        name = attr->name;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <osThreadNew+0x6e>
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b38      	cmp	r3, #56	; 0x38
 80030f4:	d805      	bhi.n	8003102 <osThreadNew+0x6e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <osThreadNew+0x72>
        return (NULL);
 8003102:	2300      	movs	r3, #0
 8003104:	e054      	b.n	80031b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00e      	beq.n	800313c <osThreadNew+0xa8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2bbb      	cmp	r3, #187	; 0xbb
 8003124:	d90a      	bls.n	800313c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <osThreadNew+0xa8>
        mem = 1;
 8003136:	2301      	movs	r3, #1
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	e010      	b.n	800315e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10c      	bne.n	800315e <osThreadNew+0xca>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d108      	bne.n	800315e <osThreadNew+0xca>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <osThreadNew+0xca>
          mem = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e001      	b.n	800315e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d110      	bne.n	8003186 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800316c:	9202      	str	r2, [sp, #8]
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	6a3a      	ldr	r2, [r7, #32]
 8003178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f001 face 	bl	800471c <xTaskCreateStatic>
 8003180:	4603      	mov	r3, r0
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e013      	b.n	80031ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d110      	bne.n	80031ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	b29a      	uxth	r2, r3
 8003190:	f107 0310 	add.w	r3, r7, #16
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f001 fb19 	bl	80047d6 <xTaskCreate>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <osThreadNew+0x11a>
            hTask = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031ae:	693b      	ldr	r3, [r7, #16]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031c0:	f3ef 8305 	mrs	r3, IPSR
 80031c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80031c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <osDelay+0x1c>
    stat = osErrorISR;
 80031cc:	f06f 0305 	mvn.w	r3, #5
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e007      	b.n	80031e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f001 fc54 	bl	8004a8c <vTaskDelay>
    }
  }

  return (stat);
 80031e4:	68fb      	ldr	r3, [r7, #12]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031fa:	f3ef 8305 	mrs	r3, IPSR
 80031fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003200:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003202:	2b00      	cmp	r3, #0
 8003204:	d12d      	bne.n	8003262 <osEventFlagsNew+0x74>
    mem = -1;
 8003206:	f04f 33ff 	mov.w	r3, #4294967295
 800320a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <osEventFlagsNew+0x3a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b1f      	cmp	r3, #31
 8003220:	d902      	bls.n	8003228 <osEventFlagsNew+0x3a>
        mem = 1;
 8003222:	2301      	movs	r3, #1
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e00c      	b.n	8003242 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d108      	bne.n	8003242 <osEventFlagsNew+0x54>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d104      	bne.n	8003242 <osEventFlagsNew+0x54>
          mem = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e001      	b.n	8003242 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d106      	bne.n	8003256 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fa1d 	bl	800368c <xEventGroupCreateStatic>
 8003252:	6178      	str	r0, [r7, #20]
 8003254:	e005      	b.n	8003262 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800325c:	f000 fa4d 	bl	80036fa <xEventGroupCreate>
 8003260:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003262:	697b      	ldr	r3, [r7, #20]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <osEventFlagsSet+0x1e>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800328a:	f06f 0303 	mvn.w	r3, #3
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e028      	b.n	80032e4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003292:	f3ef 8305 	mrs	r3, IPSR
 8003296:	60fb      	str	r3, [r7, #12]
  return(result);
 8003298:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01d      	beq.n	80032da <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	461a      	mov	r2, r3
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	6938      	ldr	r0, [r7, #16]
 80032ac:	f000 fbc8 	bl	8003a40 <xEventGroupSetBitsFromISR>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80032b6:	f06f 0302 	mvn.w	r3, #2
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e012      	b.n	80032e4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00d      	beq.n	80032e4 <osEventFlagsSet+0x78>
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <osEventFlagsSet+0x84>)
 80032ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	e004      	b.n	80032e4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80032da:	6839      	ldr	r1, [r7, #0]
 80032dc:	6938      	ldr	r0, [r7, #16]
 80032de:	f000 faf5 	bl	80038cc <xEventGroupSetBits>
 80032e2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80032e4:	697b      	ldr	r3, [r7, #20]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	; 0x30
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <osEventFlagsWait+0x22>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8003316:	f06f 0303 	mvn.w	r3, #3
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	e04b      	b.n	80033b6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800331e:	f3ef 8305 	mrs	r3, IPSR
 8003322:	617b      	str	r3, [r7, #20]
  return(result);
 8003324:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800332a:	f06f 0305 	mvn.w	r3, #5
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e041      	b.n	80033b6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
 8003340:	e001      	b.n	8003346 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8003350:	2300      	movs	r3, #0
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	e001      	b.n	800335a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8003356:	2301      	movs	r3, #1
 8003358:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	69b8      	ldr	r0, [r7, #24]
 8003366:	f000 f9e3 	bl	8003730 <xEventGroupWaitBits>
 800336a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d010      	beq.n	8003398 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4013      	ands	r3, r2
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d019      	beq.n	80033b6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8003388:	f06f 0301 	mvn.w	r3, #1
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e012      	b.n	80033b6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003390:	f06f 0302 	mvn.w	r3, #2
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e00e      	b.n	80033b6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80033a8:	f06f 0301 	mvn.w	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e002      	b.n	80033b6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80033b0:	f06f 0302 	mvn.w	r3, #2
 80033b4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80033b6:	69fb      	ldr	r3, [r7, #28]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	; 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033d0:	f3ef 8305 	mrs	r3, IPSR
 80033d4:	613b      	str	r3, [r7, #16]
  return(result);
 80033d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d15f      	bne.n	800349c <osMessageQueueNew+0xdc>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d05c      	beq.n	800349c <osMessageQueueNew+0xdc>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d059      	beq.n	800349c <osMessageQueueNew+0xdc>
    mem = -1;
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295
 80033ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d029      	beq.n	8003448 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d012      	beq.n	8003422 <osMessageQueueNew+0x62>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b4f      	cmp	r3, #79	; 0x4f
 8003402:	d90e      	bls.n	8003422 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <osMessageQueueNew+0x62>
        mem = 1;
 800341c:	2301      	movs	r3, #1
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e014      	b.n	800344c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d110      	bne.n	800344c <osMessageQueueNew+0x8c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <osMessageQueueNew+0x8c>
          mem = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	e001      	b.n	800344c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10b      	bne.n	800346a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2100      	movs	r1, #0
 800345c:	9100      	str	r1, [sp, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fc1d 	bl	8003ca0 <xQueueGenericCreateStatic>
 8003466:	61f8      	str	r0, [r7, #28]
 8003468:	e008      	b.n	800347c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003470:	2200      	movs	r2, #0
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fc8b 	bl	8003d90 <xQueueGenericCreate>
 800347a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e001      	b.n	8003494 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003494:	6979      	ldr	r1, [r7, #20]
 8003496:	69f8      	ldr	r0, [r7, #28]
 8003498:	f001 f8e2 	bl	8004660 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800349c:	69fb      	ldr	r3, [r7, #28]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034c0:	f3ef 8305 	mrs	r3, IPSR
 80034c4:	617b      	str	r3, [r7, #20]
  return(result);
 80034c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d028      	beq.n	800351e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <osMessageQueuePut+0x36>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <osMessageQueuePut+0x36>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80034de:	f06f 0303 	mvn.w	r3, #3
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	e038      	b.n	8003558 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034ea:	f107 0210 	add.w	r2, r7, #16
 80034ee:	2300      	movs	r3, #0
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	69b8      	ldr	r0, [r7, #24]
 80034f4:	f000 fda8 	bl	8004048 <xQueueGenericSendFromISR>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d003      	beq.n	8003506 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80034fe:	f06f 0302 	mvn.w	r3, #2
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	e028      	b.n	8003558 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d025      	beq.n	8003558 <osMessageQueuePut+0xb0>
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <osMessageQueuePut+0xbc>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	e01c      	b.n	8003558 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <osMessageQueuePut+0x82>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800352a:	f06f 0303 	mvn.w	r3, #3
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	e012      	b.n	8003558 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003532:	2300      	movs	r3, #0
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	69b8      	ldr	r0, [r7, #24]
 800353a:	f000 fc87 	bl	8003e4c <xQueueGenericSend>
 800353e:	4603      	mov	r3, r0
 8003540:	2b01      	cmp	r3, #1
 8003542:	d009      	beq.n	8003558 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800354a:	f06f 0301 	mvn.w	r3, #1
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	e002      	b.n	8003558 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003552:	f06f 0302 	mvn.w	r3, #2
 8003556:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003558:	69fb      	ldr	r3, [r7, #28]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800357e:	f3ef 8305 	mrs	r3, IPSR
 8003582:	617b      	str	r3, [r7, #20]
  return(result);
 8003584:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003586:	2b00      	cmp	r3, #0
 8003588:	d028      	beq.n	80035dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <osMessageQueueGet+0x34>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <osMessageQueueGet+0x34>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800359c:	f06f 0303 	mvn.w	r3, #3
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e037      	b.n	8003614 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	461a      	mov	r2, r3
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	69b8      	ldr	r0, [r7, #24]
 80035b2:	f000 fec5 	bl	8004340 <xQueueReceiveFromISR>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d003      	beq.n	80035c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80035bc:	f06f 0302 	mvn.w	r3, #2
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e027      	b.n	8003614 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d024      	beq.n	8003614 <osMessageQueueGet+0xac>
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <osMessageQueueGet+0xb8>)
 80035cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	e01b      	b.n	8003614 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <osMessageQueueGet+0x80>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80035e8:	f06f 0303 	mvn.w	r3, #3
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	e011      	b.n	8003614 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	69b8      	ldr	r0, [r7, #24]
 80035f6:	f000 fdc3 	bl	8004180 <xQueueReceive>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d009      	beq.n	8003614 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003606:	f06f 0301 	mvn.w	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e002      	b.n	8003614 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800360e:	f06f 0302 	mvn.w	r3, #2
 8003612:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003614:	69fb      	ldr	r3, [r7, #28]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a07      	ldr	r2, [pc, #28]	; (8003650 <vApplicationGetIdleTaskMemory+0x2c>)
 8003634:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4a06      	ldr	r2, [pc, #24]	; (8003654 <vApplicationGetIdleTaskMemory+0x30>)
 800363a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000264 	.word	0x20000264
 8003654:	20000320 	.word	0x20000320

08003658 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a07      	ldr	r2, [pc, #28]	; (8003684 <vApplicationGetTimerTaskMemory+0x2c>)
 8003668:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4a06      	ldr	r2, [pc, #24]	; (8003688 <vApplicationGetTimerTaskMemory+0x30>)
 800366e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003676:	601a      	str	r2, [r3, #0]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	20000520 	.word	0x20000520
 8003688:	200005dc 	.word	0x200005dc

0800368c <xEventGroupCreateStatic>:
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <xEventGroupCreateStatic+0x24>
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <xEventGroupCreateStatic+0x22>
 80036b0:	2320      	movs	r3, #32
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d00a      	beq.n	80036d0 <xEventGroupCreateStatic+0x44>
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	bf00      	nop
 80036ce:	e7fe      	b.n	80036ce <xEventGroupCreateStatic+0x42>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <xEventGroupCreateStatic+0x64>
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f9bf 	bl	8003a68 <vListInitialise>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2201      	movs	r2, #1
 80036ee:	771a      	strb	r2, [r3, #28]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <xEventGroupCreate>:
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	2020      	movs	r0, #32
 8003702:	f002 fda9 	bl	8006258 <pvPortMalloc>
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <xEventGroupCreate+0x2a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f9a5 	bl	8003a68 <vListInitialise>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <xEventGroupWaitBits>:
 8003730:	b580      	push	{r7, lr}
 8003732:	b090      	sub	sp, #64	; 0x40
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
 8003742:	2300      	movs	r3, #0
 8003744:	63bb      	str	r3, [r7, #56]	; 0x38
 8003746:	2300      	movs	r3, #0
 8003748:	633b      	str	r3, [r7, #48]	; 0x30
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xEventGroupWaitBits+0x36>
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xEventGroupWaitBits+0x34>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <xEventGroupWaitBits+0x56>
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xEventGroupWaitBits+0x54>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <xEventGroupWaitBits+0x72>
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <xEventGroupWaitBits+0x70>
 80037a2:	f001 fea1 	bl	80054e8 <xTaskGetSchedulerState>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <xEventGroupWaitBits+0x82>
 80037ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <xEventGroupWaitBits+0x86>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <xEventGroupWaitBits+0x88>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <xEventGroupWaitBits+0xa2>
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xEventGroupWaitBits+0xa0>
 80037d2:	f001 f9ff 	bl	8004bd4 <vTaskSuspendAll>
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037e2:	f000 f90b 	bl	80039fc <prvTestWaitCondition>
 80037e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00e      	beq.n	800380c <xEventGroupWaitBits+0xdc>
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f2:	2300      	movs	r3, #0
 80037f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d028      	beq.n	800384e <xEventGroupWaitBits+0x11e>
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	43db      	mvns	r3, r3
 8003804:	401a      	ands	r2, r3
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e020      	b.n	800384e <xEventGroupWaitBits+0x11e>
 800380c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <xEventGroupWaitBits+0xec>
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003816:	2301      	movs	r3, #1
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
 800381a:	e018      	b.n	800384e <xEventGroupWaitBits+0x11e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <xEventGroupWaitBits+0xfa>
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <xEventGroupWaitBits+0x108>
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	1d18      	adds	r0, r3, #4
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	4313      	orrs	r3, r2
 8003842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003844:	4619      	mov	r1, r3
 8003846:	f001 fbc3 	bl	8004fd0 <vTaskPlaceOnUnorderedEventList>
 800384a:	2300      	movs	r3, #0
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384e:	f001 f9cf 	bl	8004bf0 <xTaskResumeAll>
 8003852:	6278      	str	r0, [r7, #36]	; 0x24
 8003854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d031      	beq.n	80038be <xEventGroupWaitBits+0x18e>
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <xEventGroupWaitBits+0x140>
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <xEventGroupWaitBits+0x198>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f001 fec6 	bl	8005600 <uxTaskResetEventItemValue>
 8003874:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11a      	bne.n	80038b6 <xEventGroupWaitBits+0x186>
 8003880:	f002 fbc8 	bl	8006014 <vPortEnterCritical>
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003890:	f000 f8b4 	bl	80039fc <prvTestWaitCondition>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <xEventGroupWaitBits+0x17e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d006      	beq.n	80038ae <xEventGroupWaitBits+0x17e>
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	401a      	ands	r2, r3
 80038aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	2301      	movs	r3, #1
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
 80038b2:	f002 fbdf 	bl	8006074 <vPortExitCritical>
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	4618      	mov	r0, r3
 80038c2:	3740      	adds	r7, #64	; 0x40
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <xEventGroupSetBits>:
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08e      	sub	sp, #56	; 0x38
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
 80038d6:	2300      	movs	r3, #0
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <xEventGroupSetBits+0x32>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xEventGroupSetBits+0x30>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <xEventGroupSetBits+0x52>
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xEventGroupSetBits+0x50>
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	3304      	adds	r3, #4
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	3308      	adds	r3, #8
 8003928:	623b      	str	r3, [r7, #32]
 800392a:	f001 f953 	bl	8004bd4 <vTaskSuspendAll>
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	637b      	str	r3, [r7, #52]	; 0x34
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	431a      	orrs	r2, r3
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e03c      	b.n	80039bc <xEventGroupSetBits+0xf0>
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <xEventGroupSetBits+0xb2>
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <xEventGroupSetBits+0xc4>
 8003978:	2301      	movs	r3, #1
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397c:	e008      	b.n	8003990 <xEventGroupSetBits+0xc4>
 800397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	429a      	cmp	r2, r3
 800398a:	d101      	bne.n	8003990 <xEventGroupSetBits+0xc4>
 800398c:	2301      	movs	r3, #1
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <xEventGroupSetBits+0xec>
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <xEventGroupSetBits+0xdc>
 80039a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039b0:	4619      	mov	r1, r3
 80039b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039b4:	f001 fbd8 	bl	8005168 <vTaskRemoveFromUnorderedEventList>
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
 80039bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1be      	bne.n	8003942 <xEventGroupSetBits+0x76>
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	43db      	mvns	r3, r3
 80039cc:	401a      	ands	r2, r3
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f001 f90d 	bl	8004bf0 <xTaskResumeAll>
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	3738      	adds	r7, #56	; 0x38
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <vEventGroupSetBitsCallback>:
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff6c 	bl	80038cc <xEventGroupSetBits>
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvTestWaitCondition>:
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <prvTestWaitCondition+0x26>
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <prvTestWaitCondition+0x36>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e007      	b.n	8003a32 <prvTestWaitCondition+0x36>
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d101      	bne.n	8003a32 <prvTestWaitCondition+0x36>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4618      	mov	r0, r3
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <xEventGroupSetBitsFromISR>:
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	4804      	ldr	r0, [pc, #16]	; (8003a64 <xEventGroupSetBitsFromISR+0x24>)
 8003a54:	f002 f98e 	bl	8005d74 <xTimerPendFunctionCallFromISR>
 8003a58:	6178      	str	r0, [r7, #20]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	080039e3 	.word	0x080039e3

08003a68 <vListInitialise>:
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f103 0208 	add.w	r2, r3, #8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f103 0208 	add.w	r2, r3, #8
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f103 0208 	add.w	r2, r3, #8
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	611a      	str	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <vListInitialiseItem>:
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <vListInsertEnd>:
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	611a      	str	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <vListInsert>:
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d103      	bne.n	8003b2a <vListInsert+0x20>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e00c      	b.n	8003b44 <vListInsert+0x3a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e002      	b.n	8003b38 <vListInsert+0x2e>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d2f6      	bcs.n	8003b32 <vListInsert+0x28>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	611a      	str	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <uxListRemove>:
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6892      	ldr	r2, [r2, #8]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6852      	ldr	r2, [r2, #4]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d103      	bne.n	8003bb0 <uxListRemove+0x34>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	1e5a      	subs	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <xQueueGenericReset>:
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <xQueueGenericReset+0x2a>
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xQueueGenericReset+0x28>
 8003bfa:	f002 fa0b 	bl	8006014 <vPortEnterCritical>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	68f9      	ldr	r1, [r7, #12]
 8003c08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	68f9      	ldr	r1, [r7, #12]
 8003c2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	441a      	add	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	22ff      	movs	r2, #255	; 0xff
 8003c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	22ff      	movs	r2, #255	; 0xff
 8003c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d114      	bne.n	8003c7a <xQueueGenericReset+0xaa>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01a      	beq.n	8003c8e <xQueueGenericReset+0xbe>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3310      	adds	r3, #16
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 fa1f 	bl	80050a0 <xTaskRemoveFromEventList>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d012      	beq.n	8003c8e <xQueueGenericReset+0xbe>
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <xQueueGenericReset+0xcc>)
 8003c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	e009      	b.n	8003c8e <xQueueGenericReset+0xbe>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3310      	adds	r3, #16
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fef2 	bl	8003a68 <vListInitialise>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3324      	adds	r3, #36	; 0x24
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff feed 	bl	8003a68 <vListInitialise>
 8003c8e:	f002 f9f1 	bl	8006074 <vPortExitCritical>
 8003c92:	2301      	movs	r3, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	e000ed04 	.word	0xe000ed04

08003ca0 <xQueueGenericCreateStatic>:
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08e      	sub	sp, #56	; 0x38
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <xQueueGenericCreateStatic+0x2a>
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <xQueueGenericCreateStatic+0x28>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xQueueGenericCreateStatic+0x46>
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xQueueGenericCreateStatic+0x44>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <xQueueGenericCreateStatic+0x52>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <xQueueGenericCreateStatic+0x56>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <xQueueGenericCreateStatic+0x58>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xQueueGenericCreateStatic+0x72>
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	623b      	str	r3, [r7, #32]
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <xQueueGenericCreateStatic+0x70>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <xQueueGenericCreateStatic+0x7e>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <xQueueGenericCreateStatic+0x82>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <xQueueGenericCreateStatic+0x84>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <xQueueGenericCreateStatic+0x9e>
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <xQueueGenericCreateStatic+0x9c>
 8003d3e:	2350      	movs	r3, #80	; 0x50
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b50      	cmp	r3, #80	; 0x50
 8003d46:	d00a      	beq.n	8003d5e <xQueueGenericCreateStatic+0xbe>
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xQueueGenericCreateStatic+0xbc>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <xQueueGenericCreateStatic+0xe6>
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f83f 	bl	8003e04 <prvInitialiseNewQueue>
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3730      	adds	r7, #48	; 0x30
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <xQueueGenericCreate>:
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	71fb      	strb	r3, [r7, #7]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <xQueueGenericCreate+0x2a>
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <xQueueGenericCreate+0x28>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	3350      	adds	r3, #80	; 0x50
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f002 fa45 	bl	8006258 <pvPortMalloc>
 8003dce:	61b8      	str	r0, [r7, #24]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d011      	beq.n	8003dfa <xQueueGenericCreate+0x6a>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3350      	adds	r3, #80	; 0x50
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003de8:	79fa      	ldrb	r2, [r7, #7]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f805 	bl	8003e04 <prvInitialiseNewQueue>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <prvInitialiseNewQueue>:
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	70fb      	strb	r3, [r7, #3]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <prvInitialiseNewQueue+0x1c>
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <prvInitialiseNewQueue+0x22>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
 8003e32:	2101      	movs	r1, #1
 8003e34:	69b8      	ldr	r0, [r7, #24]
 8003e36:	f7ff fecb 	bl	8003bd0 <xQueueGenericReset>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <xQueueGenericSend>:
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08e      	sub	sp, #56	; 0x38
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	633b      	str	r3, [r7, #48]	; 0x30
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <xQueueGenericSend+0x32>
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xQueueGenericSend+0x30>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d103      	bne.n	8003e8c <xQueueGenericSend+0x40>
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <xQueueGenericSend+0x44>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <xQueueGenericSend+0x46>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <xQueueGenericSend+0x60>
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <xQueueGenericSend+0x5e>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d103      	bne.n	8003eba <xQueueGenericSend+0x6e>
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <xQueueGenericSend+0x72>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <xQueueGenericSend+0x74>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xQueueGenericSend+0x8e>
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueGenericSend+0x8c>
 8003eda:	f001 fb05 	bl	80054e8 <xTaskGetSchedulerState>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <xQueueGenericSend+0x9e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <xQueueGenericSend+0xa2>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <xQueueGenericSend+0xa4>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xQueueGenericSend+0xbe>
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xQueueGenericSend+0xbc>
 8003f0a:	f002 f883 	bl	8006014 <vPortEnterCritical>
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <xQueueGenericSend+0xd4>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d129      	bne.n	8003f74 <xQueueGenericSend+0x128>
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f26:	f000 fa8b 	bl	8004440 <prvCopyDataToQueue>
 8003f2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <xQueueGenericSend+0x10a>
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f8b1 	bl	80050a0 <xTaskRemoveFromEventList>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d013      	beq.n	8003f6c <xQueueGenericSend+0x120>
 8003f44:	4b3f      	ldr	r3, [pc, #252]	; (8004044 <xQueueGenericSend+0x1f8>)
 8003f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	e00a      	b.n	8003f6c <xQueueGenericSend+0x120>
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <xQueueGenericSend+0x120>
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <xQueueGenericSend+0x1f8>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f002 f882 	bl	8006074 <vPortExitCritical>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e063      	b.n	800403c <xQueueGenericSend+0x1f0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d103      	bne.n	8003f82 <xQueueGenericSend+0x136>
 8003f7a:	f002 f87b 	bl	8006074 <vPortExitCritical>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e05c      	b.n	800403c <xQueueGenericSend+0x1f0>
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <xQueueGenericSend+0x14a>
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 f94d 	bl	800522c <vTaskInternalSetTimeOutState>
 8003f92:	2301      	movs	r3, #1
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
 8003f96:	f002 f86d 	bl	8006074 <vPortExitCritical>
 8003f9a:	f000 fe1b 	bl	8004bd4 <vTaskSuspendAll>
 8003f9e:	f002 f839 	bl	8006014 <vPortEnterCritical>
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa8:	b25b      	sxtb	r3, r3
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d103      	bne.n	8003fb8 <xQueueGenericSend+0x16c>
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fbe:	b25b      	sxtb	r3, r3
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d103      	bne.n	8003fce <xQueueGenericSend+0x182>
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fce:	f002 f851 	bl	8006074 <vPortExitCritical>
 8003fd2:	1d3a      	adds	r2, r7, #4
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 f93c 	bl	8005258 <xTaskCheckForTimeOut>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d124      	bne.n	8004030 <xQueueGenericSend+0x1e4>
 8003fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fe8:	f000 fb22 	bl	8004630 <prvIsQueueFull>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <xQueueGenericSend+0x1d8>
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	3310      	adds	r3, #16
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 ffc4 	bl	8004f88 <vTaskPlaceOnEventList>
 8004000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004002:	f000 faad 	bl	8004560 <prvUnlockQueue>
 8004006:	f000 fdf3 	bl	8004bf0 <xTaskResumeAll>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f47f af7c 	bne.w	8003f0a <xQueueGenericSend+0xbe>
 8004012:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <xQueueGenericSend+0x1f8>)
 8004014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	e772      	b.n	8003f0a <xQueueGenericSend+0xbe>
 8004024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004026:	f000 fa9b 	bl	8004560 <prvUnlockQueue>
 800402a:	f000 fde1 	bl	8004bf0 <xTaskResumeAll>
 800402e:	e76c      	b.n	8003f0a <xQueueGenericSend+0xbe>
 8004030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004032:	f000 fa95 	bl	8004560 <prvUnlockQueue>
 8004036:	f000 fddb 	bl	8004bf0 <xTaskResumeAll>
 800403a:	2300      	movs	r3, #0
 800403c:	4618      	mov	r0, r3
 800403e:	3738      	adds	r7, #56	; 0x38
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	e000ed04 	.word	0xe000ed04

08004048 <xQueueGenericSendFromISR>:
 8004048:	b580      	push	{r7, lr}
 800404a:	b090      	sub	sp, #64	; 0x40
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <xQueueGenericSendFromISR+0x2e>
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xQueueGenericSendFromISR+0x2c>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <xQueueGenericSendFromISR+0x3c>
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <xQueueGenericSendFromISR+0x40>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <xQueueGenericSendFromISR+0x42>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <xQueueGenericSendFromISR+0x5c>
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <xQueueGenericSendFromISR+0x5a>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d103      	bne.n	80040b2 <xQueueGenericSendFromISR+0x6a>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <xQueueGenericSendFromISR+0x6e>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <xQueueGenericSendFromISR+0x70>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xQueueGenericSendFromISR+0x8a>
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	623b      	str	r3, [r7, #32]
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xQueueGenericSendFromISR+0x88>
 80040d2:	f002 f881 	bl	80061d8 <vPortValidateInterruptPriority>
 80040d6:	f3ef 8211 	mrs	r2, BASEPRI
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	61fa      	str	r2, [r7, #28]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	637b      	str	r3, [r7, #52]	; 0x34
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <xQueueGenericSendFromISR+0xbc>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d12f      	bne.n	8004164 <xQueueGenericSendFromISR+0x11c>
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800410a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800411a:	f000 f991 	bl	8004440 <prvCopyDataToQueue>
 800411e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d112      	bne.n	800414e <xQueueGenericSendFromISR+0x106>
 8004128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d016      	beq.n	800415e <xQueueGenericSendFromISR+0x116>
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	3324      	adds	r3, #36	; 0x24
 8004134:	4618      	mov	r0, r3
 8004136:	f000 ffb3 	bl	80050a0 <xTaskRemoveFromEventList>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00e      	beq.n	800415e <xQueueGenericSendFromISR+0x116>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <xQueueGenericSendFromISR+0x116>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e007      	b.n	800415e <xQueueGenericSendFromISR+0x116>
 800414e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004152:	3301      	adds	r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	b25a      	sxtb	r2, r3
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800415e:	2301      	movs	r3, #1
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004162:	e001      	b.n	8004168 <xQueueGenericSendFromISR+0x120>
 8004164:	2300      	movs	r3, #0
 8004166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	bf00      	nop
 8004174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004176:	4618      	mov	r0, r3
 8004178:	3740      	adds	r7, #64	; 0x40
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <xQueueReceive>:
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	; 0x30
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	2300      	movs	r3, #0
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <xQueueReceive+0x30>
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <xQueueReceive+0x2e>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <xQueueReceive+0x3e>
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <xQueueReceive+0x42>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <xQueueReceive+0x44>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <xQueueReceive+0x5e>
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xQueueReceive+0x5c>
 80041de:	f001 f983 	bl	80054e8 <xTaskGetSchedulerState>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <xQueueReceive+0x6e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <xQueueReceive+0x72>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <xQueueReceive+0x74>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xQueueReceive+0x8e>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xQueueReceive+0x8c>
 800420e:	f001 ff01 	bl	8006014 <vPortEnterCritical>
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01f      	beq.n	800425e <xQueueReceive+0xde>
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004222:	f000 f977 	bl	8004514 <prvCopyDataFromQueue>
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1e5a      	subs	r2, r3, #1
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00f      	beq.n	8004256 <xQueueReceive+0xd6>
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	3310      	adds	r3, #16
 800423a:	4618      	mov	r0, r3
 800423c:	f000 ff30 	bl	80050a0 <xTaskRemoveFromEventList>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <xQueueReceive+0xd6>
 8004246:	4b3d      	ldr	r3, [pc, #244]	; (800433c <xQueueReceive+0x1bc>)
 8004248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f001 ff0d 	bl	8006074 <vPortExitCritical>
 800425a:	2301      	movs	r3, #1
 800425c:	e069      	b.n	8004332 <xQueueReceive+0x1b2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d103      	bne.n	800426c <xQueueReceive+0xec>
 8004264:	f001 ff06 	bl	8006074 <vPortExitCritical>
 8004268:	2300      	movs	r3, #0
 800426a:	e062      	b.n	8004332 <xQueueReceive+0x1b2>
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <xQueueReceive+0x100>
 8004272:	f107 0310 	add.w	r3, r7, #16
 8004276:	4618      	mov	r0, r3
 8004278:	f000 ffd8 	bl	800522c <vTaskInternalSetTimeOutState>
 800427c:	2301      	movs	r3, #1
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004280:	f001 fef8 	bl	8006074 <vPortExitCritical>
 8004284:	f000 fca6 	bl	8004bd4 <vTaskSuspendAll>
 8004288:	f001 fec4 	bl	8006014 <vPortEnterCritical>
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004292:	b25b      	sxtb	r3, r3
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d103      	bne.n	80042a2 <xQueueReceive+0x122>
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a8:	b25b      	sxtb	r3, r3
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d103      	bne.n	80042b8 <xQueueReceive+0x138>
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b8:	f001 fedc 	bl	8006074 <vPortExitCritical>
 80042bc:	1d3a      	adds	r2, r7, #4
 80042be:	f107 0310 	add.w	r3, r7, #16
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 ffc7 	bl	8005258 <xTaskCheckForTimeOut>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d123      	bne.n	8004318 <xQueueReceive+0x198>
 80042d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d2:	f000 f997 	bl	8004604 <prvIsQueueEmpty>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d017      	beq.n	800430c <xQueueReceive+0x18c>
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	3324      	adds	r3, #36	; 0x24
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fe4f 	bl	8004f88 <vTaskPlaceOnEventList>
 80042ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ec:	f000 f938 	bl	8004560 <prvUnlockQueue>
 80042f0:	f000 fc7e 	bl	8004bf0 <xTaskResumeAll>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d189      	bne.n	800420e <xQueueReceive+0x8e>
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <xQueueReceive+0x1bc>)
 80042fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	e780      	b.n	800420e <xQueueReceive+0x8e>
 800430c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800430e:	f000 f927 	bl	8004560 <prvUnlockQueue>
 8004312:	f000 fc6d 	bl	8004bf0 <xTaskResumeAll>
 8004316:	e77a      	b.n	800420e <xQueueReceive+0x8e>
 8004318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800431a:	f000 f921 	bl	8004560 <prvUnlockQueue>
 800431e:	f000 fc67 	bl	8004bf0 <xTaskResumeAll>
 8004322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004324:	f000 f96e 	bl	8004604 <prvIsQueueEmpty>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	f43f af6f 	beq.w	800420e <xQueueReceive+0x8e>
 8004330:	2300      	movs	r3, #0
 8004332:	4618      	mov	r0, r3
 8004334:	3730      	adds	r7, #48	; 0x30
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xQueueReceiveFromISR>:
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	633b      	str	r3, [r7, #48]	; 0x30
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <xQueueReceiveFromISR+0x2c>
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <xQueueReceiveFromISR+0x2a>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <xQueueReceiveFromISR+0x3a>
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <xQueueReceiveFromISR+0x3e>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueReceiveFromISR+0x40>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xQueueReceiveFromISR+0x5a>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueReceiveFromISR+0x58>
 800439a:	f001 ff1d 	bl	80061d8 <vPortValidateInterruptPriority>
 800439e:	f3ef 8211 	mrs	r2, BASEPRI
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	61ba      	str	r2, [r7, #24]
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d02f      	beq.n	8004426 <xQueueReceiveFromISR+0xe6>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043d4:	f000 f89e 	bl	8004514 <prvCopyDataFromQueue>
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
 80043e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d112      	bne.n	8004410 <xQueueReceiveFromISR+0xd0>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <xQueueReceiveFromISR+0xe0>
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	3310      	adds	r3, #16
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fe52 	bl	80050a0 <xTaskRemoveFromEventList>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <xQueueReceiveFromISR+0xe0>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <xQueueReceiveFromISR+0xe0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e007      	b.n	8004420 <xQueueReceiveFromISR+0xe0>
 8004410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004414:	3301      	adds	r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	b25a      	sxtb	r2, r3
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004420:	2301      	movs	r3, #1
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
 8004424:	e001      	b.n	800442a <xQueueReceiveFromISR+0xea>
 8004426:	2300      	movs	r3, #0
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	bf00      	nop
 8004436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004438:	4618      	mov	r0, r3
 800443a:	3738      	adds	r7, #56	; 0x38
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <prvCopyDataToQueue>:
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <prvCopyDataToQueue+0x3a>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d14d      	bne.n	8004502 <prvCopyDataToQueue+0xc2>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f001 f85a 	bl	8005524 <xTaskPriorityDisinherit>
 8004470:	6178      	str	r0, [r7, #20]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	e043      	b.n	8004502 <prvCopyDataToQueue+0xc2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d119      	bne.n	80044b4 <prvCopyDataToQueue+0x74>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6858      	ldr	r0, [r3, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	461a      	mov	r2, r3
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	f002 fa0d 	bl	80068aa <memcpy>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	441a      	add	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d32b      	bcc.n	8004502 <prvCopyDataToQueue+0xc2>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	e026      	b.n	8004502 <prvCopyDataToQueue+0xc2>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68d8      	ldr	r0, [r3, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	461a      	mov	r2, r3
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	f002 f9f3 	bl	80068aa <memcpy>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	425b      	negs	r3, r3
 80044ce:	441a      	add	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d207      	bcs.n	80044f0 <prvCopyDataToQueue+0xb0>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	425b      	negs	r3, r3
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	60da      	str	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d105      	bne.n	8004502 <prvCopyDataToQueue+0xc2>
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <prvCopyDataToQueue+0xc2>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3b01      	subs	r3, #1
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <prvCopyDataFromQueue>:
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d018      	beq.n	8004558 <prvCopyDataFromQueue+0x44>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	d303      	bcc.n	8004548 <prvCopyDataFromQueue+0x34>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68d9      	ldr	r1, [r3, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	461a      	mov	r2, r3
 8004552:	6838      	ldr	r0, [r7, #0]
 8004554:	f002 f9a9 	bl	80068aa <memcpy>
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <prvUnlockQueue>:
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	f001 fd54 	bl	8006014 <vPortEnterCritical>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e011      	b.n	800459a <prvUnlockQueue+0x3a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	2b00      	cmp	r3, #0
 800457c:	d012      	beq.n	80045a4 <prvUnlockQueue+0x44>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3324      	adds	r3, #36	; 0x24
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fd8c 	bl	80050a0 <xTaskRemoveFromEventList>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <prvUnlockQueue+0x32>
 800458e:	f000 fec5 	bl	800531c <vTaskMissedYield>
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	3b01      	subs	r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	73fb      	strb	r3, [r7, #15]
 800459a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	dce9      	bgt.n	8004576 <prvUnlockQueue+0x16>
 80045a2:	e000      	b.n	80045a6 <prvUnlockQueue+0x46>
 80045a4:	bf00      	nop
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	22ff      	movs	r2, #255	; 0xff
 80045aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ae:	f001 fd61 	bl	8006074 <vPortExitCritical>
 80045b2:	f001 fd2f 	bl	8006014 <vPortEnterCritical>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045bc:	73bb      	strb	r3, [r7, #14]
 80045be:	e011      	b.n	80045e4 <prvUnlockQueue+0x84>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d012      	beq.n	80045ee <prvUnlockQueue+0x8e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3310      	adds	r3, #16
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fd67 	bl	80050a0 <xTaskRemoveFromEventList>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <prvUnlockQueue+0x7c>
 80045d8:	f000 fea0 	bl	800531c <vTaskMissedYield>
 80045dc:	7bbb      	ldrb	r3, [r7, #14]
 80045de:	3b01      	subs	r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	73bb      	strb	r3, [r7, #14]
 80045e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dce9      	bgt.n	80045c0 <prvUnlockQueue+0x60>
 80045ec:	e000      	b.n	80045f0 <prvUnlockQueue+0x90>
 80045ee:	bf00      	nop
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	22ff      	movs	r2, #255	; 0xff
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f8:	f001 fd3c 	bl	8006074 <vPortExitCritical>
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <prvIsQueueEmpty>:
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	f001 fd02 	bl	8006014 <vPortEnterCritical>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <prvIsQueueEmpty+0x1a>
 8004618:	2301      	movs	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e001      	b.n	8004622 <prvIsQueueEmpty+0x1e>
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	f001 fd27 	bl	8006074 <vPortExitCritical>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <prvIsQueueFull>:
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	f001 fcec 	bl	8006014 <vPortEnterCritical>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004644:	429a      	cmp	r2, r3
 8004646:	d102      	bne.n	800464e <prvIsQueueFull+0x1e>
 8004648:	2301      	movs	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e001      	b.n	8004652 <prvIsQueueFull+0x22>
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	f001 fd0f 	bl	8006074 <vPortExitCritical>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <vQueueAddToRegistry>:
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e014      	b.n	800469a <vQueueAddToRegistry+0x3a>
 8004670:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <vQueueAddToRegistry+0x50>)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <vQueueAddToRegistry+0x34>
 800467c:	490c      	ldr	r1, [pc, #48]	; (80046b0 <vQueueAddToRegistry+0x50>)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <vQueueAddToRegistry+0x50>)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	e006      	b.n	80046a2 <vQueueAddToRegistry+0x42>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3301      	adds	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b07      	cmp	r3, #7
 800469e:	d9e7      	bls.n	8004670 <vQueueAddToRegistry+0x10>
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	200009dc 	.word	0x200009dc

080046b4 <vQueueWaitForMessageRestricted>:
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	f001 fca6 	bl	8006014 <vPortEnterCritical>
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ce:	b25b      	sxtb	r3, r3
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d103      	bne.n	80046de <vQueueWaitForMessageRestricted+0x2a>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046e4:	b25b      	sxtb	r3, r3
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d103      	bne.n	80046f4 <vQueueWaitForMessageRestricted+0x40>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f4:	f001 fcbe 	bl	8006074 <vPortExitCritical>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <vQueueWaitForMessageRestricted+0x5a>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3324      	adds	r3, #36	; 0x24
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fc9d 	bl	8005048 <vTaskPlaceOnEventListRestricted>
 800470e:	6978      	ldr	r0, [r7, #20]
 8004710:	f7ff ff26 	bl	8004560 <prvUnlockQueue>
 8004714:	bf00      	nop
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <xTaskCreateStatic>:
 800471c:	b580      	push	{r7, lr}
 800471e:	b08e      	sub	sp, #56	; 0x38
 8004720:	af04      	add	r7, sp, #16
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <xTaskCreateStatic+0x2a>
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xTaskCreateStatic+0x28>
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <xTaskCreateStatic+0x46>
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <xTaskCreateStatic+0x44>
 8004762:	23bc      	movs	r3, #188	; 0xbc
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2bbc      	cmp	r3, #188	; 0xbc
 800476a:	d00a      	beq.n	8004782 <xTaskCreateStatic+0x66>
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xTaskCreateStatic+0x64>
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01e      	beq.n	80047c8 <xTaskCreateStatic+0xac>
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01b      	beq.n	80047c8 <xTaskCreateStatic+0xac>
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	2202      	movs	r2, #2
 800479e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 80047a2:	2300      	movs	r3, #0
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	9302      	str	r3, [sp, #8]
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f850 	bl	8004860 <prvInitialiseNewTask>
 80047c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047c2:	f000 f8f3 	bl	80049ac <prvAddNewTaskToReadyList>
 80047c6:	e001      	b.n	80047cc <xTaskCreateStatic+0xb0>
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4618      	mov	r0, r3
 80047d0:	3728      	adds	r7, #40	; 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <xTaskCreate>:
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08c      	sub	sp, #48	; 0x30
 80047da:	af04      	add	r7, sp, #16
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 fd34 	bl	8006258 <pvPortMalloc>
 80047f0:	6178      	str	r0, [r7, #20]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00e      	beq.n	8004816 <xTaskCreate+0x40>
 80047f8:	20bc      	movs	r0, #188	; 0xbc
 80047fa:	f001 fd2d 	bl	8006258 <pvPortMalloc>
 80047fe:	61f8      	str	r0, [r7, #28]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <xTaskCreate+0x38>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
 800480c:	e005      	b.n	800481a <xTaskCreate+0x44>
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f001 fdee 	bl	80063f0 <vPortFree>
 8004814:	e001      	b.n	800481a <xTaskCreate+0x44>
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <xTaskCreate+0x7a>
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 8004828:	88fa      	ldrh	r2, [r7, #6]
 800482a:	2300      	movs	r3, #0
 800482c:	9303      	str	r3, [sp, #12]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	9302      	str	r3, [sp, #8]
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f80e 	bl	8004860 <prvInitialiseNewTask>
 8004844:	69f8      	ldr	r0, [r7, #28]
 8004846:	f000 f8b1 	bl	80049ac <prvAddNewTaskToReadyList>
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e002      	b.n	8004856 <xTaskCreate+0x80>
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	4618      	mov	r0, r3
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <prvInitialiseNewTask>:
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	461a      	mov	r2, r3
 8004878:	21a5      	movs	r1, #165	; 0xa5
 800487a:	f002 f824 	bl	80068c6 <memset>
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004888:	3b01      	subs	r3, #1
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <prvInitialiseNewTask+0x58>
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <prvInitialiseNewTask+0x56>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01f      	beq.n	80048fe <prvInitialiseNewTask+0x9e>
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	e012      	b.n	80048ea <prvInitialiseNewTask+0x8a>
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	7819      	ldrb	r1, [r3, #0]
 80048cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	3334      	adds	r3, #52	; 0x34
 80048d4:	460a      	mov	r2, r1
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d006      	beq.n	80048f2 <prvInitialiseNewTask+0x92>
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b0f      	cmp	r3, #15
 80048ee:	d9e9      	bls.n	80048c4 <prvInitialiseNewTask+0x64>
 80048f0:	e000      	b.n	80048f4 <prvInitialiseNewTask+0x94>
 80048f2:	bf00      	nop
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048fc:	e003      	b.n	8004906 <prvInitialiseNewTask+0xa6>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	2b37      	cmp	r3, #55	; 0x37
 800490a:	d901      	bls.n	8004910 <prvInitialiseNewTask+0xb0>
 800490c:	2337      	movs	r3, #55	; 0x37
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004914:	62da      	str	r2, [r3, #44]	; 0x2c
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800491a:	64da      	str	r2, [r3, #76]	; 0x4c
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	2200      	movs	r2, #0
 8004920:	651a      	str	r2, [r3, #80]	; 0x50
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	3304      	adds	r3, #4
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff f8be 	bl	8003aa8 <vListInitialiseItem>
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	3318      	adds	r3, #24
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff f8b9 	bl	8003aa8 <vListInitialiseItem>
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493a:	611a      	str	r2, [r3, #16]
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	619a      	str	r2, [r3, #24]
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	2200      	movs	r2, #0
 8004958:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	3354      	adds	r3, #84	; 0x54
 8004960:	2260      	movs	r2, #96	; 0x60
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f001 ffae 	bl	80068c6 <memset>
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <prvInitialiseNewTask+0x140>)
 800496e:	659a      	str	r2, [r3, #88]	; 0x58
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	4a0c      	ldr	r2, [pc, #48]	; (80049a4 <prvInitialiseNewTask+0x144>)
 8004974:	65da      	str	r2, [r3, #92]	; 0x5c
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	4a0b      	ldr	r2, [pc, #44]	; (80049a8 <prvInitialiseNewTask+0x148>)
 800497a:	661a      	str	r2, [r3, #96]	; 0x60
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	69b8      	ldr	r0, [r7, #24]
 8004982:	f001 fa17 	bl	8005db4 <pxPortInitialiseStack>
 8004986:	4602      	mov	r2, r0
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <prvInitialiseNewTask+0x138>
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	bf00      	nop
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	0800bd8c 	.word	0x0800bd8c
 80049a4:	0800bdac 	.word	0x0800bdac
 80049a8:	0800bd6c 	.word	0x0800bd6c

080049ac <prvAddNewTaskToReadyList>:
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	f001 fb2e 	bl	8006014 <vPortEnterCritical>
 80049b8:	4b2d      	ldr	r3, [pc, #180]	; (8004a70 <prvAddNewTaskToReadyList+0xc4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <prvAddNewTaskToReadyList+0xc4>)
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b2c      	ldr	r3, [pc, #176]	; (8004a74 <prvAddNewTaskToReadyList+0xc8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <prvAddNewTaskToReadyList+0x32>
 80049ca:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <prvAddNewTaskToReadyList+0xc8>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <prvAddNewTaskToReadyList+0xc4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d110      	bne.n	80049fa <prvAddNewTaskToReadyList+0x4e>
 80049d8:	f000 fcc4 	bl	8005364 <prvInitialiseTaskLists>
 80049dc:	e00d      	b.n	80049fa <prvAddNewTaskToReadyList+0x4e>
 80049de:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <prvAddNewTaskToReadyList+0xcc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <prvAddNewTaskToReadyList+0x4e>
 80049e6:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <prvAddNewTaskToReadyList+0xc8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d802      	bhi.n	80049fa <prvAddNewTaskToReadyList+0x4e>
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <prvAddNewTaskToReadyList+0xc8>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <prvAddNewTaskToReadyList+0xd0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <prvAddNewTaskToReadyList+0xd0>)
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <prvAddNewTaskToReadyList+0xd0>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	645a      	str	r2, [r3, #68]	; 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <prvAddNewTaskToReadyList+0xd4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d903      	bls.n	8004a20 <prvAddNewTaskToReadyList+0x74>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <prvAddNewTaskToReadyList+0xd4>)
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <prvAddNewTaskToReadyList+0xd8>)
 8004a2e:	441a      	add	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f7ff f843 	bl	8003ac2 <vListInsertEnd>
 8004a3c:	f001 fb1a 	bl	8006074 <vPortExitCritical>
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <prvAddNewTaskToReadyList+0xcc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <prvAddNewTaskToReadyList+0xba>
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <prvAddNewTaskToReadyList+0xc8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d207      	bcs.n	8004a66 <prvAddNewTaskToReadyList+0xba>
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <prvAddNewTaskToReadyList+0xdc>)
 8004a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000ef0 	.word	0x20000ef0
 8004a74:	20000a1c 	.word	0x20000a1c
 8004a78:	20000efc 	.word	0x20000efc
 8004a7c:	20000f0c 	.word	0x20000f0c
 8004a80:	20000ef8 	.word	0x20000ef8
 8004a84:	20000a20 	.word	0x20000a20
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <vTaskDelay>:
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d017      	beq.n	8004ace <vTaskDelay+0x42>
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <vTaskDelay+0x60>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <vTaskDelay+0x30>
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <vTaskDelay+0x2e>
 8004abc:	f000 f88a 	bl	8004bd4 <vTaskSuspendAll>
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fdb4 	bl	8005630 <prvAddCurrentTaskToDelayedList>
 8004ac8:	f000 f892 	bl	8004bf0 <xTaskResumeAll>
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d107      	bne.n	8004ae4 <vTaskDelay+0x58>
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <vTaskDelay+0x64>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000f18 	.word	0x20000f18
 8004af0:	e000ed04 	.word	0xe000ed04

08004af4 <vTaskStartScheduler>:
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af04      	add	r7, sp, #16
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	463a      	mov	r2, r7
 8004b04:	1d39      	adds	r1, r7, #4
 8004b06:	f107 0308 	add.w	r3, r7, #8
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fd8a 	bl	8003624 <vApplicationGetIdleTaskMemory>
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	9202      	str	r2, [sp, #8]
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	460a      	mov	r2, r1
 8004b22:	4924      	ldr	r1, [pc, #144]	; (8004bb4 <vTaskStartScheduler+0xc0>)
 8004b24:	4824      	ldr	r0, [pc, #144]	; (8004bb8 <vTaskStartScheduler+0xc4>)
 8004b26:	f7ff fdf9 	bl	800471c <xTaskCreateStatic>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <vTaskStartScheduler+0xc8>)
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <vTaskStartScheduler+0xc8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <vTaskStartScheduler+0x4a>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e001      	b.n	8004b42 <vTaskStartScheduler+0x4e>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d102      	bne.n	8004b4e <vTaskStartScheduler+0x5a>
 8004b48:	f000 fdc6 	bl	80056d8 <xTimerCreateTimerTask>
 8004b4c:	6178      	str	r0, [r7, #20]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d11b      	bne.n	8004b8c <vTaskStartScheduler+0x98>
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	bf00      	nop
 8004b68:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <vTaskStartScheduler+0xcc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3354      	adds	r3, #84	; 0x54
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <vTaskStartScheduler+0xd0>)
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <vTaskStartScheduler+0xd4>)
 8004b74:	f04f 32ff 	mov.w	r2, #4294967295
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <vTaskStartScheduler+0xd8>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <vTaskStartScheduler+0xdc>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f001 f9a3 	bl	8005ed0 <xPortStartScheduler>
 8004b8a:	e00e      	b.n	8004baa <vTaskStartScheduler+0xb6>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d10a      	bne.n	8004baa <vTaskStartScheduler+0xb6>
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <vTaskStartScheduler+0xb4>
 8004baa:	bf00      	nop
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	0800bc9c 	.word	0x0800bc9c
 8004bb8:	08005335 	.word	0x08005335
 8004bbc:	20000f14 	.word	0x20000f14
 8004bc0:	20000a1c 	.word	0x20000a1c
 8004bc4:	20000010 	.word	0x20000010
 8004bc8:	20000f10 	.word	0x20000f10
 8004bcc:	20000efc 	.word	0x20000efc
 8004bd0:	20000ef4 	.word	0x20000ef4

08004bd4 <vTaskSuspendAll>:
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <vTaskSuspendAll+0x18>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	4a03      	ldr	r2, [pc, #12]	; (8004bec <vTaskSuspendAll+0x18>)
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20000f18 	.word	0x20000f18

08004bf0 <xTaskResumeAll>:
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	4b42      	ldr	r3, [pc, #264]	; (8004d08 <xTaskResumeAll+0x118>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <xTaskResumeAll+0x2c>
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <xTaskResumeAll+0x2a>
 8004c1c:	f001 f9fa 	bl	8006014 <vPortEnterCritical>
 8004c20:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <xTaskResumeAll+0x118>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	4a38      	ldr	r2, [pc, #224]	; (8004d08 <xTaskResumeAll+0x118>)
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <xTaskResumeAll+0x118>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d162      	bne.n	8004cf8 <xTaskResumeAll+0x108>
 8004c32:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <xTaskResumeAll+0x11c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d05e      	beq.n	8004cf8 <xTaskResumeAll+0x108>
 8004c3a:	e02f      	b.n	8004c9c <xTaskResumeAll+0xac>
 8004c3c:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <xTaskResumeAll+0x120>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3318      	adds	r3, #24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe ff97 	bl	8003b7c <uxListRemove>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe ff92 	bl	8003b7c <uxListRemove>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <xTaskResumeAll+0x124>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <xTaskResumeAll+0x7c>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <xTaskResumeAll+0x124>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <xTaskResumeAll+0x128>)
 8004c7a:	441a      	add	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fe ff1d 	bl	8003ac2 <vListInsertEnd>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <xTaskResumeAll+0x12c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <xTaskResumeAll+0xac>
 8004c96:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <xTaskResumeAll+0x130>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <xTaskResumeAll+0x120>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1cb      	bne.n	8004c3c <xTaskResumeAll+0x4c>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <xTaskResumeAll+0xbe>
 8004caa:	f000 fbfd 	bl	80054a8 <prvResetNextTaskUnblockTime>
 8004cae:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <xTaskResumeAll+0x134>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	607b      	str	r3, [r7, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d010      	beq.n	8004cdc <xTaskResumeAll+0xec>
 8004cba:	f000 f847 	bl	8004d4c <xTaskIncrementTick>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <xTaskResumeAll+0xda>
 8004cc4:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <xTaskResumeAll+0x130>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	607b      	str	r3, [r7, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f1      	bne.n	8004cba <xTaskResumeAll+0xca>
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <xTaskResumeAll+0x134>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <xTaskResumeAll+0x130>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <xTaskResumeAll+0x108>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <xTaskResumeAll+0x138>)
 8004cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f001 f9bc 	bl	8006074 <vPortExitCritical>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000f18 	.word	0x20000f18
 8004d0c:	20000ef0 	.word	0x20000ef0
 8004d10:	20000eb0 	.word	0x20000eb0
 8004d14:	20000ef8 	.word	0x20000ef8
 8004d18:	20000a20 	.word	0x20000a20
 8004d1c:	20000a1c 	.word	0x20000a1c
 8004d20:	20000f04 	.word	0x20000f04
 8004d24:	20000f00 	.word	0x20000f00
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <xTaskGetTickCount>:
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <xTaskGetTickCount+0x1c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	607b      	str	r3, [r7, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000ef4 	.word	0x20000ef4

08004d4c <xTaskIncrementTick>:
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	4b4f      	ldr	r3, [pc, #316]	; (8004e94 <xTaskIncrementTick+0x148>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 808f 	bne.w	8004e7e <xTaskIncrementTick+0x132>
 8004d60:	4b4d      	ldr	r3, [pc, #308]	; (8004e98 <xTaskIncrementTick+0x14c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	4a4b      	ldr	r2, [pc, #300]	; (8004e98 <xTaskIncrementTick+0x14c>)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d120      	bne.n	8004db6 <xTaskIncrementTick+0x6a>
 8004d74:	4b49      	ldr	r3, [pc, #292]	; (8004e9c <xTaskIncrementTick+0x150>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <xTaskIncrementTick+0x48>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <xTaskIncrementTick+0x46>
 8004d94:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <xTaskIncrementTick+0x150>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	4b41      	ldr	r3, [pc, #260]	; (8004ea0 <xTaskIncrementTick+0x154>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a3f      	ldr	r2, [pc, #252]	; (8004e9c <xTaskIncrementTick+0x150>)
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4a3f      	ldr	r2, [pc, #252]	; (8004ea0 <xTaskIncrementTick+0x154>)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b3e      	ldr	r3, [pc, #248]	; (8004ea4 <xTaskIncrementTick+0x158>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	4a3d      	ldr	r2, [pc, #244]	; (8004ea4 <xTaskIncrementTick+0x158>)
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	f000 fb79 	bl	80054a8 <prvResetNextTaskUnblockTime>
 8004db6:	4b3c      	ldr	r3, [pc, #240]	; (8004ea8 <xTaskIncrementTick+0x15c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d349      	bcc.n	8004e54 <xTaskIncrementTick+0x108>
 8004dc0:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <xTaskIncrementTick+0x150>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <xTaskIncrementTick+0x88>
 8004dca:	4b37      	ldr	r3, [pc, #220]	; (8004ea8 <xTaskIncrementTick+0x15c>)
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e03f      	b.n	8004e54 <xTaskIncrementTick+0x108>
 8004dd4:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <xTaskIncrementTick+0x150>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	607b      	str	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d203      	bcs.n	8004df4 <xTaskIncrementTick+0xa8>
 8004dec:	4a2e      	ldr	r2, [pc, #184]	; (8004ea8 <xTaskIncrementTick+0x15c>)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e02f      	b.n	8004e54 <xTaskIncrementTick+0x108>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe febf 	bl	8003b7c <uxListRemove>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d004      	beq.n	8004e10 <xTaskIncrementTick+0xc4>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	3318      	adds	r3, #24
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe feb6 	bl	8003b7c <uxListRemove>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	4b25      	ldr	r3, [pc, #148]	; (8004eac <xTaskIncrementTick+0x160>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d903      	bls.n	8004e24 <xTaskIncrementTick+0xd8>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	4a22      	ldr	r2, [pc, #136]	; (8004eac <xTaskIncrementTick+0x160>)
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <xTaskIncrementTick+0x164>)
 8004e32:	441a      	add	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f7fe fe41 	bl	8003ac2 <vListInsertEnd>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e44:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <xTaskIncrementTick+0x168>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d3b8      	bcc.n	8004dc0 <xTaskIncrementTick+0x74>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e7b5      	b.n	8004dc0 <xTaskIncrementTick+0x74>
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <xTaskIncrementTick+0x168>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	4915      	ldr	r1, [pc, #84]	; (8004eb0 <xTaskIncrementTick+0x164>)
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d901      	bls.n	8004e70 <xTaskIncrementTick+0x124>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <xTaskIncrementTick+0x16c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d007      	beq.n	8004e88 <xTaskIncrementTick+0x13c>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e004      	b.n	8004e88 <xTaskIncrementTick+0x13c>
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <xTaskIncrementTick+0x170>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <xTaskIncrementTick+0x170>)
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000f18 	.word	0x20000f18
 8004e98:	20000ef4 	.word	0x20000ef4
 8004e9c:	20000ea8 	.word	0x20000ea8
 8004ea0:	20000eac 	.word	0x20000eac
 8004ea4:	20000f08 	.word	0x20000f08
 8004ea8:	20000f10 	.word	0x20000f10
 8004eac:	20000ef8 	.word	0x20000ef8
 8004eb0:	20000a20 	.word	0x20000a20
 8004eb4:	20000a1c 	.word	0x20000a1c
 8004eb8:	20000f04 	.word	0x20000f04
 8004ebc:	20000f00 	.word	0x20000f00

08004ec0 <vTaskSwitchContext>:
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <vTaskSwitchContext+0xb0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <vTaskSwitchContext+0x16>
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <vTaskSwitchContext+0xb4>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e046      	b.n	8004f64 <vTaskSwitchContext+0xa4>
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <vTaskSwitchContext+0xb4>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <vTaskSwitchContext+0xb8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e010      	b.n	8004f06 <vTaskSwitchContext+0x46>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <vTaskSwitchContext+0x40>
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	bf00      	nop
 8004efe:	e7fe      	b.n	8004efe <vTaskSwitchContext+0x3e>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	491d      	ldr	r1, [pc, #116]	; (8004f7c <vTaskSwitchContext+0xbc>)
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0e4      	beq.n	8004ee4 <vTaskSwitchContext+0x24>
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <vTaskSwitchContext+0xbc>)
 8004f26:	4413      	add	r3, r2
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d104      	bne.n	8004f4a <vTaskSwitchContext+0x8a>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4a0b      	ldr	r2, [pc, #44]	; (8004f80 <vTaskSwitchContext+0xc0>)
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <vTaskSwitchContext+0xb8>)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <vTaskSwitchContext+0xc0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3354      	adds	r3, #84	; 0x54
 8004f60:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <vTaskSwitchContext+0xc4>)
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20000f18 	.word	0x20000f18
 8004f74:	20000f04 	.word	0x20000f04
 8004f78:	20000ef8 	.word	0x20000ef8
 8004f7c:	20000a20 	.word	0x20000a20
 8004f80:	20000a1c 	.word	0x20000a1c
 8004f84:	20000010 	.word	0x20000010

08004f88 <vTaskPlaceOnEventList>:
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <vTaskPlaceOnEventList+0x26>
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <vTaskPlaceOnEventList+0x24>
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <vTaskPlaceOnEventList+0x44>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3318      	adds	r3, #24
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fe fda7 	bl	8003b0a <vListInsert>
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	6838      	ldr	r0, [r7, #0]
 8004fc0:	f000 fb36 	bl	8005630 <prvAddCurrentTaskToDelayedList>
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000a1c 	.word	0x20000a1c

08004fd0 <vTaskPlaceOnUnorderedEventList>:
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <vTaskPlaceOnUnorderedEventList+0x28>
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <vTaskPlaceOnUnorderedEventList+0x26>
 8004ff8:	4b11      	ldr	r3, [pc, #68]	; (8005040 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <vTaskPlaceOnUnorderedEventList+0x46>
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <vTaskPlaceOnUnorderedEventList+0x44>
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005020:	619a      	str	r2, [r3, #24]
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3318      	adds	r3, #24
 8005028:	4619      	mov	r1, r3
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7fe fd49 	bl	8003ac2 <vListInsertEnd>
 8005030:	2101      	movs	r1, #1
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fafc 	bl	8005630 <prvAddCurrentTaskToDelayedList>
 8005038:	bf00      	nop
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000f18 	.word	0x20000f18
 8005044:	20000a1c 	.word	0x20000a1c

08005048 <vTaskPlaceOnEventListRestricted>:
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <vTaskPlaceOnEventListRestricted+0x28>
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <vTaskPlaceOnEventListRestricted+0x26>
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <vTaskPlaceOnEventListRestricted+0x54>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3318      	adds	r3, #24
 8005076:	4619      	mov	r1, r3
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7fe fd22 	bl	8003ac2 <vListInsertEnd>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <vTaskPlaceOnEventListRestricted+0x42>
 8005084:	f04f 33ff 	mov.w	r3, #4294967295
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	68b8      	ldr	r0, [r7, #8]
 800508e:	f000 facf 	bl	8005630 <prvAddCurrentTaskToDelayedList>
 8005092:	bf00      	nop
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000a1c 	.word	0x20000a1c

080050a0 <xTaskRemoveFromEventList>:
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <xTaskRemoveFromEventList+0x2c>
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <xTaskRemoveFromEventList+0x2a>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	3318      	adds	r3, #24
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe fd53 	bl	8003b7c <uxListRemove>
 80050d6:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <xTaskRemoveFromEventList+0xb0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d11d      	bne.n	800511a <xTaskRemoveFromEventList+0x7a>
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fd4a 	bl	8003b7c <uxListRemove>
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	4b19      	ldr	r3, [pc, #100]	; (8005154 <xTaskRemoveFromEventList+0xb4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d903      	bls.n	80050fc <xTaskRemoveFromEventList+0x5c>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	4a16      	ldr	r2, [pc, #88]	; (8005154 <xTaskRemoveFromEventList+0xb4>)
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4a13      	ldr	r2, [pc, #76]	; (8005158 <xTaskRemoveFromEventList+0xb8>)
 800510a:	441a      	add	r2, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7fe fcd5 	bl	8003ac2 <vListInsertEnd>
 8005118:	e005      	b.n	8005126 <xTaskRemoveFromEventList+0x86>
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3318      	adds	r3, #24
 800511e:	4619      	mov	r1, r3
 8005120:	480e      	ldr	r0, [pc, #56]	; (800515c <xTaskRemoveFromEventList+0xbc>)
 8005122:	f7fe fcce 	bl	8003ac2 <vListInsertEnd>
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <xTaskRemoveFromEventList+0xc0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d905      	bls.n	8005140 <xTaskRemoveFromEventList+0xa0>
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <xTaskRemoveFromEventList+0xc4>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e001      	b.n	8005144 <xTaskRemoveFromEventList+0xa4>
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000f18 	.word	0x20000f18
 8005154:	20000ef8 	.word	0x20000ef8
 8005158:	20000a20 	.word	0x20000a20
 800515c:	20000eb0 	.word	0x20000eb0
 8005160:	20000a1c 	.word	0x20000a1c
 8005164:	20000f04 	.word	0x20000f04

08005168 <vTaskRemoveFromUnorderedEventList>:
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
 8005172:	4b29      	ldr	r3, [pc, #164]	; (8005218 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <vTaskRemoveFromUnorderedEventList+0x28>
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <vTaskRemoveFromUnorderedEventList+0x26>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <vTaskRemoveFromUnorderedEventList+0x54>
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <vTaskRemoveFromUnorderedEventList+0x52>
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7fe fcdd 	bl	8003b7c <uxListRemove>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fcd8 	bl	8003b7c <uxListRemove>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4b12      	ldr	r3, [pc, #72]	; (800521c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d903      	bls.n	80051e0 <vTaskRemoveFromUnorderedEventList+0x78>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a0f      	ldr	r2, [pc, #60]	; (800521c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4a0c      	ldr	r2, [pc, #48]	; (8005220 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80051ee:	441a      	add	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7fe fc63 	bl	8003ac2 <vListInsertEnd>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	429a      	cmp	r2, r3
 8005208:	d902      	bls.n	8005210 <vTaskRemoveFromUnorderedEventList+0xa8>
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	bf00      	nop
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000f18 	.word	0x20000f18
 800521c:	20000ef8 	.word	0x20000ef8
 8005220:	20000a20 	.word	0x20000a20
 8005224:	20000a1c 	.word	0x20000a1c
 8005228:	20000f04 	.word	0x20000f04

0800522c <vTaskInternalSetTimeOutState>:
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <vTaskInternalSetTimeOutState+0x24>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <vTaskInternalSetTimeOutState+0x28>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	20000f08 	.word	0x20000f08
 8005254:	20000ef4 	.word	0x20000ef4

08005258 <xTaskCheckForTimeOut>:
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xTaskCheckForTimeOut+0x26>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xTaskCheckForTimeOut+0x24>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <xTaskCheckForTimeOut+0x42>
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xTaskCheckForTimeOut+0x40>
 800529a:	f000 febb 	bl	8006014 <vPortEnterCritical>
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <xTaskCheckForTimeOut+0xbc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d102      	bne.n	80052be <xTaskCheckForTimeOut+0x66>
 80052b8:	2300      	movs	r3, #0
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	e023      	b.n	8005306 <xTaskCheckForTimeOut+0xae>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <xTaskCheckForTimeOut+0xc0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d007      	beq.n	80052da <xTaskCheckForTimeOut+0x82>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <xTaskCheckForTimeOut+0x82>
 80052d4:	2301      	movs	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	e015      	b.n	8005306 <xTaskCheckForTimeOut+0xae>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d20b      	bcs.n	80052fc <xTaskCheckForTimeOut+0xa4>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff9b 	bl	800522c <vTaskInternalSetTimeOutState>
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	e004      	b.n	8005306 <xTaskCheckForTimeOut+0xae>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	2301      	movs	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	f000 feb5 	bl	8006074 <vPortExitCritical>
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000ef4 	.word	0x20000ef4
 8005318:	20000f08 	.word	0x20000f08

0800531c <vTaskMissedYield>:
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
 8005320:	4b03      	ldr	r3, [pc, #12]	; (8005330 <vTaskMissedYield+0x14>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000f04 	.word	0x20000f04

08005334 <prvIdleTask>:
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	f000 f852 	bl	80053e4 <prvCheckTasksWaitingTermination>
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <prvIdleTask+0x28>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d9f9      	bls.n	800533c <prvIdleTask+0x8>
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <prvIdleTask+0x2c>)
 800534a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	e7f0      	b.n	800533c <prvIdleTask+0x8>
 800535a:	bf00      	nop
 800535c:	20000a20 	.word	0x20000a20
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <prvInitialiseTaskLists>:
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	2300      	movs	r3, #0
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	e00c      	b.n	800538a <prvInitialiseTaskLists+0x26>
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <prvInitialiseTaskLists+0x60>)
 800537c:	4413      	add	r3, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fb72 	bl	8003a68 <vListInitialise>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3301      	adds	r3, #1
 8005388:	607b      	str	r3, [r7, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b37      	cmp	r3, #55	; 0x37
 800538e:	d9ef      	bls.n	8005370 <prvInitialiseTaskLists+0xc>
 8005390:	480d      	ldr	r0, [pc, #52]	; (80053c8 <prvInitialiseTaskLists+0x64>)
 8005392:	f7fe fb69 	bl	8003a68 <vListInitialise>
 8005396:	480d      	ldr	r0, [pc, #52]	; (80053cc <prvInitialiseTaskLists+0x68>)
 8005398:	f7fe fb66 	bl	8003a68 <vListInitialise>
 800539c:	480c      	ldr	r0, [pc, #48]	; (80053d0 <prvInitialiseTaskLists+0x6c>)
 800539e:	f7fe fb63 	bl	8003a68 <vListInitialise>
 80053a2:	480c      	ldr	r0, [pc, #48]	; (80053d4 <prvInitialiseTaskLists+0x70>)
 80053a4:	f7fe fb60 	bl	8003a68 <vListInitialise>
 80053a8:	480b      	ldr	r0, [pc, #44]	; (80053d8 <prvInitialiseTaskLists+0x74>)
 80053aa:	f7fe fb5d 	bl	8003a68 <vListInitialise>
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <prvInitialiseTaskLists+0x78>)
 80053b0:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <prvInitialiseTaskLists+0x64>)
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <prvInitialiseTaskLists+0x7c>)
 80053b6:	4a05      	ldr	r2, [pc, #20]	; (80053cc <prvInitialiseTaskLists+0x68>)
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000a20 	.word	0x20000a20
 80053c8:	20000e80 	.word	0x20000e80
 80053cc:	20000e94 	.word	0x20000e94
 80053d0:	20000eb0 	.word	0x20000eb0
 80053d4:	20000ec4 	.word	0x20000ec4
 80053d8:	20000edc 	.word	0x20000edc
 80053dc:	20000ea8 	.word	0x20000ea8
 80053e0:	20000eac 	.word	0x20000eac

080053e4 <prvCheckTasksWaitingTermination>:
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	e019      	b.n	8005420 <prvCheckTasksWaitingTermination+0x3c>
 80053ec:	f000 fe12 	bl	8006014 <vPortEnterCritical>
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <prvCheckTasksWaitingTermination+0x50>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	607b      	str	r3, [r7, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fe fbbd 	bl	8003b7c <uxListRemove>
 8005402:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <prvCheckTasksWaitingTermination+0x54>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3b01      	subs	r3, #1
 8005408:	4a0b      	ldr	r2, [pc, #44]	; (8005438 <prvCheckTasksWaitingTermination+0x54>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <prvCheckTasksWaitingTermination+0x58>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3b01      	subs	r3, #1
 8005412:	4a0a      	ldr	r2, [pc, #40]	; (800543c <prvCheckTasksWaitingTermination+0x58>)
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	f000 fe2d 	bl	8006074 <vPortExitCritical>
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f810 	bl	8005440 <prvDeleteTCB>
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <prvCheckTasksWaitingTermination+0x58>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e1      	bne.n	80053ec <prvCheckTasksWaitingTermination+0x8>
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000ec4 	.word	0x20000ec4
 8005438:	20000ef0 	.word	0x20000ef0
 800543c:	20000ed8 	.word	0x20000ed8

08005440 <prvDeleteTCB>:
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3354      	adds	r3, #84	; 0x54
 800544c:	4618      	mov	r0, r3
 800544e:	f002 f9d5 	bl	80077fc <_reclaim_reent>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005458:	2b00      	cmp	r3, #0
 800545a:	d108      	bne.n	800546e <prvDeleteTCB+0x2e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	4618      	mov	r0, r3
 8005462:	f000 ffc5 	bl	80063f0 <vPortFree>
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 ffc2 	bl	80063f0 <vPortFree>
 800546c:	e018      	b.n	80054a0 <prvDeleteTCB+0x60>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005474:	2b01      	cmp	r3, #1
 8005476:	d103      	bne.n	8005480 <prvDeleteTCB+0x40>
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 ffb9 	bl	80063f0 <vPortFree>
 800547e:	e00f      	b.n	80054a0 <prvDeleteTCB+0x60>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005486:	2b02      	cmp	r3, #2
 8005488:	d00a      	beq.n	80054a0 <prvDeleteTCB+0x60>
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <prvDeleteTCB+0x5e>
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <prvResetNextTaskUnblockTime>:
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <prvResetNextTaskUnblockTime+0x38>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <prvResetNextTaskUnblockTime+0x1a>
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <prvResetNextTaskUnblockTime+0x3c>)
 80054ba:	f04f 32ff 	mov.w	r2, #4294967295
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e008      	b.n	80054d4 <prvResetNextTaskUnblockTime+0x2c>
 80054c2:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <prvResetNextTaskUnblockTime+0x38>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	607b      	str	r3, [r7, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4a04      	ldr	r2, [pc, #16]	; (80054e4 <prvResetNextTaskUnblockTime+0x3c>)
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	20000ea8 	.word	0x20000ea8
 80054e4:	20000f10 	.word	0x20000f10

080054e8 <xTaskGetSchedulerState>:
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <xTaskGetSchedulerState+0x34>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <xTaskGetSchedulerState+0x14>
 80054f6:	2301      	movs	r3, #1
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	e008      	b.n	800550e <xTaskGetSchedulerState+0x26>
 80054fc:	4b08      	ldr	r3, [pc, #32]	; (8005520 <xTaskGetSchedulerState+0x38>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d102      	bne.n	800550a <xTaskGetSchedulerState+0x22>
 8005504:	2302      	movs	r3, #2
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	e001      	b.n	800550e <xTaskGetSchedulerState+0x26>
 800550a:	2300      	movs	r3, #0
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	20000efc 	.word	0x20000efc
 8005520:	20000f18 	.word	0x20000f18

08005524 <xTaskPriorityDisinherit>:
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d056      	beq.n	80055e8 <xTaskPriorityDisinherit+0xc4>
 800553a:	4b2e      	ldr	r3, [pc, #184]	; (80055f4 <xTaskPriorityDisinherit+0xd0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	429a      	cmp	r2, r3
 8005542:	d00a      	beq.n	800555a <xTaskPriorityDisinherit+0x36>
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <xTaskPriorityDisinherit+0x34>
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <xTaskPriorityDisinherit+0x54>
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <xTaskPriorityDisinherit+0x52>
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	1e5a      	subs	r2, r3, #1
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	651a      	str	r2, [r3, #80]	; 0x50
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558a:	429a      	cmp	r2, r3
 800558c:	d02c      	beq.n	80055e8 <xTaskPriorityDisinherit+0xc4>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005592:	2b00      	cmp	r3, #0
 8005594:	d128      	bne.n	80055e8 <xTaskPriorityDisinherit+0xc4>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	3304      	adds	r3, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe faee 	bl	8003b7c <uxListRemove>
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	619a      	str	r2, [r3, #24]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <xTaskPriorityDisinherit+0xd4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d903      	bls.n	80055c8 <xTaskPriorityDisinherit+0xa4>
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <xTaskPriorityDisinherit+0xd4>)
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4a09      	ldr	r2, [pc, #36]	; (80055fc <xTaskPriorityDisinherit+0xd8>)
 80055d6:	441a      	add	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7fe fa6f 	bl	8003ac2 <vListInsertEnd>
 80055e4:	2301      	movs	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000a1c 	.word	0x20000a1c
 80055f8:	20000ef8 	.word	0x20000ef8
 80055fc:	20000a20 	.word	0x20000a20

08005600 <uxTaskResetEventItemValue>:
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <uxTaskResetEventItemValue+0x2c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	4b07      	ldr	r3, [pc, #28]	; (800562c <uxTaskResetEventItemValue+0x2c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <uxTaskResetEventItemValue+0x2c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800561c:	619a      	str	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	20000a1c 	.word	0x20000a1c

08005630 <prvAddCurrentTaskToDelayedList>:
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fa98 	bl	8003b7c <uxListRemove>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d10a      	bne.n	800566a <prvAddCurrentTaskToDelayedList+0x3a>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <prvAddCurrentTaskToDelayedList+0x3a>
 800565a:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4819      	ldr	r0, [pc, #100]	; (80056c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005664:	f7fe fa2d 	bl	8003ac2 <vListInsertEnd>
 8005668:	e026      	b.n	80056b8 <prvAddCurrentTaskToDelayedList+0x88>
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4413      	add	r3, r2
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	429a      	cmp	r2, r3
 8005680:	d209      	bcs.n	8005696 <prvAddCurrentTaskToDelayedList+0x66>
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f7fe fa3b 	bl	8003b0a <vListInsert>
 8005694:	e010      	b.n	80056b8 <prvAddCurrentTaskToDelayedList+0x88>
 8005696:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f7fe fa31 	bl	8003b0a <vListInsert>
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d202      	bcs.n	80056b8 <prvAddCurrentTaskToDelayedList+0x88>
 80056b2:	4a08      	ldr	r2, [pc, #32]	; (80056d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	bf00      	nop
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000ef4 	.word	0x20000ef4
 80056c4:	20000a1c 	.word	0x20000a1c
 80056c8:	20000edc 	.word	0x20000edc
 80056cc:	20000eac 	.word	0x20000eac
 80056d0:	20000ea8 	.word	0x20000ea8
 80056d4:	20000f10 	.word	0x20000f10

080056d8 <xTimerCreateTimerTask>:
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af04      	add	r7, sp, #16
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	f000 fb07 	bl	8005cf4 <prvCheckForValidListAndQueue>
 80056e6:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <xTimerCreateTimerTask+0x80>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d021      	beq.n	8005732 <xTimerCreateTimerTask+0x5a>
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	1d3a      	adds	r2, r7, #4
 80056f8:	f107 0108 	add.w	r1, r7, #8
 80056fc:	f107 030c 	add.w	r3, r7, #12
 8005700:	4618      	mov	r0, r3
 8005702:	f7fd ffa9 	bl	8003658 <vApplicationGetTimerTaskMemory>
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	9202      	str	r2, [sp, #8]
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	2302      	movs	r3, #2
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	460a      	mov	r2, r1
 8005718:	4910      	ldr	r1, [pc, #64]	; (800575c <xTimerCreateTimerTask+0x84>)
 800571a:	4811      	ldr	r0, [pc, #68]	; (8005760 <xTimerCreateTimerTask+0x88>)
 800571c:	f7fe fffe 	bl	800471c <xTaskCreateStatic>
 8005720:	4603      	mov	r3, r0
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <xTimerCreateTimerTask+0x8c>)
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <xTimerCreateTimerTask+0x8c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <xTimerCreateTimerTask+0x5a>
 800572e:	2301      	movs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xTimerCreateTimerTask+0x76>
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xTimerCreateTimerTask+0x74>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000f4c 	.word	0x20000f4c
 800575c:	0800bca4 	.word	0x0800bca4
 8005760:	0800589d 	.word	0x0800589d
 8005764:	20000f50 	.word	0x20000f50

08005768 <xTimerGenericCommand>:
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	2300      	movs	r3, #0
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xTimerGenericCommand+0x2e>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xTimerGenericCommand+0x2c>
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <xTimerGenericCommand+0x98>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d02a      	beq.n	80057f4 <xTimerGenericCommand+0x8c>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	dc18      	bgt.n	80057e2 <xTimerGenericCommand+0x7a>
 80057b0:	f7ff fe9a 	bl	80054e8 <xTaskGetSchedulerState>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d109      	bne.n	80057ce <xTimerGenericCommand+0x66>
 80057ba:	4b11      	ldr	r3, [pc, #68]	; (8005800 <xTimerGenericCommand+0x98>)
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	f107 0110 	add.w	r1, r7, #16
 80057c2:	2300      	movs	r3, #0
 80057c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c6:	f7fe fb41 	bl	8003e4c <xQueueGenericSend>
 80057ca:	6278      	str	r0, [r7, #36]	; 0x24
 80057cc:	e012      	b.n	80057f4 <xTimerGenericCommand+0x8c>
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <xTimerGenericCommand+0x98>)
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	f107 0110 	add.w	r1, r7, #16
 80057d6:	2300      	movs	r3, #0
 80057d8:	2200      	movs	r2, #0
 80057da:	f7fe fb37 	bl	8003e4c <xQueueGenericSend>
 80057de:	6278      	str	r0, [r7, #36]	; 0x24
 80057e0:	e008      	b.n	80057f4 <xTimerGenericCommand+0x8c>
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <xTimerGenericCommand+0x98>)
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	f107 0110 	add.w	r1, r7, #16
 80057ea:	2300      	movs	r3, #0
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	f7fe fc2b 	bl	8004048 <xQueueGenericSendFromISR>
 80057f2:	6278      	str	r0, [r7, #36]	; 0x24
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	4618      	mov	r0, r3
 80057f8:	3728      	adds	r7, #40	; 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000f4c 	.word	0x20000f4c

08005804 <prvProcessExpiredTimer>:
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
 800580e:	4b22      	ldr	r3, [pc, #136]	; (8005898 <prvProcessExpiredTimer+0x94>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	3304      	adds	r3, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe f9ad 	bl	8003b7c <uxListRemove>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d022      	beq.n	8005876 <prvProcessExpiredTimer+0x72>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	18d1      	adds	r1, r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	6978      	ldr	r0, [r7, #20]
 800583e:	f000 f8d1 	bl	80059e4 <prvInsertTimerInActiveList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01f      	beq.n	8005888 <prvProcessExpiredTimer+0x84>
 8005848:	2300      	movs	r3, #0
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2300      	movs	r3, #0
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	2100      	movs	r1, #0
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff ff88 	bl	8005768 <xTimerGenericCommand>
 8005858:	6138      	str	r0, [r7, #16]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d113      	bne.n	8005888 <prvProcessExpiredTimer+0x84>
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <prvProcessExpiredTimer+0x70>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	b2da      	uxtb	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	6978      	ldr	r0, [r7, #20]
 800588e:	4798      	blx	r3
 8005890:	bf00      	nop
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000f44 	.word	0x20000f44

0800589c <prvTimerTask>:
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f857 	bl	800595c <prvGetNextExpireTime>
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4619      	mov	r1, r3
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f803 	bl	80058c0 <prvProcessTimerOrBlockTask>
 80058ba:	f000 f8d5 	bl	8005a68 <prvProcessReceivedCommands>
 80058be:	e7f1      	b.n	80058a4 <prvTimerTask+0x8>

080058c0 <prvProcessTimerOrBlockTask>:
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
 80058ca:	f7ff f983 	bl	8004bd4 <vTaskSuspendAll>
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f866 	bl	80059a4 <prvSampleTimeNow>
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d130      	bne.n	8005942 <prvProcessTimerOrBlockTask+0x82>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <prvProcessTimerOrBlockTask+0x3c>
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d806      	bhi.n	80058fc <prvProcessTimerOrBlockTask+0x3c>
 80058ee:	f7ff f97f 	bl	8004bf0 <xTaskResumeAll>
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ff85 	bl	8005804 <prvProcessExpiredTimer>
 80058fa:	e024      	b.n	8005946 <prvProcessTimerOrBlockTask+0x86>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <prvProcessTimerOrBlockTask+0x54>
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <prvProcessTimerOrBlockTask+0x90>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <prvProcessTimerOrBlockTask+0x50>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <prvProcessTimerOrBlockTask+0x52>
 8005910:	2300      	movs	r3, #0
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <prvProcessTimerOrBlockTask+0x94>)
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	4619      	mov	r1, r3
 8005922:	f7fe fec7 	bl	80046b4 <vQueueWaitForMessageRestricted>
 8005926:	f7ff f963 	bl	8004bf0 <xTaskResumeAll>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <prvProcessTimerOrBlockTask+0x86>
 8005930:	4b09      	ldr	r3, [pc, #36]	; (8005958 <prvProcessTimerOrBlockTask+0x98>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	e001      	b.n	8005946 <prvProcessTimerOrBlockTask+0x86>
 8005942:	f7ff f955 	bl	8004bf0 <xTaskResumeAll>
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000f48 	.word	0x20000f48
 8005954:	20000f4c 	.word	0x20000f4c
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <prvGetNextExpireTime>:
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <prvGetNextExpireTime+0x44>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <prvGetNextExpireTime+0x16>
 800596e:	2201      	movs	r2, #1
 8005970:	e000      	b.n	8005974 <prvGetNextExpireTime+0x18>
 8005972:	2200      	movs	r2, #0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <prvGetNextExpireTime+0x30>
 8005980:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <prvGetNextExpireTime+0x44>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e001      	b.n	8005990 <prvGetNextExpireTime+0x34>
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000f44 	.word	0x20000f44

080059a4 <prvSampleTimeNow>:
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	f7ff f9be 	bl	8004d2c <xTaskGetTickCount>
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <prvSampleTimeNow+0x3c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d205      	bcs.n	80059c8 <prvSampleTimeNow+0x24>
 80059bc:	f000 f936 	bl	8005c2c <prvSwitchTimerLists>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e002      	b.n	80059ce <prvSampleTimeNow+0x2a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	4a04      	ldr	r2, [pc, #16]	; (80059e0 <prvSampleTimeNow+0x3c>)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000f54 	.word	0x20000f54

080059e4 <prvInsertTimerInActiveList>:
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	605a      	str	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	611a      	str	r2, [r3, #16]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d812      	bhi.n	8005a30 <prvInsertTimerInActiveList+0x4c>
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d302      	bcc.n	8005a1e <prvInsertTimerInActiveList+0x3a>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e01b      	b.n	8005a56 <prvInsertTimerInActiveList+0x72>
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <prvInsertTimerInActiveList+0x7c>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7fe f86e 	bl	8003b0a <vListInsert>
 8005a2e:	e012      	b.n	8005a56 <prvInsertTimerInActiveList+0x72>
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d206      	bcs.n	8005a46 <prvInsertTimerInActiveList+0x62>
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d302      	bcc.n	8005a46 <prvInsertTimerInActiveList+0x62>
 8005a40:	2301      	movs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e007      	b.n	8005a56 <prvInsertTimerInActiveList+0x72>
 8005a46:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <prvInsertTimerInActiveList+0x80>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7fe f85a 	bl	8003b0a <vListInsert>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000f48 	.word	0x20000f48
 8005a64:	20000f44 	.word	0x20000f44

08005a68 <prvProcessReceivedCommands>:
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08e      	sub	sp, #56	; 0x38
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	e0ca      	b.n	8005c06 <prvProcessReceivedCommands+0x19e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da18      	bge.n	8005aa8 <prvProcessReceivedCommands+0x40>
 8005a76:	1d3b      	adds	r3, r7, #4
 8005a78:	3304      	adds	r3, #4
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <prvProcessReceivedCommands+0x30>
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <prvProcessReceivedCommands+0x2e>
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a9e:	6850      	ldr	r0, [r2, #4]
 8005aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa2:	6892      	ldr	r2, [r2, #8]
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4798      	blx	r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f2c0 80aa 	blt.w	8005c04 <prvProcessReceivedCommands+0x19c>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d004      	beq.n	8005ac6 <prvProcessReceivedCommands+0x5e>
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe f85b 	bl	8003b7c <uxListRemove>
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff ff6b 	bl	80059a4 <prvSampleTimeNow>
 8005ace:	6278      	str	r0, [r7, #36]	; 0x24
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b09      	cmp	r3, #9
 8005ad4:	f200 8097 	bhi.w	8005c06 <prvProcessReceivedCommands+0x19e>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <prvProcessReceivedCommands+0x78>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b09 	.word	0x08005b09
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b09 	.word	0x08005b09
 8005aec:	08005b7d 	.word	0x08005b7d
 8005af0:	08005b91 	.word	0x08005b91
 8005af4:	08005bdb 	.word	0x08005bdb
 8005af8:	08005b09 	.word	0x08005b09
 8005afc:	08005b09 	.word	0x08005b09
 8005b00:	08005b7d 	.word	0x08005b7d
 8005b04:	08005b91 	.word	0x08005b91
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b0e:	f043 0301 	orr.w	r3, r3, #1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	18d1      	adds	r1, r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b28:	f7ff ff5c 	bl	80059e4 <prvInsertTimerInActiveList>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d069      	beq.n	8005c06 <prvProcessReceivedCommands+0x19e>
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b38:	4798      	blx	r3
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d05e      	beq.n	8005c06 <prvProcessReceivedCommands+0x19e>
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	441a      	add	r2, r3
 8005b50:	2300      	movs	r3, #0
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	2300      	movs	r3, #0
 8005b56:	2100      	movs	r1, #0
 8005b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b5a:	f7ff fe05 	bl	8005768 <xTimerGenericCommand>
 8005b5e:	6238      	str	r0, [r7, #32]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d14f      	bne.n	8005c06 <prvProcessReceivedCommands+0x19e>
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	bf00      	nop
 8005b7a:	e7fe      	b.n	8005b7a <prvProcessReceivedCommands+0x112>
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b8e:	e03a      	b.n	8005c06 <prvProcessReceivedCommands+0x19e>
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	619a      	str	r2, [r3, #24]
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <prvProcessReceivedCommands+0x15e>
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <prvProcessReceivedCommands+0x15c>
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	18d1      	adds	r1, r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd4:	f7ff ff06 	bl	80059e4 <prvInsertTimerInActiveList>
 8005bd8:	e015      	b.n	8005c06 <prvProcessReceivedCommands+0x19e>
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <prvProcessReceivedCommands+0x188>
 8005be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bea:	f000 fc01 	bl	80063f0 <vPortFree>
 8005bee:	e00a      	b.n	8005c06 <prvProcessReceivedCommands+0x19e>
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005c02:	e000      	b.n	8005c06 <prvProcessReceivedCommands+0x19e>
 8005c04:	bf00      	nop
 8005c06:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <prvProcessReceivedCommands+0x1c0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	1d39      	adds	r1, r7, #4
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fab6 	bl	8004180 <xQueueReceive>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f47f af2a 	bne.w	8005a70 <prvProcessReceivedCommands+0x8>
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	3730      	adds	r7, #48	; 0x30
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000f4c 	.word	0x20000f4c

08005c2c <prvSwitchTimerLists>:
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	e048      	b.n	8005cc6 <prvSwitchTimerLists+0x9a>
 8005c34:	4b2d      	ldr	r3, [pc, #180]	; (8005cec <prvSwitchTimerLists+0xc0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <prvSwitchTimerLists+0xc0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fd ff95 	bl	8003b7c <uxListRemove>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	4798      	blx	r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02e      	beq.n	8005cc6 <prvSwitchTimerLists+0x9a>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4413      	add	r3, r2
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d90e      	bls.n	8005c98 <prvSwitchTimerLists+0x6c>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	611a      	str	r2, [r3, #16]
 8005c86:	4b19      	ldr	r3, [pc, #100]	; (8005cec <prvSwitchTimerLists+0xc0>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fd ff3a 	bl	8003b0a <vListInsert>
 8005c96:	e016      	b.n	8005cc6 <prvSwitchTimerLists+0x9a>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff fd60 	bl	8005768 <xTimerGenericCommand>
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <prvSwitchTimerLists+0x9a>
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <prvSwitchTimerLists+0x98>
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <prvSwitchTimerLists+0xc0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1b1      	bne.n	8005c34 <prvSwitchTimerLists+0x8>
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <prvSwitchTimerLists+0xc0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <prvSwitchTimerLists+0xc4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a04      	ldr	r2, [pc, #16]	; (8005cec <prvSwitchTimerLists+0xc0>)
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <prvSwitchTimerLists+0xc4>)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	bf00      	nop
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000f44 	.word	0x20000f44
 8005cf0:	20000f48 	.word	0x20000f48

08005cf4 <prvCheckForValidListAndQueue>:
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	f000 f98b 	bl	8006014 <vPortEnterCritical>
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <prvCheckForValidListAndQueue+0x60>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d120      	bne.n	8005d48 <prvCheckForValidListAndQueue+0x54>
 8005d06:	4814      	ldr	r0, [pc, #80]	; (8005d58 <prvCheckForValidListAndQueue+0x64>)
 8005d08:	f7fd feae 	bl	8003a68 <vListInitialise>
 8005d0c:	4813      	ldr	r0, [pc, #76]	; (8005d5c <prvCheckForValidListAndQueue+0x68>)
 8005d0e:	f7fd feab 	bl	8003a68 <vListInitialise>
 8005d12:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <prvCheckForValidListAndQueue+0x6c>)
 8005d14:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <prvCheckForValidListAndQueue+0x64>)
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <prvCheckForValidListAndQueue+0x70>)
 8005d1a:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <prvCheckForValidListAndQueue+0x68>)
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <prvCheckForValidListAndQueue+0x74>)
 8005d24:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <prvCheckForValidListAndQueue+0x78>)
 8005d26:	2110      	movs	r1, #16
 8005d28:	200a      	movs	r0, #10
 8005d2a:	f7fd ffb9 	bl	8003ca0 <xQueueGenericCreateStatic>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <prvCheckForValidListAndQueue+0x60>)
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <prvCheckForValidListAndQueue+0x60>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <prvCheckForValidListAndQueue+0x54>
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <prvCheckForValidListAndQueue+0x60>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	490b      	ldr	r1, [pc, #44]	; (8005d70 <prvCheckForValidListAndQueue+0x7c>)
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fc8c 	bl	8004660 <vQueueAddToRegistry>
 8005d48:	f000 f994 	bl	8006074 <vPortExitCritical>
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000f4c 	.word	0x20000f4c
 8005d58:	20000f1c 	.word	0x20000f1c
 8005d5c:	20000f30 	.word	0x20000f30
 8005d60:	20000f44 	.word	0x20000f44
 8005d64:	20000f48 	.word	0x20000f48
 8005d68:	20000ff8 	.word	0x20000ff8
 8005d6c:	20000f58 	.word	0x20000f58
 8005d70:	0800bcac 	.word	0x0800bcac

08005d74 <xTimerPendFunctionCallFromISR>:
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	; 0x28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	f06f 0301 	mvn.w	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <xTimerPendFunctionCallFromISR+0x3c>)
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	f107 0114 	add.w	r1, r7, #20
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	f7fe f952 	bl	8004048 <xQueueGenericSendFromISR>
 8005da4:	6278      	str	r0, [r7, #36]	; 0x24
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	4618      	mov	r0, r3
 8005daa:	3728      	adds	r7, #40	; 0x28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000f4c 	.word	0x20000f4c

08005db4 <pxPortInitialiseStack>:
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b04      	subs	r3, #4
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3b04      	subs	r3, #4
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3b04      	subs	r3, #4
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	4a0c      	ldr	r2, [pc, #48]	; (8005e18 <pxPortInitialiseStack+0x64>)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3b14      	subs	r3, #20
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3b04      	subs	r3, #4
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f06f 0202 	mvn.w	r2, #2
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3b20      	subs	r3, #32
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	08005e1d 	.word	0x08005e1d

08005e1c <prvTaskExitError>:
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
 8005e26:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <prvTaskExitError+0x54>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	d00a      	beq.n	8005e46 <prvTaskExitError+0x2a>
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <prvTaskExitError+0x28>
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60bb      	str	r3, [r7, #8]
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0fc      	beq.n	8005e5c <prvTaskExitError+0x40>
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	2000000c 	.word	0x2000000c
	...

08005e80 <SVC_Handler>:
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <pxCurrentTCBConst2>)
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	6808      	ldr	r0, [r1, #0]
 8005e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8a:	f380 8809 	msr	PSP, r0
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8811 	msr	BASEPRI, r0
 8005e9a:	4770      	bx	lr
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst2>:
 8005ea0:	20000a1c 	.word	0x20000a1c
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <prvPortStartFirstTask>:
 8005ea8:	4808      	ldr	r0, [pc, #32]	; (8005ecc <prvPortStartFirstTask+0x24>)
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	6800      	ldr	r0, [r0, #0]
 8005eae:	f380 8808 	msr	MSP, r0
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8814 	msr	CONTROL, r0
 8005eba:	b662      	cpsie	i
 8005ebc:	b661      	cpsie	f
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	df00      	svc	0
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e000ed08 	.word	0xe000ed08

08005ed0 <xPortStartScheduler>:
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <xPortStartScheduler+0x120>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a46      	ldr	r2, [pc, #280]	; (8005ff4 <xPortStartScheduler+0x124>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10a      	bne.n	8005ef6 <xPortStartScheduler+0x26>
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xPortStartScheduler+0x24>
 8005ef6:	4b3e      	ldr	r3, [pc, #248]	; (8005ff0 <xPortStartScheduler+0x120>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a3f      	ldr	r2, [pc, #252]	; (8005ff8 <xPortStartScheduler+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10a      	bne.n	8005f16 <xPortStartScheduler+0x46>
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xPortStartScheduler+0x44>
 8005f16:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <xPortStartScheduler+0x12c>)
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	70fb      	strb	r3, [r7, #3]
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b31      	ldr	r3, [pc, #196]	; (8006000 <xPortStartScheduler+0x130>)
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	4b31      	ldr	r3, [pc, #196]	; (8006004 <xPortStartScheduler+0x134>)
 8005f40:	2207      	movs	r2, #7
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e009      	b.n	8005f5a <xPortStartScheduler+0x8a>
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <xPortStartScheduler+0x134>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	4a2d      	ldr	r2, [pc, #180]	; (8006004 <xPortStartScheduler+0x134>)
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	70fb      	strb	r3, [r7, #3]
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	d0ef      	beq.n	8005f46 <xPortStartScheduler+0x76>
 8005f66:	4b27      	ldr	r3, [pc, #156]	; (8006004 <xPortStartScheduler+0x134>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1c3 0307 	rsb	r3, r3, #7
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d00a      	beq.n	8005f88 <xPortStartScheduler+0xb8>
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60bb      	str	r3, [r7, #8]
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <xPortStartScheduler+0xb6>
 8005f88:	4b1e      	ldr	r3, [pc, #120]	; (8006004 <xPortStartScheduler+0x134>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <xPortStartScheduler+0x134>)
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <xPortStartScheduler+0x134>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <xPortStartScheduler+0x134>)
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <xPortStartScheduler+0x138>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a17      	ldr	r2, [pc, #92]	; (8006008 <xPortStartScheduler+0x138>)
 8005fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <xPortStartScheduler+0x138>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a14      	ldr	r2, [pc, #80]	; (8006008 <xPortStartScheduler+0x138>)
 8005fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	f000 f8dd 	bl	800617c <vPortSetupTimerInterrupt>
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <xPortStartScheduler+0x13c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f000 f8fc 	bl	80061c4 <vPortEnableVFP>
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <xPortStartScheduler+0x140>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <xPortStartScheduler+0x140>)
 8005fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	f7ff ff66 	bl	8005ea8 <prvPortStartFirstTask>
 8005fdc:	f7fe ff70 	bl	8004ec0 <vTaskSwitchContext>
 8005fe0:	f7ff ff1c 	bl	8005e1c <prvTaskExitError>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	e000ed00 	.word	0xe000ed00
 8005ff4:	410fc271 	.word	0x410fc271
 8005ff8:	410fc270 	.word	0x410fc270
 8005ffc:	e000e400 	.word	0xe000e400
 8006000:	20001048 	.word	0x20001048
 8006004:	2000104c 	.word	0x2000104c
 8006008:	e000ed20 	.word	0xe000ed20
 800600c:	2000000c 	.word	0x2000000c
 8006010:	e000ef34 	.word	0xe000ef34

08006014 <vPortEnterCritical>:
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
 800602c:	bf00      	nop
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <vPortEnterCritical+0x58>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a0d      	ldr	r2, [pc, #52]	; (800606c <vPortEnterCritical+0x58>)
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <vPortEnterCritical+0x58>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d10f      	bne.n	8006060 <vPortEnterCritical+0x4c>
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <vPortEnterCritical+0x5c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <vPortEnterCritical+0x4c>
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <vPortEnterCritical+0x4a>
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	2000000c 	.word	0x2000000c
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <vPortExitCritical>:
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <vPortExitCritical+0x50>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <vPortExitCritical+0x24>
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <vPortExitCritical+0x22>
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <vPortExitCritical+0x50>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3b01      	subs	r3, #1
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <vPortExitCritical+0x50>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <vPortExitCritical+0x50>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <vPortExitCritical+0x42>
 80060aa:	2300      	movs	r3, #0
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	2000000c 	.word	0x2000000c
	...

080060d0 <PendSV_Handler>:
 80060d0:	f3ef 8009 	mrs	r0, PSP
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <pxCurrentTCBConst>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f01e 0f10 	tst.w	lr, #16
 80060e0:	bf08      	it	eq
 80060e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060f4:	f380 8811 	msr	BASEPRI, r0
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f7fe fede 	bl	8004ec0 <vTaskSwitchContext>
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f380 8811 	msr	BASEPRI, r0
 800610c:	bc09      	pop	{r0, r3}
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	6808      	ldr	r0, [r1, #0]
 8006112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006116:	f01e 0f10 	tst.w	lr, #16
 800611a:	bf08      	it	eq
 800611c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006120:	f380 8809 	msr	PSP, r0
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst>:
 8006130:	20000a1c 	.word	0x20000a1c
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <xPortSysTickHandler>:
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	bf00      	nop
 8006152:	f7fe fdfb 	bl	8004d4c <xTaskIncrementTick>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <xPortSysTickHandler+0x2c>
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <xPortSysTickHandler+0x40>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortSetupTimerInterrupt>:
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <vPortSetupTimerInterrupt+0x38>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <vPortSetupTimerInterrupt+0x3c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <vPortSetupTimerInterrupt+0x40>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <vPortSetupTimerInterrupt+0x44>)
 800619a:	3b01      	subs	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e010 	.word	0xe000e010
 80061b4:	e000e018 	.word	0xe000e018
 80061b8:	20000000 	.word	0x20000000
 80061bc:	10624dd3 	.word	0x10624dd3
 80061c0:	e000e014 	.word	0xe000e014

080061c4 <vPortEnableVFP>:
 80061c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061d4 <vPortEnableVFP+0x10>
 80061c8:	6801      	ldr	r1, [r0, #0]
 80061ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061ce:	6001      	str	r1, [r0, #0]
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	e000ed88 	.word	0xe000ed88

080061d8 <vPortValidateInterruptPriority>:
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	f3ef 8305 	mrs	r3, IPSR
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d914      	bls.n	8006214 <vPortValidateInterruptPriority+0x3c>
 80061ea:	4a17      	ldr	r2, [pc, #92]	; (8006248 <vPortValidateInterruptPriority+0x70>)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	72fb      	strb	r3, [r7, #11]
 80061f4:	4b15      	ldr	r3, [pc, #84]	; (800624c <vPortValidateInterruptPriority+0x74>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	7afa      	ldrb	r2, [r7, #11]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d20a      	bcs.n	8006214 <vPortValidateInterruptPriority+0x3c>
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	607b      	str	r3, [r7, #4]
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <vPortValidateInterruptPriority+0x3a>
 8006214:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <vPortValidateInterruptPriority+0x78>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <vPortValidateInterruptPriority+0x7c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d90a      	bls.n	800623a <vPortValidateInterruptPriority+0x62>
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <vPortValidateInterruptPriority+0x60>
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	e000e3f0 	.word	0xe000e3f0
 800624c:	20001048 	.word	0x20001048
 8006250:	e000ed0c 	.word	0xe000ed0c
 8006254:	2000104c 	.word	0x2000104c

08006258 <pvPortMalloc>:
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	f7fe fcb6 	bl	8004bd4 <vTaskSuspendAll>
 8006268:	4b5b      	ldr	r3, [pc, #364]	; (80063d8 <pvPortMalloc+0x180>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <pvPortMalloc+0x1c>
 8006270:	f000 f920 	bl	80064b4 <prvHeapInit>
 8006274:	4b59      	ldr	r3, [pc, #356]	; (80063dc <pvPortMalloc+0x184>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 8093 	bne.w	80063a8 <pvPortMalloc+0x150>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01d      	beq.n	80062c4 <pvPortMalloc+0x6c>
 8006288:	2208      	movs	r2, #8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4413      	add	r3, r2
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	2b00      	cmp	r3, #0
 8006298:	d014      	beq.n	80062c4 <pvPortMalloc+0x6c>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f023 0307 	bic.w	r3, r3, #7
 80062a0:	3308      	adds	r3, #8
 80062a2:	607b      	str	r3, [r7, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <pvPortMalloc+0x6c>
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <pvPortMalloc+0x6a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d06e      	beq.n	80063a8 <pvPortMalloc+0x150>
 80062ca:	4b45      	ldr	r3, [pc, #276]	; (80063e0 <pvPortMalloc+0x188>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d869      	bhi.n	80063a8 <pvPortMalloc+0x150>
 80062d4:	4b43      	ldr	r3, [pc, #268]	; (80063e4 <pvPortMalloc+0x18c>)
 80062d6:	623b      	str	r3, [r7, #32]
 80062d8:	4b42      	ldr	r3, [pc, #264]	; (80063e4 <pvPortMalloc+0x18c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
 80062de:	e004      	b.n	80062ea <pvPortMalloc+0x92>
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	623b      	str	r3, [r7, #32]
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d903      	bls.n	80062fc <pvPortMalloc+0xa4>
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f1      	bne.n	80062e0 <pvPortMalloc+0x88>
 80062fc:	4b36      	ldr	r3, [pc, #216]	; (80063d8 <pvPortMalloc+0x180>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006302:	429a      	cmp	r2, r3
 8006304:	d050      	beq.n	80063a8 <pvPortMalloc+0x150>
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2208      	movs	r2, #8
 800630c:	4413      	add	r3, r2
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	2308      	movs	r3, #8
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	429a      	cmp	r2, r3
 8006326:	d91f      	bls.n	8006368 <pvPortMalloc+0x110>
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <pvPortMalloc+0xf8>
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <pvPortMalloc+0xf6>
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	605a      	str	r2, [r3, #4]
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	69b8      	ldr	r0, [r7, #24]
 8006364:	f000 f908 	bl	8006578 <prvInsertBlockIntoFreeList>
 8006368:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <pvPortMalloc+0x188>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <pvPortMalloc+0x188>)
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <pvPortMalloc+0x188>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <pvPortMalloc+0x190>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d203      	bcs.n	800638a <pvPortMalloc+0x132>
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <pvPortMalloc+0x188>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <pvPortMalloc+0x190>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <pvPortMalloc+0x184>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	431a      	orrs	r2, r3
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <pvPortMalloc+0x194>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3301      	adds	r3, #1
 80063a4:	4a11      	ldr	r2, [pc, #68]	; (80063ec <pvPortMalloc+0x194>)
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	f7fe fc22 	bl	8004bf0 <xTaskResumeAll>
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <pvPortMalloc+0x174>
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <pvPortMalloc+0x172>
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4618      	mov	r0, r3
 80063d0:	3728      	adds	r7, #40	; 0x28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20004c58 	.word	0x20004c58
 80063dc:	20004c6c 	.word	0x20004c6c
 80063e0:	20004c5c 	.word	0x20004c5c
 80063e4:	20004c50 	.word	0x20004c50
 80063e8:	20004c60 	.word	0x20004c60
 80063ec:	20004c64 	.word	0x20004c64

080063f0 <vPortFree>:
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d04d      	beq.n	800649e <vPortFree+0xae>
 8006402:	2308      	movs	r3, #8
 8006404:	425b      	negs	r3, r3
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <vPortFree+0xb8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4013      	ands	r3, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <vPortFree+0x44>
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <vPortFree+0x42>
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <vPortFree+0x62>
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <vPortFree+0x60>
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <vPortFree+0xb8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01e      	beq.n	800649e <vPortFree+0xae>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d11a      	bne.n	800649e <vPortFree+0xae>
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <vPortFree+0xb8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	43db      	mvns	r3, r3
 8006472:	401a      	ands	r2, r3
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	605a      	str	r2, [r3, #4]
 8006478:	f7fe fbac 	bl	8004bd4 <vTaskSuspendAll>
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <vPortFree+0xbc>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4413      	add	r3, r2
 8006486:	4a09      	ldr	r2, [pc, #36]	; (80064ac <vPortFree+0xbc>)
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	6938      	ldr	r0, [r7, #16]
 800648c:	f000 f874 	bl	8006578 <prvInsertBlockIntoFreeList>
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <vPortFree+0xc0>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	4a06      	ldr	r2, [pc, #24]	; (80064b0 <vPortFree+0xc0>)
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	f7fe fba9 	bl	8004bf0 <xTaskResumeAll>
 800649e:	bf00      	nop
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20004c6c 	.word	0x20004c6c
 80064ac:	20004c5c 	.word	0x20004c5c
 80064b0:	20004c68 	.word	0x20004c68

080064b4 <prvHeapInit>:
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	4b27      	ldr	r3, [pc, #156]	; (8006560 <prvHeapInit+0xac>)
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <prvHeapInit+0x34>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3307      	adds	r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <prvHeapInit+0xac>)
 80064e4:	4413      	add	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <prvHeapInit+0xb0>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <prvHeapInit+0xb0>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	605a      	str	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	2208      	movs	r2, #8
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0307 	bic.w	r3, r3, #7
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a15      	ldr	r2, [pc, #84]	; (8006568 <prvHeapInit+0xb4>)
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <prvHeapInit+0xb4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	605a      	str	r2, [r3, #4]
 800651e:	4b12      	ldr	r3, [pc, #72]	; (8006568 <prvHeapInit+0xb4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	605a      	str	r2, [r3, #4]
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <prvHeapInit+0xb4>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4a0a      	ldr	r2, [pc, #40]	; (800656c <prvHeapInit+0xb8>)
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <prvHeapInit+0xbc>)
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <prvHeapInit+0xc0>)
 800654e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	20001050 	.word	0x20001050
 8006564:	20004c50 	.word	0x20004c50
 8006568:	20004c58 	.word	0x20004c58
 800656c:	20004c60 	.word	0x20004c60
 8006570:	20004c5c 	.word	0x20004c5c
 8006574:	20004c6c 	.word	0x20004c6c

08006578 <prvInsertBlockIntoFreeList>:
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <prvInsertBlockIntoFreeList+0xac>)
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e002      	b.n	800658c <prvInsertBlockIntoFreeList+0x14>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d8f7      	bhi.n	8006586 <prvInsertBlockIntoFreeList+0xe>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4413      	add	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d108      	bne.n	80065ba <prvInsertBlockIntoFreeList+0x42>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	441a      	add	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d118      	bne.n	8006600 <prvInsertBlockIntoFreeList+0x88>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <prvInsertBlockIntoFreeList+0xb0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d00d      	beq.n	80065f6 <prvInsertBlockIntoFreeList+0x7e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	441a      	add	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e008      	b.n	8006608 <prvInsertBlockIntoFreeList+0x90>
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <prvInsertBlockIntoFreeList+0xb0>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e003      	b.n	8006608 <prvInsertBlockIntoFreeList+0x90>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d002      	beq.n	8006616 <prvInsertBlockIntoFreeList+0x9e>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20004c50 	.word	0x20004c50
 8006628:	20004c58 	.word	0x20004c58

0800662c <__errno>:
 800662c:	4b01      	ldr	r3, [pc, #4]	; (8006634 <__errno+0x8>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000010 	.word	0x20000010

08006638 <std>:
 8006638:	2300      	movs	r3, #0
 800663a:	b510      	push	{r4, lr}
 800663c:	4604      	mov	r4, r0
 800663e:	e9c0 3300 	strd	r3, r3, [r0]
 8006642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006646:	6083      	str	r3, [r0, #8]
 8006648:	8181      	strh	r1, [r0, #12]
 800664a:	6643      	str	r3, [r0, #100]	; 0x64
 800664c:	81c2      	strh	r2, [r0, #14]
 800664e:	6183      	str	r3, [r0, #24]
 8006650:	4619      	mov	r1, r3
 8006652:	2208      	movs	r2, #8
 8006654:	305c      	adds	r0, #92	; 0x5c
 8006656:	f000 f936 	bl	80068c6 <memset>
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <std+0x38>)
 800665c:	6263      	str	r3, [r4, #36]	; 0x24
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <std+0x3c>)
 8006660:	62a3      	str	r3, [r4, #40]	; 0x28
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <std+0x40>)
 8006664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006666:	4b05      	ldr	r3, [pc, #20]	; (800667c <std+0x44>)
 8006668:	6224      	str	r4, [r4, #32]
 800666a:	6323      	str	r3, [r4, #48]	; 0x30
 800666c:	bd10      	pop	{r4, pc}
 800666e:	bf00      	nop
 8006670:	08007951 	.word	0x08007951
 8006674:	08007973 	.word	0x08007973
 8006678:	080079ab 	.word	0x080079ab
 800667c:	080079cf 	.word	0x080079cf

08006680 <_cleanup_r>:
 8006680:	4901      	ldr	r1, [pc, #4]	; (8006688 <_cleanup_r+0x8>)
 8006682:	f000 b8cc 	b.w	800681e <_fwalk_reent>
 8006686:	bf00      	nop
 8006688:	080096f9 	.word	0x080096f9

0800668c <__sfmoreglue>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	2268      	movs	r2, #104	; 0x68
 8006690:	1e4d      	subs	r5, r1, #1
 8006692:	4355      	muls	r5, r2
 8006694:	460e      	mov	r6, r1
 8006696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800669a:	f000 f93d 	bl	8006918 <_malloc_r>
 800669e:	4604      	mov	r4, r0
 80066a0:	b140      	cbz	r0, 80066b4 <__sfmoreglue+0x28>
 80066a2:	2100      	movs	r1, #0
 80066a4:	e9c0 1600 	strd	r1, r6, [r0]
 80066a8:	300c      	adds	r0, #12
 80066aa:	60a0      	str	r0, [r4, #8]
 80066ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066b0:	f000 f909 	bl	80068c6 <memset>
 80066b4:	4620      	mov	r0, r4
 80066b6:	bd70      	pop	{r4, r5, r6, pc}

080066b8 <__sfp_lock_acquire>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__sfp_lock_acquire+0x8>)
 80066ba:	f000 b8f4 	b.w	80068a6 <__retarget_lock_acquire_recursive>
 80066be:	bf00      	nop
 80066c0:	20004c71 	.word	0x20004c71

080066c4 <__sfp_lock_release>:
 80066c4:	4801      	ldr	r0, [pc, #4]	; (80066cc <__sfp_lock_release+0x8>)
 80066c6:	f000 b8ef 	b.w	80068a8 <__retarget_lock_release_recursive>
 80066ca:	bf00      	nop
 80066cc:	20004c71 	.word	0x20004c71

080066d0 <__sinit_lock_acquire>:
 80066d0:	4801      	ldr	r0, [pc, #4]	; (80066d8 <__sinit_lock_acquire+0x8>)
 80066d2:	f000 b8e8 	b.w	80068a6 <__retarget_lock_acquire_recursive>
 80066d6:	bf00      	nop
 80066d8:	20004c72 	.word	0x20004c72

080066dc <__sinit_lock_release>:
 80066dc:	4801      	ldr	r0, [pc, #4]	; (80066e4 <__sinit_lock_release+0x8>)
 80066de:	f000 b8e3 	b.w	80068a8 <__retarget_lock_release_recursive>
 80066e2:	bf00      	nop
 80066e4:	20004c72 	.word	0x20004c72

080066e8 <__sinit>:
 80066e8:	b510      	push	{r4, lr}
 80066ea:	4604      	mov	r4, r0
 80066ec:	f7ff fff0 	bl	80066d0 <__sinit_lock_acquire>
 80066f0:	69a3      	ldr	r3, [r4, #24]
 80066f2:	b11b      	cbz	r3, 80066fc <__sinit+0x14>
 80066f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f8:	f7ff bff0 	b.w	80066dc <__sinit_lock_release>
 80066fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006700:	6523      	str	r3, [r4, #80]	; 0x50
 8006702:	4b13      	ldr	r3, [pc, #76]	; (8006750 <__sinit+0x68>)
 8006704:	4a13      	ldr	r2, [pc, #76]	; (8006754 <__sinit+0x6c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	62a2      	str	r2, [r4, #40]	; 0x28
 800670a:	42a3      	cmp	r3, r4
 800670c:	bf04      	itt	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	61a3      	streq	r3, [r4, #24]
 8006712:	4620      	mov	r0, r4
 8006714:	f000 f820 	bl	8006758 <__sfp>
 8006718:	6060      	str	r0, [r4, #4]
 800671a:	4620      	mov	r0, r4
 800671c:	f000 f81c 	bl	8006758 <__sfp>
 8006720:	60a0      	str	r0, [r4, #8]
 8006722:	4620      	mov	r0, r4
 8006724:	f000 f818 	bl	8006758 <__sfp>
 8006728:	2200      	movs	r2, #0
 800672a:	60e0      	str	r0, [r4, #12]
 800672c:	2104      	movs	r1, #4
 800672e:	6860      	ldr	r0, [r4, #4]
 8006730:	f7ff ff82 	bl	8006638 <std>
 8006734:	68a0      	ldr	r0, [r4, #8]
 8006736:	2201      	movs	r2, #1
 8006738:	2109      	movs	r1, #9
 800673a:	f7ff ff7d 	bl	8006638 <std>
 800673e:	68e0      	ldr	r0, [r4, #12]
 8006740:	2202      	movs	r2, #2
 8006742:	2112      	movs	r1, #18
 8006744:	f7ff ff78 	bl	8006638 <std>
 8006748:	2301      	movs	r3, #1
 800674a:	61a3      	str	r3, [r4, #24]
 800674c:	e7d2      	b.n	80066f4 <__sinit+0xc>
 800674e:	bf00      	nop
 8006750:	0800bdcc 	.word	0x0800bdcc
 8006754:	08006681 	.word	0x08006681

08006758 <__sfp>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	4607      	mov	r7, r0
 800675c:	f7ff ffac 	bl	80066b8 <__sfp_lock_acquire>
 8006760:	4b1e      	ldr	r3, [pc, #120]	; (80067dc <__sfp+0x84>)
 8006762:	681e      	ldr	r6, [r3, #0]
 8006764:	69b3      	ldr	r3, [r6, #24]
 8006766:	b913      	cbnz	r3, 800676e <__sfp+0x16>
 8006768:	4630      	mov	r0, r6
 800676a:	f7ff ffbd 	bl	80066e8 <__sinit>
 800676e:	3648      	adds	r6, #72	; 0x48
 8006770:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006774:	3b01      	subs	r3, #1
 8006776:	d503      	bpl.n	8006780 <__sfp+0x28>
 8006778:	6833      	ldr	r3, [r6, #0]
 800677a:	b30b      	cbz	r3, 80067c0 <__sfp+0x68>
 800677c:	6836      	ldr	r6, [r6, #0]
 800677e:	e7f7      	b.n	8006770 <__sfp+0x18>
 8006780:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006784:	b9d5      	cbnz	r5, 80067bc <__sfp+0x64>
 8006786:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <__sfp+0x88>)
 8006788:	60e3      	str	r3, [r4, #12]
 800678a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800678e:	6665      	str	r5, [r4, #100]	; 0x64
 8006790:	f000 f888 	bl	80068a4 <__retarget_lock_init_recursive>
 8006794:	f7ff ff96 	bl	80066c4 <__sfp_lock_release>
 8006798:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800679c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067a0:	6025      	str	r5, [r4, #0]
 80067a2:	61a5      	str	r5, [r4, #24]
 80067a4:	2208      	movs	r2, #8
 80067a6:	4629      	mov	r1, r5
 80067a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067ac:	f000 f88b 	bl	80068c6 <memset>
 80067b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067b8:	4620      	mov	r0, r4
 80067ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067bc:	3468      	adds	r4, #104	; 0x68
 80067be:	e7d9      	b.n	8006774 <__sfp+0x1c>
 80067c0:	2104      	movs	r1, #4
 80067c2:	4638      	mov	r0, r7
 80067c4:	f7ff ff62 	bl	800668c <__sfmoreglue>
 80067c8:	4604      	mov	r4, r0
 80067ca:	6030      	str	r0, [r6, #0]
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d1d5      	bne.n	800677c <__sfp+0x24>
 80067d0:	f7ff ff78 	bl	80066c4 <__sfp_lock_release>
 80067d4:	230c      	movs	r3, #12
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	e7ee      	b.n	80067b8 <__sfp+0x60>
 80067da:	bf00      	nop
 80067dc:	0800bdcc 	.word	0x0800bdcc
 80067e0:	ffff0001 	.word	0xffff0001

080067e4 <_fwalk>:
 80067e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e8:	460f      	mov	r7, r1
 80067ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067ee:	2600      	movs	r6, #0
 80067f0:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80067f4:	f1b8 0801 	subs.w	r8, r8, #1
 80067f8:	d505      	bpl.n	8006806 <_fwalk+0x22>
 80067fa:	6824      	ldr	r4, [r4, #0]
 80067fc:	2c00      	cmp	r4, #0
 80067fe:	d1f7      	bne.n	80067f0 <_fwalk+0xc>
 8006800:	4630      	mov	r0, r6
 8006802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d906      	bls.n	800681a <_fwalk+0x36>
 800680c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006810:	3301      	adds	r3, #1
 8006812:	d002      	beq.n	800681a <_fwalk+0x36>
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	4306      	orrs	r6, r0
 800681a:	3568      	adds	r5, #104	; 0x68
 800681c:	e7ea      	b.n	80067f4 <_fwalk+0x10>

0800681e <_fwalk_reent>:
 800681e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006822:	4606      	mov	r6, r0
 8006824:	4688      	mov	r8, r1
 8006826:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800682a:	2700      	movs	r7, #0
 800682c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006830:	f1b9 0901 	subs.w	r9, r9, #1
 8006834:	d505      	bpl.n	8006842 <_fwalk_reent+0x24>
 8006836:	6824      	ldr	r4, [r4, #0]
 8006838:	2c00      	cmp	r4, #0
 800683a:	d1f7      	bne.n	800682c <_fwalk_reent+0xe>
 800683c:	4638      	mov	r0, r7
 800683e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006842:	89ab      	ldrh	r3, [r5, #12]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d907      	bls.n	8006858 <_fwalk_reent+0x3a>
 8006848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800684c:	3301      	adds	r3, #1
 800684e:	d003      	beq.n	8006858 <_fwalk_reent+0x3a>
 8006850:	4629      	mov	r1, r5
 8006852:	4630      	mov	r0, r6
 8006854:	47c0      	blx	r8
 8006856:	4307      	orrs	r7, r0
 8006858:	3568      	adds	r5, #104	; 0x68
 800685a:	e7e9      	b.n	8006830 <_fwalk_reent+0x12>

0800685c <__libc_init_array>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4d0d      	ldr	r5, [pc, #52]	; (8006894 <__libc_init_array+0x38>)
 8006860:	4c0d      	ldr	r4, [pc, #52]	; (8006898 <__libc_init_array+0x3c>)
 8006862:	1b64      	subs	r4, r4, r5
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	2600      	movs	r6, #0
 8006868:	42a6      	cmp	r6, r4
 800686a:	d109      	bne.n	8006880 <__libc_init_array+0x24>
 800686c:	4d0b      	ldr	r5, [pc, #44]	; (800689c <__libc_init_array+0x40>)
 800686e:	4c0c      	ldr	r4, [pc, #48]	; (80068a0 <__libc_init_array+0x44>)
 8006870:	f005 f9da 	bl	800bc28 <_init>
 8006874:	1b64      	subs	r4, r4, r5
 8006876:	10a4      	asrs	r4, r4, #2
 8006878:	2600      	movs	r6, #0
 800687a:	42a6      	cmp	r6, r4
 800687c:	d105      	bne.n	800688a <__libc_init_array+0x2e>
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	f855 3b04 	ldr.w	r3, [r5], #4
 8006884:	4798      	blx	r3
 8006886:	3601      	adds	r6, #1
 8006888:	e7ee      	b.n	8006868 <__libc_init_array+0xc>
 800688a:	f855 3b04 	ldr.w	r3, [r5], #4
 800688e:	4798      	blx	r3
 8006890:	3601      	adds	r6, #1
 8006892:	e7f2      	b.n	800687a <__libc_init_array+0x1e>
 8006894:	0800c22c 	.word	0x0800c22c
 8006898:	0800c22c 	.word	0x0800c22c
 800689c:	0800c22c 	.word	0x0800c22c
 80068a0:	0800c230 	.word	0x0800c230

080068a4 <__retarget_lock_init_recursive>:
 80068a4:	4770      	bx	lr

080068a6 <__retarget_lock_acquire_recursive>:
 80068a6:	4770      	bx	lr

080068a8 <__retarget_lock_release_recursive>:
 80068a8:	4770      	bx	lr

080068aa <memcpy>:
 80068aa:	440a      	add	r2, r1
 80068ac:	4291      	cmp	r1, r2
 80068ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80068b2:	d100      	bne.n	80068b6 <memcpy+0xc>
 80068b4:	4770      	bx	lr
 80068b6:	b510      	push	{r4, lr}
 80068b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068c0:	4291      	cmp	r1, r2
 80068c2:	d1f9      	bne.n	80068b8 <memcpy+0xe>
 80068c4:	bd10      	pop	{r4, pc}

080068c6 <memset>:
 80068c6:	4402      	add	r2, r0
 80068c8:	4603      	mov	r3, r0
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d100      	bne.n	80068d0 <memset+0xa>
 80068ce:	4770      	bx	lr
 80068d0:	f803 1b01 	strb.w	r1, [r3], #1
 80068d4:	e7f9      	b.n	80068ca <memset+0x4>
	...

080068d8 <sbrk_aligned>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4e0e      	ldr	r6, [pc, #56]	; (8006914 <sbrk_aligned+0x3c>)
 80068dc:	460c      	mov	r4, r1
 80068de:	6831      	ldr	r1, [r6, #0]
 80068e0:	4605      	mov	r5, r0
 80068e2:	b911      	cbnz	r1, 80068ea <sbrk_aligned+0x12>
 80068e4:	f000 ffe6 	bl	80078b4 <_sbrk_r>
 80068e8:	6030      	str	r0, [r6, #0]
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 ffe1 	bl	80078b4 <_sbrk_r>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d00a      	beq.n	800690c <sbrk_aligned+0x34>
 80068f6:	1cc4      	adds	r4, r0, #3
 80068f8:	f024 0403 	bic.w	r4, r4, #3
 80068fc:	42a0      	cmp	r0, r4
 80068fe:	d007      	beq.n	8006910 <sbrk_aligned+0x38>
 8006900:	1a21      	subs	r1, r4, r0
 8006902:	4628      	mov	r0, r5
 8006904:	f000 ffd6 	bl	80078b4 <_sbrk_r>
 8006908:	3001      	adds	r0, #1
 800690a:	d101      	bne.n	8006910 <sbrk_aligned+0x38>
 800690c:	f04f 34ff 	mov.w	r4, #4294967295
 8006910:	4620      	mov	r0, r4
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	20004c78 	.word	0x20004c78

08006918 <_malloc_r>:
 8006918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691c:	1ccd      	adds	r5, r1, #3
 800691e:	f025 0503 	bic.w	r5, r5, #3
 8006922:	3508      	adds	r5, #8
 8006924:	2d0c      	cmp	r5, #12
 8006926:	bf38      	it	cc
 8006928:	250c      	movcc	r5, #12
 800692a:	2d00      	cmp	r5, #0
 800692c:	4607      	mov	r7, r0
 800692e:	db01      	blt.n	8006934 <_malloc_r+0x1c>
 8006930:	42a9      	cmp	r1, r5
 8006932:	d905      	bls.n	8006940 <_malloc_r+0x28>
 8006934:	230c      	movs	r3, #12
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	2600      	movs	r6, #0
 800693a:	4630      	mov	r0, r6
 800693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006940:	4e2e      	ldr	r6, [pc, #184]	; (80069fc <_malloc_r+0xe4>)
 8006942:	f003 fb2d 	bl	8009fa0 <__malloc_lock>
 8006946:	6833      	ldr	r3, [r6, #0]
 8006948:	461c      	mov	r4, r3
 800694a:	bb34      	cbnz	r4, 800699a <_malloc_r+0x82>
 800694c:	4629      	mov	r1, r5
 800694e:	4638      	mov	r0, r7
 8006950:	f7ff ffc2 	bl	80068d8 <sbrk_aligned>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	4604      	mov	r4, r0
 8006958:	d14d      	bne.n	80069f6 <_malloc_r+0xde>
 800695a:	6834      	ldr	r4, [r6, #0]
 800695c:	4626      	mov	r6, r4
 800695e:	2e00      	cmp	r6, #0
 8006960:	d140      	bne.n	80069e4 <_malloc_r+0xcc>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	4631      	mov	r1, r6
 8006966:	4638      	mov	r0, r7
 8006968:	eb04 0803 	add.w	r8, r4, r3
 800696c:	f000 ffa2 	bl	80078b4 <_sbrk_r>
 8006970:	4580      	cmp	r8, r0
 8006972:	d13a      	bne.n	80069ea <_malloc_r+0xd2>
 8006974:	6821      	ldr	r1, [r4, #0]
 8006976:	3503      	adds	r5, #3
 8006978:	1a6d      	subs	r5, r5, r1
 800697a:	f025 0503 	bic.w	r5, r5, #3
 800697e:	3508      	adds	r5, #8
 8006980:	2d0c      	cmp	r5, #12
 8006982:	bf38      	it	cc
 8006984:	250c      	movcc	r5, #12
 8006986:	4629      	mov	r1, r5
 8006988:	4638      	mov	r0, r7
 800698a:	f7ff ffa5 	bl	80068d8 <sbrk_aligned>
 800698e:	3001      	adds	r0, #1
 8006990:	d02b      	beq.n	80069ea <_malloc_r+0xd2>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	442b      	add	r3, r5
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	e00e      	b.n	80069b8 <_malloc_r+0xa0>
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	1b52      	subs	r2, r2, r5
 800699e:	d41e      	bmi.n	80069de <_malloc_r+0xc6>
 80069a0:	2a0b      	cmp	r2, #11
 80069a2:	d916      	bls.n	80069d2 <_malloc_r+0xba>
 80069a4:	1961      	adds	r1, r4, r5
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	6025      	str	r5, [r4, #0]
 80069aa:	bf18      	it	ne
 80069ac:	6059      	strne	r1, [r3, #4]
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	bf08      	it	eq
 80069b2:	6031      	streq	r1, [r6, #0]
 80069b4:	5162      	str	r2, [r4, r5]
 80069b6:	604b      	str	r3, [r1, #4]
 80069b8:	4638      	mov	r0, r7
 80069ba:	f104 060b 	add.w	r6, r4, #11
 80069be:	f003 faf5 	bl	8009fac <__malloc_unlock>
 80069c2:	f026 0607 	bic.w	r6, r6, #7
 80069c6:	1d23      	adds	r3, r4, #4
 80069c8:	1af2      	subs	r2, r6, r3
 80069ca:	d0b6      	beq.n	800693a <_malloc_r+0x22>
 80069cc:	1b9b      	subs	r3, r3, r6
 80069ce:	50a3      	str	r3, [r4, r2]
 80069d0:	e7b3      	b.n	800693a <_malloc_r+0x22>
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	bf0c      	ite	eq
 80069d8:	6032      	streq	r2, [r6, #0]
 80069da:	605a      	strne	r2, [r3, #4]
 80069dc:	e7ec      	b.n	80069b8 <_malloc_r+0xa0>
 80069de:	4623      	mov	r3, r4
 80069e0:	6864      	ldr	r4, [r4, #4]
 80069e2:	e7b2      	b.n	800694a <_malloc_r+0x32>
 80069e4:	4634      	mov	r4, r6
 80069e6:	6876      	ldr	r6, [r6, #4]
 80069e8:	e7b9      	b.n	800695e <_malloc_r+0x46>
 80069ea:	230c      	movs	r3, #12
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	4638      	mov	r0, r7
 80069f0:	f003 fadc 	bl	8009fac <__malloc_unlock>
 80069f4:	e7a1      	b.n	800693a <_malloc_r+0x22>
 80069f6:	6025      	str	r5, [r4, #0]
 80069f8:	e7de      	b.n	80069b8 <_malloc_r+0xa0>
 80069fa:	bf00      	nop
 80069fc:	20004c74 	.word	0x20004c74

08006a00 <__cvt>:
 8006a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	ec55 4b10 	vmov	r4, r5, d0
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	460e      	mov	r6, r1
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	462b      	mov	r3, r5
 8006a10:	bfbb      	ittet	lt
 8006a12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a16:	461d      	movlt	r5, r3
 8006a18:	2300      	movge	r3, #0
 8006a1a:	232d      	movlt	r3, #45	; 0x2d
 8006a1c:	700b      	strb	r3, [r1, #0]
 8006a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a24:	4691      	mov	r9, r2
 8006a26:	f023 0820 	bic.w	r8, r3, #32
 8006a2a:	bfbc      	itt	lt
 8006a2c:	4622      	movlt	r2, r4
 8006a2e:	4614      	movlt	r4, r2
 8006a30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a34:	d005      	beq.n	8006a42 <__cvt+0x42>
 8006a36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a3a:	d100      	bne.n	8006a3e <__cvt+0x3e>
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	2102      	movs	r1, #2
 8006a40:	e000      	b.n	8006a44 <__cvt+0x44>
 8006a42:	2103      	movs	r1, #3
 8006a44:	ab03      	add	r3, sp, #12
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	ab02      	add	r3, sp, #8
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	ec45 4b10 	vmov	d0, r4, r5
 8006a50:	4653      	mov	r3, sl
 8006a52:	4632      	mov	r2, r6
 8006a54:	f001 ffdc 	bl	8008a10 <_dtoa_r>
 8006a58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	d102      	bne.n	8006a66 <__cvt+0x66>
 8006a60:	f019 0f01 	tst.w	r9, #1
 8006a64:	d022      	beq.n	8006aac <__cvt+0xac>
 8006a66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a6a:	eb07 0906 	add.w	r9, r7, r6
 8006a6e:	d110      	bne.n	8006a92 <__cvt+0x92>
 8006a70:	783b      	ldrb	r3, [r7, #0]
 8006a72:	2b30      	cmp	r3, #48	; 0x30
 8006a74:	d10a      	bne.n	8006a8c <__cvt+0x8c>
 8006a76:	2200      	movs	r2, #0
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7fa f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a82:	b918      	cbnz	r0, 8006a8c <__cvt+0x8c>
 8006a84:	f1c6 0601 	rsb	r6, r6, #1
 8006a88:	f8ca 6000 	str.w	r6, [sl]
 8006a8c:	f8da 3000 	ldr.w	r3, [sl]
 8006a90:	4499      	add	r9, r3
 8006a92:	2200      	movs	r2, #0
 8006a94:	2300      	movs	r3, #0
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7fa f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a9e:	b108      	cbz	r0, 8006aa4 <__cvt+0xa4>
 8006aa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006aa4:	2230      	movs	r2, #48	; 0x30
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	454b      	cmp	r3, r9
 8006aaa:	d307      	bcc.n	8006abc <__cvt+0xbc>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ab0:	1bdb      	subs	r3, r3, r7
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	b004      	add	sp, #16
 8006ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abc:	1c59      	adds	r1, r3, #1
 8006abe:	9103      	str	r1, [sp, #12]
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e7f0      	b.n	8006aa6 <__cvt+0xa6>

08006ac4 <__exponent>:
 8006ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	bfb8      	it	lt
 8006acc:	4249      	neglt	r1, r1
 8006ace:	f803 2b02 	strb.w	r2, [r3], #2
 8006ad2:	bfb4      	ite	lt
 8006ad4:	222d      	movlt	r2, #45	; 0x2d
 8006ad6:	222b      	movge	r2, #43	; 0x2b
 8006ad8:	2909      	cmp	r1, #9
 8006ada:	7042      	strb	r2, [r0, #1]
 8006adc:	dd2a      	ble.n	8006b34 <__exponent+0x70>
 8006ade:	f10d 0407 	add.w	r4, sp, #7
 8006ae2:	46a4      	mov	ip, r4
 8006ae4:	270a      	movs	r7, #10
 8006ae6:	46a6      	mov	lr, r4
 8006ae8:	460a      	mov	r2, r1
 8006aea:	fb91 f6f7 	sdiv	r6, r1, r7
 8006aee:	fb07 1516 	mls	r5, r7, r6, r1
 8006af2:	3530      	adds	r5, #48	; 0x30
 8006af4:	2a63      	cmp	r2, #99	; 0x63
 8006af6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006afa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006afe:	4631      	mov	r1, r6
 8006b00:	dcf1      	bgt.n	8006ae6 <__exponent+0x22>
 8006b02:	3130      	adds	r1, #48	; 0x30
 8006b04:	f1ae 0502 	sub.w	r5, lr, #2
 8006b08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b0c:	1c44      	adds	r4, r0, #1
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4561      	cmp	r1, ip
 8006b12:	d30a      	bcc.n	8006b2a <__exponent+0x66>
 8006b14:	f10d 0209 	add.w	r2, sp, #9
 8006b18:	eba2 020e 	sub.w	r2, r2, lr
 8006b1c:	4565      	cmp	r5, ip
 8006b1e:	bf88      	it	hi
 8006b20:	2200      	movhi	r2, #0
 8006b22:	4413      	add	r3, r2
 8006b24:	1a18      	subs	r0, r3, r0
 8006b26:	b003      	add	sp, #12
 8006b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b32:	e7ed      	b.n	8006b10 <__exponent+0x4c>
 8006b34:	2330      	movs	r3, #48	; 0x30
 8006b36:	3130      	adds	r1, #48	; 0x30
 8006b38:	7083      	strb	r3, [r0, #2]
 8006b3a:	70c1      	strb	r1, [r0, #3]
 8006b3c:	1d03      	adds	r3, r0, #4
 8006b3e:	e7f1      	b.n	8006b24 <__exponent+0x60>

08006b40 <_printf_float>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	ed2d 8b02 	vpush	{d8}
 8006b48:	b08d      	sub	sp, #52	; 0x34
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b50:	4616      	mov	r6, r2
 8006b52:	461f      	mov	r7, r3
 8006b54:	4605      	mov	r5, r0
 8006b56:	f003 f98d 	bl	8009e74 <_localeconv_r>
 8006b5a:	f8d0 a000 	ldr.w	sl, [r0]
 8006b5e:	4650      	mov	r0, sl
 8006b60:	f7f9 fb36 	bl	80001d0 <strlen>
 8006b64:	2300      	movs	r3, #0
 8006b66:	930a      	str	r3, [sp, #40]	; 0x28
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b74:	3307      	adds	r3, #7
 8006b76:	f023 0307 	bic.w	r3, r3, #7
 8006b7a:	f103 0208 	add.w	r2, r3, #8
 8006b7e:	f8c8 2000 	str.w	r2, [r8]
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b92:	9307      	str	r3, [sp, #28]
 8006b94:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b98:	ee08 0a10 	vmov	s16, r0
 8006b9c:	4b9f      	ldr	r3, [pc, #636]	; (8006e1c <_printf_float+0x2dc>)
 8006b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba6:	f7f9 ffc1 	bl	8000b2c <__aeabi_dcmpun>
 8006baa:	bb88      	cbnz	r0, 8006c10 <_printf_float+0xd0>
 8006bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb0:	4b9a      	ldr	r3, [pc, #616]	; (8006e1c <_printf_float+0x2dc>)
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb6:	f7f9 ff9b 	bl	8000af0 <__aeabi_dcmple>
 8006bba:	bb48      	cbnz	r0, 8006c10 <_printf_float+0xd0>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	f7f9 ff8a 	bl	8000adc <__aeabi_dcmplt>
 8006bc8:	b110      	cbz	r0, 8006bd0 <_printf_float+0x90>
 8006bca:	232d      	movs	r3, #45	; 0x2d
 8006bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd0:	4b93      	ldr	r3, [pc, #588]	; (8006e20 <_printf_float+0x2e0>)
 8006bd2:	4894      	ldr	r0, [pc, #592]	; (8006e24 <_printf_float+0x2e4>)
 8006bd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bd8:	bf94      	ite	ls
 8006bda:	4698      	movls	r8, r3
 8006bdc:	4680      	movhi	r8, r0
 8006bde:	2303      	movs	r3, #3
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	f023 0204 	bic.w	r2, r3, #4
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	f04f 0900 	mov.w	r9, #0
 8006bee:	9700      	str	r7, [sp, #0]
 8006bf0:	4633      	mov	r3, r6
 8006bf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f9d8 	bl	8006fac <_printf_common>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f040 8090 	bne.w	8006d22 <_printf_float+0x1e2>
 8006c02:	f04f 30ff 	mov.w	r0, #4294967295
 8006c06:	b00d      	add	sp, #52	; 0x34
 8006c08:	ecbd 8b02 	vpop	{d8}
 8006c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	4640      	mov	r0, r8
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 ff88 	bl	8000b2c <__aeabi_dcmpun>
 8006c1c:	b140      	cbz	r0, 8006c30 <_printf_float+0xf0>
 8006c1e:	464b      	mov	r3, r9
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfbc      	itt	lt
 8006c24:	232d      	movlt	r3, #45	; 0x2d
 8006c26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c2a:	487f      	ldr	r0, [pc, #508]	; (8006e28 <_printf_float+0x2e8>)
 8006c2c:	4b7f      	ldr	r3, [pc, #508]	; (8006e2c <_printf_float+0x2ec>)
 8006c2e:	e7d1      	b.n	8006bd4 <_printf_float+0x94>
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c36:	9206      	str	r2, [sp, #24]
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	d13f      	bne.n	8006cbc <_printf_float+0x17c>
 8006c3c:	2306      	movs	r3, #6
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	9b05      	ldr	r3, [sp, #20]
 8006c42:	6861      	ldr	r1, [r4, #4]
 8006c44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	ab0a      	add	r3, sp, #40	; 0x28
 8006c4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c52:	ab09      	add	r3, sp, #36	; 0x24
 8006c54:	ec49 8b10 	vmov	d0, r8, r9
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	6022      	str	r2, [r4, #0]
 8006c5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7ff fecd 	bl	8006a00 <__cvt>
 8006c66:	9b06      	ldr	r3, [sp, #24]
 8006c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c6a:	2b47      	cmp	r3, #71	; 0x47
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	d108      	bne.n	8006c82 <_printf_float+0x142>
 8006c70:	1cc8      	adds	r0, r1, #3
 8006c72:	db02      	blt.n	8006c7a <_printf_float+0x13a>
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	4299      	cmp	r1, r3
 8006c78:	dd41      	ble.n	8006cfe <_printf_float+0x1be>
 8006c7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c7e:	fa5f fb8b 	uxtb.w	fp, fp
 8006c82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c86:	d820      	bhi.n	8006cca <_printf_float+0x18a>
 8006c88:	3901      	subs	r1, #1
 8006c8a:	465a      	mov	r2, fp
 8006c8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c90:	9109      	str	r1, [sp, #36]	; 0x24
 8006c92:	f7ff ff17 	bl	8006ac4 <__exponent>
 8006c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c98:	1813      	adds	r3, r2, r0
 8006c9a:	2a01      	cmp	r2, #1
 8006c9c:	4681      	mov	r9, r0
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	dc02      	bgt.n	8006ca8 <_printf_float+0x168>
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	07d2      	lsls	r2, r2, #31
 8006ca6:	d501      	bpl.n	8006cac <_printf_float+0x16c>
 8006ca8:	3301      	adds	r3, #1
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d09c      	beq.n	8006bee <_printf_float+0xae>
 8006cb4:	232d      	movs	r3, #45	; 0x2d
 8006cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cba:	e798      	b.n	8006bee <_printf_float+0xae>
 8006cbc:	9a06      	ldr	r2, [sp, #24]
 8006cbe:	2a47      	cmp	r2, #71	; 0x47
 8006cc0:	d1be      	bne.n	8006c40 <_printf_float+0x100>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1bc      	bne.n	8006c40 <_printf_float+0x100>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7b9      	b.n	8006c3e <_printf_float+0xfe>
 8006cca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cce:	d118      	bne.n	8006d02 <_printf_float+0x1c2>
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	6863      	ldr	r3, [r4, #4]
 8006cd4:	dd0b      	ble.n	8006cee <_printf_float+0x1ae>
 8006cd6:	6121      	str	r1, [r4, #16]
 8006cd8:	b913      	cbnz	r3, 8006ce0 <_printf_float+0x1a0>
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	07d0      	lsls	r0, r2, #31
 8006cde:	d502      	bpl.n	8006ce6 <_printf_float+0x1a6>
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	440b      	add	r3, r1
 8006ce4:	6123      	str	r3, [r4, #16]
 8006ce6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ce8:	f04f 0900 	mov.w	r9, #0
 8006cec:	e7de      	b.n	8006cac <_printf_float+0x16c>
 8006cee:	b913      	cbnz	r3, 8006cf6 <_printf_float+0x1b6>
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	07d2      	lsls	r2, r2, #31
 8006cf4:	d501      	bpl.n	8006cfa <_printf_float+0x1ba>
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	e7f4      	b.n	8006ce4 <_printf_float+0x1a4>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e7f2      	b.n	8006ce4 <_printf_float+0x1a4>
 8006cfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d04:	4299      	cmp	r1, r3
 8006d06:	db05      	blt.n	8006d14 <_printf_float+0x1d4>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	6121      	str	r1, [r4, #16]
 8006d0c:	07d8      	lsls	r0, r3, #31
 8006d0e:	d5ea      	bpl.n	8006ce6 <_printf_float+0x1a6>
 8006d10:	1c4b      	adds	r3, r1, #1
 8006d12:	e7e7      	b.n	8006ce4 <_printf_float+0x1a4>
 8006d14:	2900      	cmp	r1, #0
 8006d16:	bfd4      	ite	le
 8006d18:	f1c1 0202 	rsble	r2, r1, #2
 8006d1c:	2201      	movgt	r2, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	e7e0      	b.n	8006ce4 <_printf_float+0x1a4>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	055a      	lsls	r2, r3, #21
 8006d26:	d407      	bmi.n	8006d38 <_printf_float+0x1f8>
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	4642      	mov	r2, r8
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	d12c      	bne.n	8006d90 <_printf_float+0x250>
 8006d36:	e764      	b.n	8006c02 <_printf_float+0xc2>
 8006d38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d3c:	f240 80e0 	bls.w	8006f00 <_printf_float+0x3c0>
 8006d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d44:	2200      	movs	r2, #0
 8006d46:	2300      	movs	r3, #0
 8006d48:	f7f9 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d034      	beq.n	8006dba <_printf_float+0x27a>
 8006d50:	4a37      	ldr	r2, [pc, #220]	; (8006e30 <_printf_float+0x2f0>)
 8006d52:	2301      	movs	r3, #1
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f43f af51 	beq.w	8006c02 <_printf_float+0xc2>
 8006d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d64:	429a      	cmp	r2, r3
 8006d66:	db02      	blt.n	8006d6e <_printf_float+0x22e>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	07d8      	lsls	r0, r3, #31
 8006d6c:	d510      	bpl.n	8006d90 <_printf_float+0x250>
 8006d6e:	ee18 3a10 	vmov	r3, s16
 8006d72:	4652      	mov	r2, sl
 8006d74:	4631      	mov	r1, r6
 8006d76:	4628      	mov	r0, r5
 8006d78:	47b8      	blx	r7
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	f43f af41 	beq.w	8006c02 <_printf_float+0xc2>
 8006d80:	f04f 0800 	mov.w	r8, #0
 8006d84:	f104 091a 	add.w	r9, r4, #26
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	4543      	cmp	r3, r8
 8006d8e:	dc09      	bgt.n	8006da4 <_printf_float+0x264>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	079b      	lsls	r3, r3, #30
 8006d94:	f100 8105 	bmi.w	8006fa2 <_printf_float+0x462>
 8006d98:	68e0      	ldr	r0, [r4, #12]
 8006d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d9c:	4298      	cmp	r0, r3
 8006d9e:	bfb8      	it	lt
 8006da0:	4618      	movlt	r0, r3
 8006da2:	e730      	b.n	8006c06 <_printf_float+0xc6>
 8006da4:	2301      	movs	r3, #1
 8006da6:	464a      	mov	r2, r9
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af27 	beq.w	8006c02 <_printf_float+0xc2>
 8006db4:	f108 0801 	add.w	r8, r8, #1
 8006db8:	e7e6      	b.n	8006d88 <_printf_float+0x248>
 8006dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dc39      	bgt.n	8006e34 <_printf_float+0x2f4>
 8006dc0:	4a1b      	ldr	r2, [pc, #108]	; (8006e30 <_printf_float+0x2f0>)
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	f43f af19 	beq.w	8006c02 <_printf_float+0xc2>
 8006dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	d102      	bne.n	8006dde <_printf_float+0x29e>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	07d9      	lsls	r1, r3, #31
 8006ddc:	d5d8      	bpl.n	8006d90 <_printf_float+0x250>
 8006dde:	ee18 3a10 	vmov	r3, s16
 8006de2:	4652      	mov	r2, sl
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f af09 	beq.w	8006c02 <_printf_float+0xc2>
 8006df0:	f04f 0900 	mov.w	r9, #0
 8006df4:	f104 0a1a 	add.w	sl, r4, #26
 8006df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfa:	425b      	negs	r3, r3
 8006dfc:	454b      	cmp	r3, r9
 8006dfe:	dc01      	bgt.n	8006e04 <_printf_float+0x2c4>
 8006e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e02:	e792      	b.n	8006d2a <_printf_float+0x1ea>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4652      	mov	r2, sl
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f aef7 	beq.w	8006c02 <_printf_float+0xc2>
 8006e14:	f109 0901 	add.w	r9, r9, #1
 8006e18:	e7ee      	b.n	8006df8 <_printf_float+0x2b8>
 8006e1a:	bf00      	nop
 8006e1c:	7fefffff 	.word	0x7fefffff
 8006e20:	0800bdd0 	.word	0x0800bdd0
 8006e24:	0800bdd4 	.word	0x0800bdd4
 8006e28:	0800bddc 	.word	0x0800bddc
 8006e2c:	0800bdd8 	.word	0x0800bdd8
 8006e30:	0800c1d1 	.word	0x0800c1d1
 8006e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	bfa8      	it	ge
 8006e3c:	461a      	movge	r2, r3
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	4691      	mov	r9, r2
 8006e42:	dc37      	bgt.n	8006eb4 <_printf_float+0x374>
 8006e44:	f04f 0b00 	mov.w	fp, #0
 8006e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e4c:	f104 021a 	add.w	r2, r4, #26
 8006e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	eba3 0309 	sub.w	r3, r3, r9
 8006e58:	455b      	cmp	r3, fp
 8006e5a:	dc33      	bgt.n	8006ec4 <_printf_float+0x384>
 8006e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e60:	429a      	cmp	r2, r3
 8006e62:	db3b      	blt.n	8006edc <_printf_float+0x39c>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07da      	lsls	r2, r3, #31
 8006e68:	d438      	bmi.n	8006edc <_printf_float+0x39c>
 8006e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6c:	9a05      	ldr	r2, [sp, #20]
 8006e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e70:	1a9a      	subs	r2, r3, r2
 8006e72:	eba3 0901 	sub.w	r9, r3, r1
 8006e76:	4591      	cmp	r9, r2
 8006e78:	bfa8      	it	ge
 8006e7a:	4691      	movge	r9, r2
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	dc35      	bgt.n	8006eee <_printf_float+0x3ae>
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8a:	f104 0a1a 	add.w	sl, r4, #26
 8006e8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	eba3 0309 	sub.w	r3, r3, r9
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	f77f af79 	ble.w	8006d90 <_printf_float+0x250>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f aeaa 	beq.w	8006c02 <_printf_float+0xc2>
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	e7ec      	b.n	8006e8e <_printf_float+0x34e>
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b8      	blx	r7
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d1c0      	bne.n	8006e44 <_printf_float+0x304>
 8006ec2:	e69e      	b.n	8006c02 <_printf_float+0xc2>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	9205      	str	r2, [sp, #20]
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f43f ae97 	beq.w	8006c02 <_printf_float+0xc2>
 8006ed4:	9a05      	ldr	r2, [sp, #20]
 8006ed6:	f10b 0b01 	add.w	fp, fp, #1
 8006eda:	e7b9      	b.n	8006e50 <_printf_float+0x310>
 8006edc:	ee18 3a10 	vmov	r3, s16
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d1be      	bne.n	8006e6a <_printf_float+0x32a>
 8006eec:	e689      	b.n	8006c02 <_printf_float+0xc2>
 8006eee:	9a05      	ldr	r2, [sp, #20]
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	4442      	add	r2, r8
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	d1c1      	bne.n	8006e82 <_printf_float+0x342>
 8006efe:	e680      	b.n	8006c02 <_printf_float+0xc2>
 8006f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f02:	2a01      	cmp	r2, #1
 8006f04:	dc01      	bgt.n	8006f0a <_printf_float+0x3ca>
 8006f06:	07db      	lsls	r3, r3, #31
 8006f08:	d538      	bpl.n	8006f7c <_printf_float+0x43c>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f ae74 	beq.w	8006c02 <_printf_float+0xc2>
 8006f1a:	ee18 3a10 	vmov	r3, s16
 8006f1e:	4652      	mov	r2, sl
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	f43f ae6b 	beq.w	8006c02 <_printf_float+0xc2>
 8006f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	f7f9 fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f38:	b9d8      	cbnz	r0, 8006f72 <_printf_float+0x432>
 8006f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f3c:	f108 0201 	add.w	r2, r8, #1
 8006f40:	3b01      	subs	r3, #1
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d10e      	bne.n	8006f6a <_printf_float+0x42a>
 8006f4c:	e659      	b.n	8006c02 <_printf_float+0xc2>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4652      	mov	r2, sl
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f ae52 	beq.w	8006c02 <_printf_float+0xc2>
 8006f5e:	f108 0801 	add.w	r8, r8, #1
 8006f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4543      	cmp	r3, r8
 8006f68:	dcf1      	bgt.n	8006f4e <_printf_float+0x40e>
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f70:	e6dc      	b.n	8006d2c <_printf_float+0x1ec>
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	f104 0a1a 	add.w	sl, r4, #26
 8006f7a:	e7f2      	b.n	8006f62 <_printf_float+0x422>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4642      	mov	r2, r8
 8006f80:	e7df      	b.n	8006f42 <_printf_float+0x402>
 8006f82:	2301      	movs	r3, #1
 8006f84:	464a      	mov	r2, r9
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae38 	beq.w	8006c02 <_printf_float+0xc2>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f9a:	1a5b      	subs	r3, r3, r1
 8006f9c:	4543      	cmp	r3, r8
 8006f9e:	dcf0      	bgt.n	8006f82 <_printf_float+0x442>
 8006fa0:	e6fa      	b.n	8006d98 <_printf_float+0x258>
 8006fa2:	f04f 0800 	mov.w	r8, #0
 8006fa6:	f104 0919 	add.w	r9, r4, #25
 8006faa:	e7f4      	b.n	8006f96 <_printf_float+0x456>

08006fac <_printf_common>:
 8006fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	4699      	mov	r9, r3
 8006fb4:	688a      	ldr	r2, [r1, #8]
 8006fb6:	690b      	ldr	r3, [r1, #16]
 8006fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	bfb8      	it	lt
 8006fc0:	4613      	movlt	r3, r2
 8006fc2:	6033      	str	r3, [r6, #0]
 8006fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fc8:	4607      	mov	r7, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b10a      	cbz	r2, 8006fd2 <_printf_common+0x26>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	6033      	str	r3, [r6, #0]
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	0699      	lsls	r1, r3, #26
 8006fd6:	bf42      	ittt	mi
 8006fd8:	6833      	ldrmi	r3, [r6, #0]
 8006fda:	3302      	addmi	r3, #2
 8006fdc:	6033      	strmi	r3, [r6, #0]
 8006fde:	6825      	ldr	r5, [r4, #0]
 8006fe0:	f015 0506 	ands.w	r5, r5, #6
 8006fe4:	d106      	bne.n	8006ff4 <_printf_common+0x48>
 8006fe6:	f104 0a19 	add.w	sl, r4, #25
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	6832      	ldr	r2, [r6, #0]
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	42ab      	cmp	r3, r5
 8006ff2:	dc26      	bgt.n	8007042 <_printf_common+0x96>
 8006ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ff8:	1e13      	subs	r3, r2, #0
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	bf18      	it	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	0692      	lsls	r2, r2, #26
 8007002:	d42b      	bmi.n	800705c <_printf_common+0xb0>
 8007004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007008:	4649      	mov	r1, r9
 800700a:	4638      	mov	r0, r7
 800700c:	47c0      	blx	r8
 800700e:	3001      	adds	r0, #1
 8007010:	d01e      	beq.n	8007050 <_printf_common+0xa4>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	68e5      	ldr	r5, [r4, #12]
 8007016:	6832      	ldr	r2, [r6, #0]
 8007018:	f003 0306 	and.w	r3, r3, #6
 800701c:	2b04      	cmp	r3, #4
 800701e:	bf08      	it	eq
 8007020:	1aad      	subeq	r5, r5, r2
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	6922      	ldr	r2, [r4, #16]
 8007026:	bf0c      	ite	eq
 8007028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800702c:	2500      	movne	r5, #0
 800702e:	4293      	cmp	r3, r2
 8007030:	bfc4      	itt	gt
 8007032:	1a9b      	subgt	r3, r3, r2
 8007034:	18ed      	addgt	r5, r5, r3
 8007036:	2600      	movs	r6, #0
 8007038:	341a      	adds	r4, #26
 800703a:	42b5      	cmp	r5, r6
 800703c:	d11a      	bne.n	8007074 <_printf_common+0xc8>
 800703e:	2000      	movs	r0, #0
 8007040:	e008      	b.n	8007054 <_printf_common+0xa8>
 8007042:	2301      	movs	r3, #1
 8007044:	4652      	mov	r2, sl
 8007046:	4649      	mov	r1, r9
 8007048:	4638      	mov	r0, r7
 800704a:	47c0      	blx	r8
 800704c:	3001      	adds	r0, #1
 800704e:	d103      	bne.n	8007058 <_printf_common+0xac>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007058:	3501      	adds	r5, #1
 800705a:	e7c6      	b.n	8006fea <_printf_common+0x3e>
 800705c:	18e1      	adds	r1, r4, r3
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	2030      	movs	r0, #48	; 0x30
 8007062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007066:	4422      	add	r2, r4
 8007068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800706c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007070:	3302      	adds	r3, #2
 8007072:	e7c7      	b.n	8007004 <_printf_common+0x58>
 8007074:	2301      	movs	r3, #1
 8007076:	4622      	mov	r2, r4
 8007078:	4649      	mov	r1, r9
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	3001      	adds	r0, #1
 8007080:	d0e6      	beq.n	8007050 <_printf_common+0xa4>
 8007082:	3601      	adds	r6, #1
 8007084:	e7d9      	b.n	800703a <_printf_common+0x8e>
	...

08007088 <_printf_i>:
 8007088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	7e0f      	ldrb	r7, [r1, #24]
 800708e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007090:	2f78      	cmp	r7, #120	; 0x78
 8007092:	4691      	mov	r9, r2
 8007094:	4680      	mov	r8, r0
 8007096:	460c      	mov	r4, r1
 8007098:	469a      	mov	sl, r3
 800709a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800709e:	d807      	bhi.n	80070b0 <_printf_i+0x28>
 80070a0:	2f62      	cmp	r7, #98	; 0x62
 80070a2:	d80a      	bhi.n	80070ba <_printf_i+0x32>
 80070a4:	2f00      	cmp	r7, #0
 80070a6:	f000 80d8 	beq.w	800725a <_printf_i+0x1d2>
 80070aa:	2f58      	cmp	r7, #88	; 0x58
 80070ac:	f000 80a3 	beq.w	80071f6 <_printf_i+0x16e>
 80070b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070b8:	e03a      	b.n	8007130 <_printf_i+0xa8>
 80070ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070be:	2b15      	cmp	r3, #21
 80070c0:	d8f6      	bhi.n	80070b0 <_printf_i+0x28>
 80070c2:	a101      	add	r1, pc, #4	; (adr r1, 80070c8 <_printf_i+0x40>)
 80070c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007135 	.word	0x08007135
 80070d0:	080070b1 	.word	0x080070b1
 80070d4:	080070b1 	.word	0x080070b1
 80070d8:	080070b1 	.word	0x080070b1
 80070dc:	080070b1 	.word	0x080070b1
 80070e0:	08007135 	.word	0x08007135
 80070e4:	080070b1 	.word	0x080070b1
 80070e8:	080070b1 	.word	0x080070b1
 80070ec:	080070b1 	.word	0x080070b1
 80070f0:	080070b1 	.word	0x080070b1
 80070f4:	08007241 	.word	0x08007241
 80070f8:	08007165 	.word	0x08007165
 80070fc:	08007223 	.word	0x08007223
 8007100:	080070b1 	.word	0x080070b1
 8007104:	080070b1 	.word	0x080070b1
 8007108:	08007263 	.word	0x08007263
 800710c:	080070b1 	.word	0x080070b1
 8007110:	08007165 	.word	0x08007165
 8007114:	080070b1 	.word	0x080070b1
 8007118:	080070b1 	.word	0x080070b1
 800711c:	0800722b 	.word	0x0800722b
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	1d1a      	adds	r2, r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	602a      	str	r2, [r5, #0]
 8007128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800712c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007130:	2301      	movs	r3, #1
 8007132:	e0a3      	b.n	800727c <_printf_i+0x1f4>
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	6829      	ldr	r1, [r5, #0]
 8007138:	0606      	lsls	r6, r0, #24
 800713a:	f101 0304 	add.w	r3, r1, #4
 800713e:	d50a      	bpl.n	8007156 <_printf_i+0xce>
 8007140:	680e      	ldr	r6, [r1, #0]
 8007142:	602b      	str	r3, [r5, #0]
 8007144:	2e00      	cmp	r6, #0
 8007146:	da03      	bge.n	8007150 <_printf_i+0xc8>
 8007148:	232d      	movs	r3, #45	; 0x2d
 800714a:	4276      	negs	r6, r6
 800714c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007150:	485e      	ldr	r0, [pc, #376]	; (80072cc <_printf_i+0x244>)
 8007152:	230a      	movs	r3, #10
 8007154:	e019      	b.n	800718a <_printf_i+0x102>
 8007156:	680e      	ldr	r6, [r1, #0]
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800715e:	bf18      	it	ne
 8007160:	b236      	sxthne	r6, r6
 8007162:	e7ef      	b.n	8007144 <_printf_i+0xbc>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	6820      	ldr	r0, [r4, #0]
 8007168:	1d19      	adds	r1, r3, #4
 800716a:	6029      	str	r1, [r5, #0]
 800716c:	0601      	lsls	r1, r0, #24
 800716e:	d501      	bpl.n	8007174 <_printf_i+0xec>
 8007170:	681e      	ldr	r6, [r3, #0]
 8007172:	e002      	b.n	800717a <_printf_i+0xf2>
 8007174:	0646      	lsls	r6, r0, #25
 8007176:	d5fb      	bpl.n	8007170 <_printf_i+0xe8>
 8007178:	881e      	ldrh	r6, [r3, #0]
 800717a:	4854      	ldr	r0, [pc, #336]	; (80072cc <_printf_i+0x244>)
 800717c:	2f6f      	cmp	r7, #111	; 0x6f
 800717e:	bf0c      	ite	eq
 8007180:	2308      	moveq	r3, #8
 8007182:	230a      	movne	r3, #10
 8007184:	2100      	movs	r1, #0
 8007186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800718a:	6865      	ldr	r5, [r4, #4]
 800718c:	60a5      	str	r5, [r4, #8]
 800718e:	2d00      	cmp	r5, #0
 8007190:	bfa2      	ittt	ge
 8007192:	6821      	ldrge	r1, [r4, #0]
 8007194:	f021 0104 	bicge.w	r1, r1, #4
 8007198:	6021      	strge	r1, [r4, #0]
 800719a:	b90e      	cbnz	r6, 80071a0 <_printf_i+0x118>
 800719c:	2d00      	cmp	r5, #0
 800719e:	d04d      	beq.n	800723c <_printf_i+0x1b4>
 80071a0:	4615      	mov	r5, r2
 80071a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80071a6:	fb03 6711 	mls	r7, r3, r1, r6
 80071aa:	5dc7      	ldrb	r7, [r0, r7]
 80071ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071b0:	4637      	mov	r7, r6
 80071b2:	42bb      	cmp	r3, r7
 80071b4:	460e      	mov	r6, r1
 80071b6:	d9f4      	bls.n	80071a2 <_printf_i+0x11a>
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d10b      	bne.n	80071d4 <_printf_i+0x14c>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	07de      	lsls	r6, r3, #31
 80071c0:	d508      	bpl.n	80071d4 <_printf_i+0x14c>
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	6861      	ldr	r1, [r4, #4]
 80071c6:	4299      	cmp	r1, r3
 80071c8:	bfde      	ittt	le
 80071ca:	2330      	movle	r3, #48	; 0x30
 80071cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071d4:	1b52      	subs	r2, r2, r5
 80071d6:	6122      	str	r2, [r4, #16]
 80071d8:	f8cd a000 	str.w	sl, [sp]
 80071dc:	464b      	mov	r3, r9
 80071de:	aa03      	add	r2, sp, #12
 80071e0:	4621      	mov	r1, r4
 80071e2:	4640      	mov	r0, r8
 80071e4:	f7ff fee2 	bl	8006fac <_printf_common>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d14c      	bne.n	8007286 <_printf_i+0x1fe>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	b004      	add	sp, #16
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	4835      	ldr	r0, [pc, #212]	; (80072cc <_printf_i+0x244>)
 80071f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071fc:	6829      	ldr	r1, [r5, #0]
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	f851 6b04 	ldr.w	r6, [r1], #4
 8007204:	6029      	str	r1, [r5, #0]
 8007206:	061d      	lsls	r5, r3, #24
 8007208:	d514      	bpl.n	8007234 <_printf_i+0x1ac>
 800720a:	07df      	lsls	r7, r3, #31
 800720c:	bf44      	itt	mi
 800720e:	f043 0320 	orrmi.w	r3, r3, #32
 8007212:	6023      	strmi	r3, [r4, #0]
 8007214:	b91e      	cbnz	r6, 800721e <_printf_i+0x196>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f023 0320 	bic.w	r3, r3, #32
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	2310      	movs	r3, #16
 8007220:	e7b0      	b.n	8007184 <_printf_i+0xfc>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f043 0320 	orr.w	r3, r3, #32
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	2378      	movs	r3, #120	; 0x78
 800722c:	4828      	ldr	r0, [pc, #160]	; (80072d0 <_printf_i+0x248>)
 800722e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007232:	e7e3      	b.n	80071fc <_printf_i+0x174>
 8007234:	0659      	lsls	r1, r3, #25
 8007236:	bf48      	it	mi
 8007238:	b2b6      	uxthmi	r6, r6
 800723a:	e7e6      	b.n	800720a <_printf_i+0x182>
 800723c:	4615      	mov	r5, r2
 800723e:	e7bb      	b.n	80071b8 <_printf_i+0x130>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	6826      	ldr	r6, [r4, #0]
 8007244:	6961      	ldr	r1, [r4, #20]
 8007246:	1d18      	adds	r0, r3, #4
 8007248:	6028      	str	r0, [r5, #0]
 800724a:	0635      	lsls	r5, r6, #24
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	d501      	bpl.n	8007254 <_printf_i+0x1cc>
 8007250:	6019      	str	r1, [r3, #0]
 8007252:	e002      	b.n	800725a <_printf_i+0x1d2>
 8007254:	0670      	lsls	r0, r6, #25
 8007256:	d5fb      	bpl.n	8007250 <_printf_i+0x1c8>
 8007258:	8019      	strh	r1, [r3, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	4615      	mov	r5, r2
 8007260:	e7ba      	b.n	80071d8 <_printf_i+0x150>
 8007262:	682b      	ldr	r3, [r5, #0]
 8007264:	1d1a      	adds	r2, r3, #4
 8007266:	602a      	str	r2, [r5, #0]
 8007268:	681d      	ldr	r5, [r3, #0]
 800726a:	6862      	ldr	r2, [r4, #4]
 800726c:	2100      	movs	r1, #0
 800726e:	4628      	mov	r0, r5
 8007270:	f7f8 ffb6 	bl	80001e0 <memchr>
 8007274:	b108      	cbz	r0, 800727a <_printf_i+0x1f2>
 8007276:	1b40      	subs	r0, r0, r5
 8007278:	6060      	str	r0, [r4, #4]
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	2300      	movs	r3, #0
 8007280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007284:	e7a8      	b.n	80071d8 <_printf_i+0x150>
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	462a      	mov	r2, r5
 800728a:	4649      	mov	r1, r9
 800728c:	4640      	mov	r0, r8
 800728e:	47d0      	blx	sl
 8007290:	3001      	adds	r0, #1
 8007292:	d0ab      	beq.n	80071ec <_printf_i+0x164>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	079b      	lsls	r3, r3, #30
 8007298:	d413      	bmi.n	80072c2 <_printf_i+0x23a>
 800729a:	68e0      	ldr	r0, [r4, #12]
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	4298      	cmp	r0, r3
 80072a0:	bfb8      	it	lt
 80072a2:	4618      	movlt	r0, r3
 80072a4:	e7a4      	b.n	80071f0 <_printf_i+0x168>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4632      	mov	r2, r6
 80072aa:	4649      	mov	r1, r9
 80072ac:	4640      	mov	r0, r8
 80072ae:	47d0      	blx	sl
 80072b0:	3001      	adds	r0, #1
 80072b2:	d09b      	beq.n	80071ec <_printf_i+0x164>
 80072b4:	3501      	adds	r5, #1
 80072b6:	68e3      	ldr	r3, [r4, #12]
 80072b8:	9903      	ldr	r1, [sp, #12]
 80072ba:	1a5b      	subs	r3, r3, r1
 80072bc:	42ab      	cmp	r3, r5
 80072be:	dcf2      	bgt.n	80072a6 <_printf_i+0x21e>
 80072c0:	e7eb      	b.n	800729a <_printf_i+0x212>
 80072c2:	2500      	movs	r5, #0
 80072c4:	f104 0619 	add.w	r6, r4, #25
 80072c8:	e7f5      	b.n	80072b6 <_printf_i+0x22e>
 80072ca:	bf00      	nop
 80072cc:	0800bde0 	.word	0x0800bde0
 80072d0:	0800bdf1 	.word	0x0800bdf1

080072d4 <_scanf_float>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	b087      	sub	sp, #28
 80072da:	4617      	mov	r7, r2
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	688b      	ldr	r3, [r1, #8]
 80072e0:	1e5a      	subs	r2, r3, #1
 80072e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80072e6:	bf83      	ittte	hi
 80072e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80072ec:	195b      	addhi	r3, r3, r5
 80072ee:	9302      	strhi	r3, [sp, #8]
 80072f0:	2300      	movls	r3, #0
 80072f2:	bf86      	itte	hi
 80072f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80072f8:	608b      	strhi	r3, [r1, #8]
 80072fa:	9302      	strls	r3, [sp, #8]
 80072fc:	680b      	ldr	r3, [r1, #0]
 80072fe:	468b      	mov	fp, r1
 8007300:	2500      	movs	r5, #0
 8007302:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007306:	f84b 3b1c 	str.w	r3, [fp], #28
 800730a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800730e:	4680      	mov	r8, r0
 8007310:	460c      	mov	r4, r1
 8007312:	465e      	mov	r6, fp
 8007314:	46aa      	mov	sl, r5
 8007316:	46a9      	mov	r9, r5
 8007318:	9501      	str	r5, [sp, #4]
 800731a:	68a2      	ldr	r2, [r4, #8]
 800731c:	b152      	cbz	r2, 8007334 <_scanf_float+0x60>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b4e      	cmp	r3, #78	; 0x4e
 8007324:	d864      	bhi.n	80073f0 <_scanf_float+0x11c>
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d83c      	bhi.n	80073a4 <_scanf_float+0xd0>
 800732a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800732e:	b2c8      	uxtb	r0, r1
 8007330:	280e      	cmp	r0, #14
 8007332:	d93a      	bls.n	80073aa <_scanf_float+0xd6>
 8007334:	f1b9 0f00 	cmp.w	r9, #0
 8007338:	d003      	beq.n	8007342 <_scanf_float+0x6e>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007346:	f1ba 0f01 	cmp.w	sl, #1
 800734a:	f200 8113 	bhi.w	8007574 <_scanf_float+0x2a0>
 800734e:	455e      	cmp	r6, fp
 8007350:	f200 8105 	bhi.w	800755e <_scanf_float+0x28a>
 8007354:	2501      	movs	r5, #1
 8007356:	4628      	mov	r0, r5
 8007358:	b007      	add	sp, #28
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007362:	2a0d      	cmp	r2, #13
 8007364:	d8e6      	bhi.n	8007334 <_scanf_float+0x60>
 8007366:	a101      	add	r1, pc, #4	; (adr r1, 800736c <_scanf_float+0x98>)
 8007368:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800736c:	080074ab 	.word	0x080074ab
 8007370:	08007335 	.word	0x08007335
 8007374:	08007335 	.word	0x08007335
 8007378:	08007335 	.word	0x08007335
 800737c:	0800750b 	.word	0x0800750b
 8007380:	080074e3 	.word	0x080074e3
 8007384:	08007335 	.word	0x08007335
 8007388:	08007335 	.word	0x08007335
 800738c:	080074b9 	.word	0x080074b9
 8007390:	08007335 	.word	0x08007335
 8007394:	08007335 	.word	0x08007335
 8007398:	08007335 	.word	0x08007335
 800739c:	08007335 	.word	0x08007335
 80073a0:	08007471 	.word	0x08007471
 80073a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80073a8:	e7db      	b.n	8007362 <_scanf_float+0x8e>
 80073aa:	290e      	cmp	r1, #14
 80073ac:	d8c2      	bhi.n	8007334 <_scanf_float+0x60>
 80073ae:	a001      	add	r0, pc, #4	; (adr r0, 80073b4 <_scanf_float+0xe0>)
 80073b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073b4:	08007463 	.word	0x08007463
 80073b8:	08007335 	.word	0x08007335
 80073bc:	08007463 	.word	0x08007463
 80073c0:	080074f7 	.word	0x080074f7
 80073c4:	08007335 	.word	0x08007335
 80073c8:	08007411 	.word	0x08007411
 80073cc:	0800744d 	.word	0x0800744d
 80073d0:	0800744d 	.word	0x0800744d
 80073d4:	0800744d 	.word	0x0800744d
 80073d8:	0800744d 	.word	0x0800744d
 80073dc:	0800744d 	.word	0x0800744d
 80073e0:	0800744d 	.word	0x0800744d
 80073e4:	0800744d 	.word	0x0800744d
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	0800744d 	.word	0x0800744d
 80073f0:	2b6e      	cmp	r3, #110	; 0x6e
 80073f2:	d809      	bhi.n	8007408 <_scanf_float+0x134>
 80073f4:	2b60      	cmp	r3, #96	; 0x60
 80073f6:	d8b2      	bhi.n	800735e <_scanf_float+0x8a>
 80073f8:	2b54      	cmp	r3, #84	; 0x54
 80073fa:	d077      	beq.n	80074ec <_scanf_float+0x218>
 80073fc:	2b59      	cmp	r3, #89	; 0x59
 80073fe:	d199      	bne.n	8007334 <_scanf_float+0x60>
 8007400:	2d07      	cmp	r5, #7
 8007402:	d197      	bne.n	8007334 <_scanf_float+0x60>
 8007404:	2508      	movs	r5, #8
 8007406:	e029      	b.n	800745c <_scanf_float+0x188>
 8007408:	2b74      	cmp	r3, #116	; 0x74
 800740a:	d06f      	beq.n	80074ec <_scanf_float+0x218>
 800740c:	2b79      	cmp	r3, #121	; 0x79
 800740e:	e7f6      	b.n	80073fe <_scanf_float+0x12a>
 8007410:	6821      	ldr	r1, [r4, #0]
 8007412:	05c8      	lsls	r0, r1, #23
 8007414:	d51a      	bpl.n	800744c <_scanf_float+0x178>
 8007416:	9b02      	ldr	r3, [sp, #8]
 8007418:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800741c:	6021      	str	r1, [r4, #0]
 800741e:	f109 0901 	add.w	r9, r9, #1
 8007422:	b11b      	cbz	r3, 800742c <_scanf_float+0x158>
 8007424:	3b01      	subs	r3, #1
 8007426:	3201      	adds	r2, #1
 8007428:	9302      	str	r3, [sp, #8]
 800742a:	60a2      	str	r2, [r4, #8]
 800742c:	68a3      	ldr	r3, [r4, #8]
 800742e:	3b01      	subs	r3, #1
 8007430:	60a3      	str	r3, [r4, #8]
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	3301      	adds	r3, #1
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3b01      	subs	r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	f340 8084 	ble.w	800754c <_scanf_float+0x278>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	3301      	adds	r3, #1
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	e766      	b.n	800731a <_scanf_float+0x46>
 800744c:	eb1a 0f05 	cmn.w	sl, r5
 8007450:	f47f af70 	bne.w	8007334 <_scanf_float+0x60>
 8007454:	6822      	ldr	r2, [r4, #0]
 8007456:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800745a:	6022      	str	r2, [r4, #0]
 800745c:	f806 3b01 	strb.w	r3, [r6], #1
 8007460:	e7e4      	b.n	800742c <_scanf_float+0x158>
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	0610      	lsls	r0, r2, #24
 8007466:	f57f af65 	bpl.w	8007334 <_scanf_float+0x60>
 800746a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800746e:	e7f4      	b.n	800745a <_scanf_float+0x186>
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	d10e      	bne.n	8007494 <_scanf_float+0x1c0>
 8007476:	f1b9 0f00 	cmp.w	r9, #0
 800747a:	d10e      	bne.n	800749a <_scanf_float+0x1c6>
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007482:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007486:	d108      	bne.n	800749a <_scanf_float+0x1c6>
 8007488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	f04f 0a01 	mov.w	sl, #1
 8007492:	e7e3      	b.n	800745c <_scanf_float+0x188>
 8007494:	f1ba 0f02 	cmp.w	sl, #2
 8007498:	d055      	beq.n	8007546 <_scanf_float+0x272>
 800749a:	2d01      	cmp	r5, #1
 800749c:	d002      	beq.n	80074a4 <_scanf_float+0x1d0>
 800749e:	2d04      	cmp	r5, #4
 80074a0:	f47f af48 	bne.w	8007334 <_scanf_float+0x60>
 80074a4:	3501      	adds	r5, #1
 80074a6:	b2ed      	uxtb	r5, r5
 80074a8:	e7d8      	b.n	800745c <_scanf_float+0x188>
 80074aa:	f1ba 0f01 	cmp.w	sl, #1
 80074ae:	f47f af41 	bne.w	8007334 <_scanf_float+0x60>
 80074b2:	f04f 0a02 	mov.w	sl, #2
 80074b6:	e7d1      	b.n	800745c <_scanf_float+0x188>
 80074b8:	b97d      	cbnz	r5, 80074da <_scanf_float+0x206>
 80074ba:	f1b9 0f00 	cmp.w	r9, #0
 80074be:	f47f af3c 	bne.w	800733a <_scanf_float+0x66>
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074cc:	f47f af39 	bne.w	8007342 <_scanf_float+0x6e>
 80074d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074d4:	6022      	str	r2, [r4, #0]
 80074d6:	2501      	movs	r5, #1
 80074d8:	e7c0      	b.n	800745c <_scanf_float+0x188>
 80074da:	2d03      	cmp	r5, #3
 80074dc:	d0e2      	beq.n	80074a4 <_scanf_float+0x1d0>
 80074de:	2d05      	cmp	r5, #5
 80074e0:	e7de      	b.n	80074a0 <_scanf_float+0x1cc>
 80074e2:	2d02      	cmp	r5, #2
 80074e4:	f47f af26 	bne.w	8007334 <_scanf_float+0x60>
 80074e8:	2503      	movs	r5, #3
 80074ea:	e7b7      	b.n	800745c <_scanf_float+0x188>
 80074ec:	2d06      	cmp	r5, #6
 80074ee:	f47f af21 	bne.w	8007334 <_scanf_float+0x60>
 80074f2:	2507      	movs	r5, #7
 80074f4:	e7b2      	b.n	800745c <_scanf_float+0x188>
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	0591      	lsls	r1, r2, #22
 80074fa:	f57f af1b 	bpl.w	8007334 <_scanf_float+0x60>
 80074fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007502:	6022      	str	r2, [r4, #0]
 8007504:	f8cd 9004 	str.w	r9, [sp, #4]
 8007508:	e7a8      	b.n	800745c <_scanf_float+0x188>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007510:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007514:	d006      	beq.n	8007524 <_scanf_float+0x250>
 8007516:	0550      	lsls	r0, r2, #21
 8007518:	f57f af0c 	bpl.w	8007334 <_scanf_float+0x60>
 800751c:	f1b9 0f00 	cmp.w	r9, #0
 8007520:	f43f af0f 	beq.w	8007342 <_scanf_float+0x6e>
 8007524:	0591      	lsls	r1, r2, #22
 8007526:	bf58      	it	pl
 8007528:	9901      	ldrpl	r1, [sp, #4]
 800752a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800752e:	bf58      	it	pl
 8007530:	eba9 0101 	subpl.w	r1, r9, r1
 8007534:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007538:	bf58      	it	pl
 800753a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800753e:	6022      	str	r2, [r4, #0]
 8007540:	f04f 0900 	mov.w	r9, #0
 8007544:	e78a      	b.n	800745c <_scanf_float+0x188>
 8007546:	f04f 0a03 	mov.w	sl, #3
 800754a:	e787      	b.n	800745c <_scanf_float+0x188>
 800754c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007550:	4639      	mov	r1, r7
 8007552:	4640      	mov	r0, r8
 8007554:	4798      	blx	r3
 8007556:	2800      	cmp	r0, #0
 8007558:	f43f aedf 	beq.w	800731a <_scanf_float+0x46>
 800755c:	e6ea      	b.n	8007334 <_scanf_float+0x60>
 800755e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007562:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007566:	463a      	mov	r2, r7
 8007568:	4640      	mov	r0, r8
 800756a:	4798      	blx	r3
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	3b01      	subs	r3, #1
 8007570:	6123      	str	r3, [r4, #16]
 8007572:	e6ec      	b.n	800734e <_scanf_float+0x7a>
 8007574:	1e6b      	subs	r3, r5, #1
 8007576:	2b06      	cmp	r3, #6
 8007578:	d825      	bhi.n	80075c6 <_scanf_float+0x2f2>
 800757a:	2d02      	cmp	r5, #2
 800757c:	d836      	bhi.n	80075ec <_scanf_float+0x318>
 800757e:	455e      	cmp	r6, fp
 8007580:	f67f aee8 	bls.w	8007354 <_scanf_float+0x80>
 8007584:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007588:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800758c:	463a      	mov	r2, r7
 800758e:	4640      	mov	r0, r8
 8007590:	4798      	blx	r3
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	3b01      	subs	r3, #1
 8007596:	6123      	str	r3, [r4, #16]
 8007598:	e7f1      	b.n	800757e <_scanf_float+0x2aa>
 800759a:	9802      	ldr	r0, [sp, #8]
 800759c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80075a4:	9002      	str	r0, [sp, #8]
 80075a6:	463a      	mov	r2, r7
 80075a8:	4640      	mov	r0, r8
 80075aa:	4798      	blx	r3
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075b6:	fa5f fa8a 	uxtb.w	sl, sl
 80075ba:	f1ba 0f02 	cmp.w	sl, #2
 80075be:	d1ec      	bne.n	800759a <_scanf_float+0x2c6>
 80075c0:	3d03      	subs	r5, #3
 80075c2:	b2ed      	uxtb	r5, r5
 80075c4:	1b76      	subs	r6, r6, r5
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	05da      	lsls	r2, r3, #23
 80075ca:	d52f      	bpl.n	800762c <_scanf_float+0x358>
 80075cc:	055b      	lsls	r3, r3, #21
 80075ce:	d510      	bpl.n	80075f2 <_scanf_float+0x31e>
 80075d0:	455e      	cmp	r6, fp
 80075d2:	f67f aebf 	bls.w	8007354 <_scanf_float+0x80>
 80075d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075de:	463a      	mov	r2, r7
 80075e0:	4640      	mov	r0, r8
 80075e2:	4798      	blx	r3
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	e7f1      	b.n	80075d0 <_scanf_float+0x2fc>
 80075ec:	46aa      	mov	sl, r5
 80075ee:	9602      	str	r6, [sp, #8]
 80075f0:	e7df      	b.n	80075b2 <_scanf_float+0x2de>
 80075f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	2965      	cmp	r1, #101	; 0x65
 80075fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80075fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007602:	6123      	str	r3, [r4, #16]
 8007604:	d00c      	beq.n	8007620 <_scanf_float+0x34c>
 8007606:	2945      	cmp	r1, #69	; 0x45
 8007608:	d00a      	beq.n	8007620 <_scanf_float+0x34c>
 800760a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800760e:	463a      	mov	r2, r7
 8007610:	4640      	mov	r0, r8
 8007612:	4798      	blx	r3
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800761a:	3b01      	subs	r3, #1
 800761c:	1eb5      	subs	r5, r6, #2
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007624:	463a      	mov	r2, r7
 8007626:	4640      	mov	r0, r8
 8007628:	4798      	blx	r3
 800762a:	462e      	mov	r6, r5
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	f015 0510 	ands.w	r5, r5, #16
 8007632:	d159      	bne.n	80076e8 <_scanf_float+0x414>
 8007634:	7035      	strb	r5, [r6, #0]
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800763c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007640:	d11b      	bne.n	800767a <_scanf_float+0x3a6>
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	454b      	cmp	r3, r9
 8007646:	eba3 0209 	sub.w	r2, r3, r9
 800764a:	d123      	bne.n	8007694 <_scanf_float+0x3c0>
 800764c:	2200      	movs	r2, #0
 800764e:	4659      	mov	r1, fp
 8007650:	4640      	mov	r0, r8
 8007652:	f000 ffe3 	bl	800861c <_strtod_r>
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	f012 0f02 	tst.w	r2, #2
 800765e:	ec57 6b10 	vmov	r6, r7, d0
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	d021      	beq.n	80076aa <_scanf_float+0x3d6>
 8007666:	9903      	ldr	r1, [sp, #12]
 8007668:	1d1a      	adds	r2, r3, #4
 800766a:	600a      	str	r2, [r1, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	e9c3 6700 	strd	r6, r7, [r3]
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60e3      	str	r3, [r4, #12]
 8007678:	e66d      	b.n	8007356 <_scanf_float+0x82>
 800767a:	9b04      	ldr	r3, [sp, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0e5      	beq.n	800764c <_scanf_float+0x378>
 8007680:	9905      	ldr	r1, [sp, #20]
 8007682:	230a      	movs	r3, #10
 8007684:	462a      	mov	r2, r5
 8007686:	3101      	adds	r1, #1
 8007688:	4640      	mov	r0, r8
 800768a:	f001 f84f 	bl	800872c <_strtol_r>
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	9e05      	ldr	r6, [sp, #20]
 8007692:	1ac2      	subs	r2, r0, r3
 8007694:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007698:	429e      	cmp	r6, r3
 800769a:	bf28      	it	cs
 800769c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80076a0:	4912      	ldr	r1, [pc, #72]	; (80076ec <_scanf_float+0x418>)
 80076a2:	4630      	mov	r0, r6
 80076a4:	f000 f934 	bl	8007910 <siprintf>
 80076a8:	e7d0      	b.n	800764c <_scanf_float+0x378>
 80076aa:	9903      	ldr	r1, [sp, #12]
 80076ac:	f012 0f04 	tst.w	r2, #4
 80076b0:	f103 0204 	add.w	r2, r3, #4
 80076b4:	600a      	str	r2, [r1, #0]
 80076b6:	d1d9      	bne.n	800766c <_scanf_float+0x398>
 80076b8:	f8d3 8000 	ldr.w	r8, [r3]
 80076bc:	ee10 2a10 	vmov	r2, s0
 80076c0:	ee10 0a10 	vmov	r0, s0
 80076c4:	463b      	mov	r3, r7
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f9 fa30 	bl	8000b2c <__aeabi_dcmpun>
 80076cc:	b128      	cbz	r0, 80076da <_scanf_float+0x406>
 80076ce:	4808      	ldr	r0, [pc, #32]	; (80076f0 <_scanf_float+0x41c>)
 80076d0:	f000 f918 	bl	8007904 <nanf>
 80076d4:	ed88 0a00 	vstr	s0, [r8]
 80076d8:	e7cb      	b.n	8007672 <_scanf_float+0x39e>
 80076da:	4630      	mov	r0, r6
 80076dc:	4639      	mov	r1, r7
 80076de:	f7f9 fa83 	bl	8000be8 <__aeabi_d2f>
 80076e2:	f8c8 0000 	str.w	r0, [r8]
 80076e6:	e7c4      	b.n	8007672 <_scanf_float+0x39e>
 80076e8:	2500      	movs	r5, #0
 80076ea:	e634      	b.n	8007356 <_scanf_float+0x82>
 80076ec:	0800be02 	.word	0x0800be02
 80076f0:	0800c223 	.word	0x0800c223

080076f4 <_puts_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	460e      	mov	r6, r1
 80076f8:	4605      	mov	r5, r0
 80076fa:	b118      	cbz	r0, 8007704 <_puts_r+0x10>
 80076fc:	6983      	ldr	r3, [r0, #24]
 80076fe:	b90b      	cbnz	r3, 8007704 <_puts_r+0x10>
 8007700:	f7fe fff2 	bl	80066e8 <__sinit>
 8007704:	69ab      	ldr	r3, [r5, #24]
 8007706:	68ac      	ldr	r4, [r5, #8]
 8007708:	b913      	cbnz	r3, 8007710 <_puts_r+0x1c>
 800770a:	4628      	mov	r0, r5
 800770c:	f7fe ffec 	bl	80066e8 <__sinit>
 8007710:	4b2c      	ldr	r3, [pc, #176]	; (80077c4 <_puts_r+0xd0>)
 8007712:	429c      	cmp	r4, r3
 8007714:	d120      	bne.n	8007758 <_puts_r+0x64>
 8007716:	686c      	ldr	r4, [r5, #4]
 8007718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771a:	07db      	lsls	r3, r3, #31
 800771c:	d405      	bmi.n	800772a <_puts_r+0x36>
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	0598      	lsls	r0, r3, #22
 8007722:	d402      	bmi.n	800772a <_puts_r+0x36>
 8007724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007726:	f7ff f8be 	bl	80068a6 <__retarget_lock_acquire_recursive>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	0719      	lsls	r1, r3, #28
 800772e:	d51d      	bpl.n	800776c <_puts_r+0x78>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	b1db      	cbz	r3, 800776c <_puts_r+0x78>
 8007734:	3e01      	subs	r6, #1
 8007736:	68a3      	ldr	r3, [r4, #8]
 8007738:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800773c:	3b01      	subs	r3, #1
 800773e:	60a3      	str	r3, [r4, #8]
 8007740:	bb39      	cbnz	r1, 8007792 <_puts_r+0x9e>
 8007742:	2b00      	cmp	r3, #0
 8007744:	da38      	bge.n	80077b8 <_puts_r+0xc4>
 8007746:	4622      	mov	r2, r4
 8007748:	210a      	movs	r1, #10
 800774a:	4628      	mov	r0, r5
 800774c:	f000 fff0 	bl	8008730 <__swbuf_r>
 8007750:	3001      	adds	r0, #1
 8007752:	d011      	beq.n	8007778 <_puts_r+0x84>
 8007754:	250a      	movs	r5, #10
 8007756:	e011      	b.n	800777c <_puts_r+0x88>
 8007758:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <_puts_r+0xd4>)
 800775a:	429c      	cmp	r4, r3
 800775c:	d101      	bne.n	8007762 <_puts_r+0x6e>
 800775e:	68ac      	ldr	r4, [r5, #8]
 8007760:	e7da      	b.n	8007718 <_puts_r+0x24>
 8007762:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <_puts_r+0xd8>)
 8007764:	429c      	cmp	r4, r3
 8007766:	bf08      	it	eq
 8007768:	68ec      	ldreq	r4, [r5, #12]
 800776a:	e7d5      	b.n	8007718 <_puts_r+0x24>
 800776c:	4621      	mov	r1, r4
 800776e:	4628      	mov	r0, r5
 8007770:	f001 f842 	bl	80087f8 <__swsetup_r>
 8007774:	2800      	cmp	r0, #0
 8007776:	d0dd      	beq.n	8007734 <_puts_r+0x40>
 8007778:	f04f 35ff 	mov.w	r5, #4294967295
 800777c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800777e:	07da      	lsls	r2, r3, #31
 8007780:	d405      	bmi.n	800778e <_puts_r+0x9a>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	059b      	lsls	r3, r3, #22
 8007786:	d402      	bmi.n	800778e <_puts_r+0x9a>
 8007788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800778a:	f7ff f88d 	bl	80068a8 <__retarget_lock_release_recursive>
 800778e:	4628      	mov	r0, r5
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	2b00      	cmp	r3, #0
 8007794:	da04      	bge.n	80077a0 <_puts_r+0xac>
 8007796:	69a2      	ldr	r2, [r4, #24]
 8007798:	429a      	cmp	r2, r3
 800779a:	dc06      	bgt.n	80077aa <_puts_r+0xb6>
 800779c:	290a      	cmp	r1, #10
 800779e:	d004      	beq.n	80077aa <_puts_r+0xb6>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	7019      	strb	r1, [r3, #0]
 80077a8:	e7c5      	b.n	8007736 <_puts_r+0x42>
 80077aa:	4622      	mov	r2, r4
 80077ac:	4628      	mov	r0, r5
 80077ae:	f000 ffbf 	bl	8008730 <__swbuf_r>
 80077b2:	3001      	adds	r0, #1
 80077b4:	d1bf      	bne.n	8007736 <_puts_r+0x42>
 80077b6:	e7df      	b.n	8007778 <_puts_r+0x84>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	250a      	movs	r5, #10
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	6022      	str	r2, [r4, #0]
 80077c0:	701d      	strb	r5, [r3, #0]
 80077c2:	e7db      	b.n	800777c <_puts_r+0x88>
 80077c4:	0800bd8c 	.word	0x0800bd8c
 80077c8:	0800bdac 	.word	0x0800bdac
 80077cc:	0800bd6c 	.word	0x0800bd6c

080077d0 <puts>:
 80077d0:	4b02      	ldr	r3, [pc, #8]	; (80077dc <puts+0xc>)
 80077d2:	4601      	mov	r1, r0
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f7ff bf8d 	b.w	80076f4 <_puts_r>
 80077da:	bf00      	nop
 80077dc:	20000010 	.word	0x20000010

080077e0 <cleanup_glue>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	460c      	mov	r4, r1
 80077e4:	6809      	ldr	r1, [r1, #0]
 80077e6:	4605      	mov	r5, r0
 80077e8:	b109      	cbz	r1, 80077ee <cleanup_glue+0xe>
 80077ea:	f7ff fff9 	bl	80077e0 <cleanup_glue>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4628      	mov	r0, r5
 80077f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f6:	f003 b8b7 	b.w	800a968 <_free_r>
	...

080077fc <_reclaim_reent>:
 80077fc:	4b2c      	ldr	r3, [pc, #176]	; (80078b0 <_reclaim_reent+0xb4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4283      	cmp	r3, r0
 8007802:	b570      	push	{r4, r5, r6, lr}
 8007804:	4604      	mov	r4, r0
 8007806:	d051      	beq.n	80078ac <_reclaim_reent+0xb0>
 8007808:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800780a:	b143      	cbz	r3, 800781e <_reclaim_reent+0x22>
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d14a      	bne.n	80078a8 <_reclaim_reent+0xac>
 8007812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007814:	6819      	ldr	r1, [r3, #0]
 8007816:	b111      	cbz	r1, 800781e <_reclaim_reent+0x22>
 8007818:	4620      	mov	r0, r4
 800781a:	f003 f8a5 	bl	800a968 <_free_r>
 800781e:	6961      	ldr	r1, [r4, #20]
 8007820:	b111      	cbz	r1, 8007828 <_reclaim_reent+0x2c>
 8007822:	4620      	mov	r0, r4
 8007824:	f003 f8a0 	bl	800a968 <_free_r>
 8007828:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800782a:	b111      	cbz	r1, 8007832 <_reclaim_reent+0x36>
 800782c:	4620      	mov	r0, r4
 800782e:	f003 f89b 	bl	800a968 <_free_r>
 8007832:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007834:	b111      	cbz	r1, 800783c <_reclaim_reent+0x40>
 8007836:	4620      	mov	r0, r4
 8007838:	f003 f896 	bl	800a968 <_free_r>
 800783c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800783e:	b111      	cbz	r1, 8007846 <_reclaim_reent+0x4a>
 8007840:	4620      	mov	r0, r4
 8007842:	f003 f891 	bl	800a968 <_free_r>
 8007846:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007848:	b111      	cbz	r1, 8007850 <_reclaim_reent+0x54>
 800784a:	4620      	mov	r0, r4
 800784c:	f003 f88c 	bl	800a968 <_free_r>
 8007850:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007852:	b111      	cbz	r1, 800785a <_reclaim_reent+0x5e>
 8007854:	4620      	mov	r0, r4
 8007856:	f003 f887 	bl	800a968 <_free_r>
 800785a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800785c:	b111      	cbz	r1, 8007864 <_reclaim_reent+0x68>
 800785e:	4620      	mov	r0, r4
 8007860:	f003 f882 	bl	800a968 <_free_r>
 8007864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007866:	b111      	cbz	r1, 800786e <_reclaim_reent+0x72>
 8007868:	4620      	mov	r0, r4
 800786a:	f003 f87d 	bl	800a968 <_free_r>
 800786e:	69a3      	ldr	r3, [r4, #24]
 8007870:	b1e3      	cbz	r3, 80078ac <_reclaim_reent+0xb0>
 8007872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007874:	4620      	mov	r0, r4
 8007876:	4798      	blx	r3
 8007878:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800787a:	b1b9      	cbz	r1, 80078ac <_reclaim_reent+0xb0>
 800787c:	4620      	mov	r0, r4
 800787e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007882:	f7ff bfad 	b.w	80077e0 <cleanup_glue>
 8007886:	5949      	ldr	r1, [r1, r5]
 8007888:	b941      	cbnz	r1, 800789c <_reclaim_reent+0xa0>
 800788a:	3504      	adds	r5, #4
 800788c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800788e:	2d80      	cmp	r5, #128	; 0x80
 8007890:	68d9      	ldr	r1, [r3, #12]
 8007892:	d1f8      	bne.n	8007886 <_reclaim_reent+0x8a>
 8007894:	4620      	mov	r0, r4
 8007896:	f003 f867 	bl	800a968 <_free_r>
 800789a:	e7ba      	b.n	8007812 <_reclaim_reent+0x16>
 800789c:	680e      	ldr	r6, [r1, #0]
 800789e:	4620      	mov	r0, r4
 80078a0:	f003 f862 	bl	800a968 <_free_r>
 80078a4:	4631      	mov	r1, r6
 80078a6:	e7ef      	b.n	8007888 <_reclaim_reent+0x8c>
 80078a8:	2500      	movs	r5, #0
 80078aa:	e7ef      	b.n	800788c <_reclaim_reent+0x90>
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	bf00      	nop
 80078b0:	20000010 	.word	0x20000010

080078b4 <_sbrk_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d06      	ldr	r5, [pc, #24]	; (80078d0 <_sbrk_r+0x1c>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	4604      	mov	r4, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	602b      	str	r3, [r5, #0]
 80078c0:	f7f9 feee 	bl	80016a0 <_sbrk>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_sbrk_r+0x1a>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_sbrk_r+0x1a>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20004c7c 	.word	0x20004c7c

080078d4 <iscanf>:
 80078d4:	b40f      	push	{r0, r1, r2, r3}
 80078d6:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <iscanf+0x2c>)
 80078d8:	b513      	push	{r0, r1, r4, lr}
 80078da:	681c      	ldr	r4, [r3, #0]
 80078dc:	b124      	cbz	r4, 80078e8 <iscanf+0x14>
 80078de:	69a3      	ldr	r3, [r4, #24]
 80078e0:	b913      	cbnz	r3, 80078e8 <iscanf+0x14>
 80078e2:	4620      	mov	r0, r4
 80078e4:	f7fe ff00 	bl	80066e8 <__sinit>
 80078e8:	ab05      	add	r3, sp, #20
 80078ea:	9a04      	ldr	r2, [sp, #16]
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	4620      	mov	r0, r4
 80078f2:	f003 fb87 	bl	800b004 <_vfiscanf_r>
 80078f6:	b002      	add	sp, #8
 80078f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078fc:	b004      	add	sp, #16
 80078fe:	4770      	bx	lr
 8007900:	20000010 	.word	0x20000010

08007904 <nanf>:
 8007904:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800790c <nanf+0x8>
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	7fc00000 	.word	0x7fc00000

08007910 <siprintf>:
 8007910:	b40e      	push	{r1, r2, r3}
 8007912:	b500      	push	{lr}
 8007914:	b09c      	sub	sp, #112	; 0x70
 8007916:	ab1d      	add	r3, sp, #116	; 0x74
 8007918:	9002      	str	r0, [sp, #8]
 800791a:	9006      	str	r0, [sp, #24]
 800791c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007920:	4809      	ldr	r0, [pc, #36]	; (8007948 <siprintf+0x38>)
 8007922:	9107      	str	r1, [sp, #28]
 8007924:	9104      	str	r1, [sp, #16]
 8007926:	4909      	ldr	r1, [pc, #36]	; (800794c <siprintf+0x3c>)
 8007928:	f853 2b04 	ldr.w	r2, [r3], #4
 800792c:	9105      	str	r1, [sp, #20]
 800792e:	6800      	ldr	r0, [r0, #0]
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	a902      	add	r1, sp, #8
 8007934:	f003 f8c0 	bl	800aab8 <_svfiprintf_r>
 8007938:	9b02      	ldr	r3, [sp, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	b01c      	add	sp, #112	; 0x70
 8007940:	f85d eb04 	ldr.w	lr, [sp], #4
 8007944:	b003      	add	sp, #12
 8007946:	4770      	bx	lr
 8007948:	20000010 	.word	0x20000010
 800794c:	ffff0208 	.word	0xffff0208

08007950 <__sread>:
 8007950:	b510      	push	{r4, lr}
 8007952:	460c      	mov	r4, r1
 8007954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007958:	f003 fcce 	bl	800b2f8 <_read_r>
 800795c:	2800      	cmp	r0, #0
 800795e:	bfab      	itete	ge
 8007960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007962:	89a3      	ldrhlt	r3, [r4, #12]
 8007964:	181b      	addge	r3, r3, r0
 8007966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800796a:	bfac      	ite	ge
 800796c:	6563      	strge	r3, [r4, #84]	; 0x54
 800796e:	81a3      	strhlt	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__swrite>:
 8007972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	461f      	mov	r7, r3
 8007978:	898b      	ldrh	r3, [r1, #12]
 800797a:	05db      	lsls	r3, r3, #23
 800797c:	4605      	mov	r5, r0
 800797e:	460c      	mov	r4, r1
 8007980:	4616      	mov	r6, r2
 8007982:	d505      	bpl.n	8007990 <__swrite+0x1e>
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	2302      	movs	r3, #2
 800798a:	2200      	movs	r2, #0
 800798c:	f002 fa76 	bl	8009e7c <_lseek_r>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	4632      	mov	r2, r6
 800799e:	463b      	mov	r3, r7
 80079a0:	4628      	mov	r0, r5
 80079a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	f000 bf15 	b.w	80087d4 <_write_r>

080079aa <__sseek>:
 80079aa:	b510      	push	{r4, lr}
 80079ac:	460c      	mov	r4, r1
 80079ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b2:	f002 fa63 	bl	8009e7c <_lseek_r>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	bf15      	itete	ne
 80079bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80079be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079c6:	81a3      	strheq	r3, [r4, #12]
 80079c8:	bf18      	it	ne
 80079ca:	81a3      	strhne	r3, [r4, #12]
 80079cc:	bd10      	pop	{r4, pc}

080079ce <__sclose>:
 80079ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d2:	f000 bf7f 	b.w	80088d4 <_close_r>

080079d6 <sulp>:
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	ec45 4b10 	vmov	d0, r4, r5
 80079e0:	4616      	mov	r6, r2
 80079e2:	f002 fe5b 	bl	800a69c <__ulp>
 80079e6:	ec51 0b10 	vmov	r0, r1, d0
 80079ea:	b17e      	cbz	r6, 8007a0c <sulp+0x36>
 80079ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80079f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd09      	ble.n	8007a0c <sulp+0x36>
 80079f8:	051b      	lsls	r3, r3, #20
 80079fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079fe:	2400      	movs	r4, #0
 8007a00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a04:	4622      	mov	r2, r4
 8007a06:	462b      	mov	r3, r5
 8007a08:	f7f8 fdf6 	bl	80005f8 <__aeabi_dmul>
 8007a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a10 <_strtod_l>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	ed2d 8b02 	vpush	{d8}
 8007a18:	b09d      	sub	sp, #116	; 0x74
 8007a1a:	461f      	mov	r7, r3
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9318      	str	r3, [sp, #96]	; 0x60
 8007a20:	4ba2      	ldr	r3, [pc, #648]	; (8007cac <_strtod_l+0x29c>)
 8007a22:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	9305      	str	r3, [sp, #20]
 8007a28:	4604      	mov	r4, r0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	4688      	mov	r8, r1
 8007a2e:	f7f8 fbcf 	bl	80001d0 <strlen>
 8007a32:	f04f 0a00 	mov.w	sl, #0
 8007a36:	4605      	mov	r5, r0
 8007a38:	f04f 0b00 	mov.w	fp, #0
 8007a3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	2a2b      	cmp	r2, #43	; 0x2b
 8007a46:	d04e      	beq.n	8007ae6 <_strtod_l+0xd6>
 8007a48:	d83b      	bhi.n	8007ac2 <_strtod_l+0xb2>
 8007a4a:	2a0d      	cmp	r2, #13
 8007a4c:	d834      	bhi.n	8007ab8 <_strtod_l+0xa8>
 8007a4e:	2a08      	cmp	r2, #8
 8007a50:	d834      	bhi.n	8007abc <_strtod_l+0xac>
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	d03e      	beq.n	8007ad4 <_strtod_l+0xc4>
 8007a56:	2300      	movs	r3, #0
 8007a58:	930a      	str	r3, [sp, #40]	; 0x28
 8007a5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007a5c:	7833      	ldrb	r3, [r6, #0]
 8007a5e:	2b30      	cmp	r3, #48	; 0x30
 8007a60:	f040 80b0 	bne.w	8007bc4 <_strtod_l+0x1b4>
 8007a64:	7873      	ldrb	r3, [r6, #1]
 8007a66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a6a:	2b58      	cmp	r3, #88	; 0x58
 8007a6c:	d168      	bne.n	8007b40 <_strtod_l+0x130>
 8007a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	ab18      	add	r3, sp, #96	; 0x60
 8007a74:	9702      	str	r7, [sp, #8]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	4a8d      	ldr	r2, [pc, #564]	; (8007cb0 <_strtod_l+0x2a0>)
 8007a7a:	ab19      	add	r3, sp, #100	; 0x64
 8007a7c:	a917      	add	r1, sp, #92	; 0x5c
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f001 fef0 	bl	8009864 <__gethex>
 8007a84:	f010 0707 	ands.w	r7, r0, #7
 8007a88:	4605      	mov	r5, r0
 8007a8a:	d005      	beq.n	8007a98 <_strtod_l+0x88>
 8007a8c:	2f06      	cmp	r7, #6
 8007a8e:	d12c      	bne.n	8007aea <_strtod_l+0xda>
 8007a90:	3601      	adds	r6, #1
 8007a92:	2300      	movs	r3, #0
 8007a94:	9617      	str	r6, [sp, #92]	; 0x5c
 8007a96:	930a      	str	r3, [sp, #40]	; 0x28
 8007a98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 8590 	bne.w	80085c0 <_strtod_l+0xbb0>
 8007aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa2:	b1eb      	cbz	r3, 8007ae0 <_strtod_l+0xd0>
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007aaa:	ec43 2b10 	vmov	d0, r2, r3
 8007aae:	b01d      	add	sp, #116	; 0x74
 8007ab0:	ecbd 8b02 	vpop	{d8}
 8007ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	2a20      	cmp	r2, #32
 8007aba:	d1cc      	bne.n	8007a56 <_strtod_l+0x46>
 8007abc:	3301      	adds	r3, #1
 8007abe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ac0:	e7be      	b.n	8007a40 <_strtod_l+0x30>
 8007ac2:	2a2d      	cmp	r2, #45	; 0x2d
 8007ac4:	d1c7      	bne.n	8007a56 <_strtod_l+0x46>
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	920a      	str	r2, [sp, #40]	; 0x28
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1c2      	bne.n	8007a5a <_strtod_l+0x4a>
 8007ad4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ad6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 856e 	bne.w	80085bc <_strtod_l+0xbac>
 8007ae0:	4652      	mov	r2, sl
 8007ae2:	465b      	mov	r3, fp
 8007ae4:	e7e1      	b.n	8007aaa <_strtod_l+0x9a>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	e7ee      	b.n	8007ac8 <_strtod_l+0xb8>
 8007aea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007aec:	b13a      	cbz	r2, 8007afe <_strtod_l+0xee>
 8007aee:	2135      	movs	r1, #53	; 0x35
 8007af0:	a81a      	add	r0, sp, #104	; 0x68
 8007af2:	f002 fede 	bl	800a8b2 <__copybits>
 8007af6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007af8:	4620      	mov	r0, r4
 8007afa:	f002 fa9d 	bl	800a038 <_Bfree>
 8007afe:	3f01      	subs	r7, #1
 8007b00:	2f04      	cmp	r7, #4
 8007b02:	d806      	bhi.n	8007b12 <_strtod_l+0x102>
 8007b04:	e8df f007 	tbb	[pc, r7]
 8007b08:	1714030a 	.word	0x1714030a
 8007b0c:	0a          	.byte	0x0a
 8007b0d:	00          	.byte	0x00
 8007b0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007b12:	0728      	lsls	r0, r5, #28
 8007b14:	d5c0      	bpl.n	8007a98 <_strtod_l+0x88>
 8007b16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b1a:	e7bd      	b.n	8007a98 <_strtod_l+0x88>
 8007b1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b2e:	e7f0      	b.n	8007b12 <_strtod_l+0x102>
 8007b30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007cb4 <_strtod_l+0x2a4>
 8007b34:	e7ed      	b.n	8007b12 <_strtod_l+0x102>
 8007b36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007b3a:	f04f 3aff 	mov.w	sl, #4294967295
 8007b3e:	e7e8      	b.n	8007b12 <_strtod_l+0x102>
 8007b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	d0f9      	beq.n	8007b40 <_strtod_l+0x130>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0a3      	beq.n	8007a98 <_strtod_l+0x88>
 8007b50:	2301      	movs	r3, #1
 8007b52:	f04f 0900 	mov.w	r9, #0
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b5a:	9308      	str	r3, [sp, #32]
 8007b5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b60:	464f      	mov	r7, r9
 8007b62:	220a      	movs	r2, #10
 8007b64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007b66:	7806      	ldrb	r6, [r0, #0]
 8007b68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b6c:	b2d9      	uxtb	r1, r3
 8007b6e:	2909      	cmp	r1, #9
 8007b70:	d92a      	bls.n	8007bc8 <_strtod_l+0x1b8>
 8007b72:	9905      	ldr	r1, [sp, #20]
 8007b74:	462a      	mov	r2, r5
 8007b76:	f003 fca7 	bl	800b4c8 <strncmp>
 8007b7a:	b398      	cbz	r0, 8007be4 <_strtod_l+0x1d4>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	4632      	mov	r2, r6
 8007b80:	463d      	mov	r5, r7
 8007b82:	9005      	str	r0, [sp, #20]
 8007b84:	4603      	mov	r3, r0
 8007b86:	2a65      	cmp	r2, #101	; 0x65
 8007b88:	d001      	beq.n	8007b8e <_strtod_l+0x17e>
 8007b8a:	2a45      	cmp	r2, #69	; 0x45
 8007b8c:	d118      	bne.n	8007bc0 <_strtod_l+0x1b0>
 8007b8e:	b91d      	cbnz	r5, 8007b98 <_strtod_l+0x188>
 8007b90:	9a04      	ldr	r2, [sp, #16]
 8007b92:	4302      	orrs	r2, r0
 8007b94:	d09e      	beq.n	8007ad4 <_strtod_l+0xc4>
 8007b96:	2500      	movs	r5, #0
 8007b98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007b9c:	f108 0201 	add.w	r2, r8, #1
 8007ba0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ba2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007ba6:	2a2b      	cmp	r2, #43	; 0x2b
 8007ba8:	d075      	beq.n	8007c96 <_strtod_l+0x286>
 8007baa:	2a2d      	cmp	r2, #45	; 0x2d
 8007bac:	d07b      	beq.n	8007ca6 <_strtod_l+0x296>
 8007bae:	f04f 0c00 	mov.w	ip, #0
 8007bb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bb6:	2909      	cmp	r1, #9
 8007bb8:	f240 8082 	bls.w	8007cc0 <_strtod_l+0x2b0>
 8007bbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007bc0:	2600      	movs	r6, #0
 8007bc2:	e09d      	b.n	8007d00 <_strtod_l+0x2f0>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e7c4      	b.n	8007b52 <_strtod_l+0x142>
 8007bc8:	2f08      	cmp	r7, #8
 8007bca:	bfd8      	it	le
 8007bcc:	9907      	ldrle	r1, [sp, #28]
 8007bce:	f100 0001 	add.w	r0, r0, #1
 8007bd2:	bfda      	itte	le
 8007bd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bd8:	9307      	strle	r3, [sp, #28]
 8007bda:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007bde:	3701      	adds	r7, #1
 8007be0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007be2:	e7bf      	b.n	8007b64 <_strtod_l+0x154>
 8007be4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007be6:	195a      	adds	r2, r3, r5
 8007be8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bea:	5d5a      	ldrb	r2, [r3, r5]
 8007bec:	2f00      	cmp	r7, #0
 8007bee:	d037      	beq.n	8007c60 <_strtod_l+0x250>
 8007bf0:	9005      	str	r0, [sp, #20]
 8007bf2:	463d      	mov	r5, r7
 8007bf4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007bf8:	2b09      	cmp	r3, #9
 8007bfa:	d912      	bls.n	8007c22 <_strtod_l+0x212>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e7c2      	b.n	8007b86 <_strtod_l+0x176>
 8007c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c06:	785a      	ldrb	r2, [r3, #1]
 8007c08:	3001      	adds	r0, #1
 8007c0a:	2a30      	cmp	r2, #48	; 0x30
 8007c0c:	d0f8      	beq.n	8007c00 <_strtod_l+0x1f0>
 8007c0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	f200 84d9 	bhi.w	80085ca <_strtod_l+0xbba>
 8007c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c1a:	9005      	str	r0, [sp, #20]
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	9308      	str	r3, [sp, #32]
 8007c20:	4605      	mov	r5, r0
 8007c22:	3a30      	subs	r2, #48	; 0x30
 8007c24:	f100 0301 	add.w	r3, r0, #1
 8007c28:	d014      	beq.n	8007c54 <_strtod_l+0x244>
 8007c2a:	9905      	ldr	r1, [sp, #20]
 8007c2c:	4419      	add	r1, r3
 8007c2e:	9105      	str	r1, [sp, #20]
 8007c30:	462b      	mov	r3, r5
 8007c32:	eb00 0e05 	add.w	lr, r0, r5
 8007c36:	210a      	movs	r1, #10
 8007c38:	4573      	cmp	r3, lr
 8007c3a:	d113      	bne.n	8007c64 <_strtod_l+0x254>
 8007c3c:	182b      	adds	r3, r5, r0
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	f105 0501 	add.w	r5, r5, #1
 8007c44:	4405      	add	r5, r0
 8007c46:	dc1c      	bgt.n	8007c82 <_strtod_l+0x272>
 8007c48:	9907      	ldr	r1, [sp, #28]
 8007c4a:	230a      	movs	r3, #10
 8007c4c:	fb03 2301 	mla	r3, r3, r1, r2
 8007c50:	9307      	str	r3, [sp, #28]
 8007c52:	2300      	movs	r3, #0
 8007c54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c56:	1c51      	adds	r1, r2, #1
 8007c58:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c5a:	7852      	ldrb	r2, [r2, #1]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	e7c9      	b.n	8007bf4 <_strtod_l+0x1e4>
 8007c60:	4638      	mov	r0, r7
 8007c62:	e7d2      	b.n	8007c0a <_strtod_l+0x1fa>
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	dc04      	bgt.n	8007c72 <_strtod_l+0x262>
 8007c68:	9e07      	ldr	r6, [sp, #28]
 8007c6a:	434e      	muls	r6, r1
 8007c6c:	9607      	str	r6, [sp, #28]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	e7e2      	b.n	8007c38 <_strtod_l+0x228>
 8007c72:	f103 0c01 	add.w	ip, r3, #1
 8007c76:	f1bc 0f10 	cmp.w	ip, #16
 8007c7a:	bfd8      	it	le
 8007c7c:	fb01 f909 	mulle.w	r9, r1, r9
 8007c80:	e7f5      	b.n	8007c6e <_strtod_l+0x25e>
 8007c82:	2d10      	cmp	r5, #16
 8007c84:	bfdc      	itt	le
 8007c86:	230a      	movle	r3, #10
 8007c88:	fb03 2909 	mlale	r9, r3, r9, r2
 8007c8c:	e7e1      	b.n	8007c52 <_strtod_l+0x242>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9305      	str	r3, [sp, #20]
 8007c92:	2301      	movs	r3, #1
 8007c94:	e77c      	b.n	8007b90 <_strtod_l+0x180>
 8007c96:	f04f 0c00 	mov.w	ip, #0
 8007c9a:	f108 0202 	add.w	r2, r8, #2
 8007c9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ca0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007ca4:	e785      	b.n	8007bb2 <_strtod_l+0x1a2>
 8007ca6:	f04f 0c01 	mov.w	ip, #1
 8007caa:	e7f6      	b.n	8007c9a <_strtod_l+0x28a>
 8007cac:	0800c050 	.word	0x0800c050
 8007cb0:	0800be08 	.word	0x0800be08
 8007cb4:	7ff00000 	.word	0x7ff00000
 8007cb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cba:	1c51      	adds	r1, r2, #1
 8007cbc:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cbe:	7852      	ldrb	r2, [r2, #1]
 8007cc0:	2a30      	cmp	r2, #48	; 0x30
 8007cc2:	d0f9      	beq.n	8007cb8 <_strtod_l+0x2a8>
 8007cc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cc8:	2908      	cmp	r1, #8
 8007cca:	f63f af79 	bhi.w	8007bc0 <_strtod_l+0x1b0>
 8007cce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cd4:	9206      	str	r2, [sp, #24]
 8007cd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cd8:	1c51      	adds	r1, r2, #1
 8007cda:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cdc:	7852      	ldrb	r2, [r2, #1]
 8007cde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007ce2:	2e09      	cmp	r6, #9
 8007ce4:	d937      	bls.n	8007d56 <_strtod_l+0x346>
 8007ce6:	9e06      	ldr	r6, [sp, #24]
 8007ce8:	1b89      	subs	r1, r1, r6
 8007cea:	2908      	cmp	r1, #8
 8007cec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007cf0:	dc02      	bgt.n	8007cf8 <_strtod_l+0x2e8>
 8007cf2:	4576      	cmp	r6, lr
 8007cf4:	bfa8      	it	ge
 8007cf6:	4676      	movge	r6, lr
 8007cf8:	f1bc 0f00 	cmp.w	ip, #0
 8007cfc:	d000      	beq.n	8007d00 <_strtod_l+0x2f0>
 8007cfe:	4276      	negs	r6, r6
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	d14d      	bne.n	8007da0 <_strtod_l+0x390>
 8007d04:	9904      	ldr	r1, [sp, #16]
 8007d06:	4301      	orrs	r1, r0
 8007d08:	f47f aec6 	bne.w	8007a98 <_strtod_l+0x88>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f47f aee1 	bne.w	8007ad4 <_strtod_l+0xc4>
 8007d12:	2a69      	cmp	r2, #105	; 0x69
 8007d14:	d027      	beq.n	8007d66 <_strtod_l+0x356>
 8007d16:	dc24      	bgt.n	8007d62 <_strtod_l+0x352>
 8007d18:	2a49      	cmp	r2, #73	; 0x49
 8007d1a:	d024      	beq.n	8007d66 <_strtod_l+0x356>
 8007d1c:	2a4e      	cmp	r2, #78	; 0x4e
 8007d1e:	f47f aed9 	bne.w	8007ad4 <_strtod_l+0xc4>
 8007d22:	499f      	ldr	r1, [pc, #636]	; (8007fa0 <_strtod_l+0x590>)
 8007d24:	a817      	add	r0, sp, #92	; 0x5c
 8007d26:	f001 fff5 	bl	8009d14 <__match>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f43f aed2 	beq.w	8007ad4 <_strtod_l+0xc4>
 8007d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b28      	cmp	r3, #40	; 0x28
 8007d36:	d12d      	bne.n	8007d94 <_strtod_l+0x384>
 8007d38:	499a      	ldr	r1, [pc, #616]	; (8007fa4 <_strtod_l+0x594>)
 8007d3a:	aa1a      	add	r2, sp, #104	; 0x68
 8007d3c:	a817      	add	r0, sp, #92	; 0x5c
 8007d3e:	f001 fffd 	bl	8009d3c <__hexnan>
 8007d42:	2805      	cmp	r0, #5
 8007d44:	d126      	bne.n	8007d94 <_strtod_l+0x384>
 8007d46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007d4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007d50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007d54:	e6a0      	b.n	8007a98 <_strtod_l+0x88>
 8007d56:	210a      	movs	r1, #10
 8007d58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007d5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d60:	e7b9      	b.n	8007cd6 <_strtod_l+0x2c6>
 8007d62:	2a6e      	cmp	r2, #110	; 0x6e
 8007d64:	e7db      	b.n	8007d1e <_strtod_l+0x30e>
 8007d66:	4990      	ldr	r1, [pc, #576]	; (8007fa8 <_strtod_l+0x598>)
 8007d68:	a817      	add	r0, sp, #92	; 0x5c
 8007d6a:	f001 ffd3 	bl	8009d14 <__match>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f43f aeb0 	beq.w	8007ad4 <_strtod_l+0xc4>
 8007d74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d76:	498d      	ldr	r1, [pc, #564]	; (8007fac <_strtod_l+0x59c>)
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	a817      	add	r0, sp, #92	; 0x5c
 8007d7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d7e:	f001 ffc9 	bl	8009d14 <__match>
 8007d82:	b910      	cbnz	r0, 8007d8a <_strtod_l+0x37a>
 8007d84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d86:	3301      	adds	r3, #1
 8007d88:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007fbc <_strtod_l+0x5ac>
 8007d8e:	f04f 0a00 	mov.w	sl, #0
 8007d92:	e681      	b.n	8007a98 <_strtod_l+0x88>
 8007d94:	4886      	ldr	r0, [pc, #536]	; (8007fb0 <_strtod_l+0x5a0>)
 8007d96:	f003 fb57 	bl	800b448 <nan>
 8007d9a:	ec5b ab10 	vmov	sl, fp, d0
 8007d9e:	e67b      	b.n	8007a98 <_strtod_l+0x88>
 8007da0:	9b05      	ldr	r3, [sp, #20]
 8007da2:	9807      	ldr	r0, [sp, #28]
 8007da4:	1af3      	subs	r3, r6, r3
 8007da6:	2f00      	cmp	r7, #0
 8007da8:	bf08      	it	eq
 8007daa:	462f      	moveq	r7, r5
 8007dac:	2d10      	cmp	r5, #16
 8007dae:	9306      	str	r3, [sp, #24]
 8007db0:	46a8      	mov	r8, r5
 8007db2:	bfa8      	it	ge
 8007db4:	f04f 0810 	movge.w	r8, #16
 8007db8:	f7f8 fba4 	bl	8000504 <__aeabi_ui2d>
 8007dbc:	2d09      	cmp	r5, #9
 8007dbe:	4682      	mov	sl, r0
 8007dc0:	468b      	mov	fp, r1
 8007dc2:	dd13      	ble.n	8007dec <_strtod_l+0x3dc>
 8007dc4:	4b7b      	ldr	r3, [pc, #492]	; (8007fb4 <_strtod_l+0x5a4>)
 8007dc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007dca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dce:	f7f8 fc13 	bl	80005f8 <__aeabi_dmul>
 8007dd2:	4682      	mov	sl, r0
 8007dd4:	4648      	mov	r0, r9
 8007dd6:	468b      	mov	fp, r1
 8007dd8:	f7f8 fb94 	bl	8000504 <__aeabi_ui2d>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4650      	mov	r0, sl
 8007de2:	4659      	mov	r1, fp
 8007de4:	f7f8 fa52 	bl	800028c <__adddf3>
 8007de8:	4682      	mov	sl, r0
 8007dea:	468b      	mov	fp, r1
 8007dec:	2d0f      	cmp	r5, #15
 8007dee:	dc38      	bgt.n	8007e62 <_strtod_l+0x452>
 8007df0:	9b06      	ldr	r3, [sp, #24]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f43f ae50 	beq.w	8007a98 <_strtod_l+0x88>
 8007df8:	dd24      	ble.n	8007e44 <_strtod_l+0x434>
 8007dfa:	2b16      	cmp	r3, #22
 8007dfc:	dc0b      	bgt.n	8007e16 <_strtod_l+0x406>
 8007dfe:	496d      	ldr	r1, [pc, #436]	; (8007fb4 <_strtod_l+0x5a4>)
 8007e00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e08:	4652      	mov	r2, sl
 8007e0a:	465b      	mov	r3, fp
 8007e0c:	f7f8 fbf4 	bl	80005f8 <__aeabi_dmul>
 8007e10:	4682      	mov	sl, r0
 8007e12:	468b      	mov	fp, r1
 8007e14:	e640      	b.n	8007a98 <_strtod_l+0x88>
 8007e16:	9a06      	ldr	r2, [sp, #24]
 8007e18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	db20      	blt.n	8007e62 <_strtod_l+0x452>
 8007e20:	4c64      	ldr	r4, [pc, #400]	; (8007fb4 <_strtod_l+0x5a4>)
 8007e22:	f1c5 050f 	rsb	r5, r5, #15
 8007e26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	465b      	mov	r3, fp
 8007e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e32:	f7f8 fbe1 	bl	80005f8 <__aeabi_dmul>
 8007e36:	9b06      	ldr	r3, [sp, #24]
 8007e38:	1b5d      	subs	r5, r3, r5
 8007e3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007e3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e42:	e7e3      	b.n	8007e0c <_strtod_l+0x3fc>
 8007e44:	9b06      	ldr	r3, [sp, #24]
 8007e46:	3316      	adds	r3, #22
 8007e48:	db0b      	blt.n	8007e62 <_strtod_l+0x452>
 8007e4a:	9b05      	ldr	r3, [sp, #20]
 8007e4c:	1b9e      	subs	r6, r3, r6
 8007e4e:	4b59      	ldr	r3, [pc, #356]	; (8007fb4 <_strtod_l+0x5a4>)
 8007e50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e58:	4650      	mov	r0, sl
 8007e5a:	4659      	mov	r1, fp
 8007e5c:	f7f8 fcf6 	bl	800084c <__aeabi_ddiv>
 8007e60:	e7d6      	b.n	8007e10 <_strtod_l+0x400>
 8007e62:	9b06      	ldr	r3, [sp, #24]
 8007e64:	eba5 0808 	sub.w	r8, r5, r8
 8007e68:	4498      	add	r8, r3
 8007e6a:	f1b8 0f00 	cmp.w	r8, #0
 8007e6e:	dd74      	ble.n	8007f5a <_strtod_l+0x54a>
 8007e70:	f018 030f 	ands.w	r3, r8, #15
 8007e74:	d00a      	beq.n	8007e8c <_strtod_l+0x47c>
 8007e76:	494f      	ldr	r1, [pc, #316]	; (8007fb4 <_strtod_l+0x5a4>)
 8007e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e7c:	4652      	mov	r2, sl
 8007e7e:	465b      	mov	r3, fp
 8007e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e84:	f7f8 fbb8 	bl	80005f8 <__aeabi_dmul>
 8007e88:	4682      	mov	sl, r0
 8007e8a:	468b      	mov	fp, r1
 8007e8c:	f038 080f 	bics.w	r8, r8, #15
 8007e90:	d04f      	beq.n	8007f32 <_strtod_l+0x522>
 8007e92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007e96:	dd22      	ble.n	8007ede <_strtod_l+0x4ce>
 8007e98:	2500      	movs	r5, #0
 8007e9a:	462e      	mov	r6, r5
 8007e9c:	9507      	str	r5, [sp, #28]
 8007e9e:	9505      	str	r5, [sp, #20]
 8007ea0:	2322      	movs	r3, #34	; 0x22
 8007ea2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007fbc <_strtod_l+0x5ac>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	f04f 0a00 	mov.w	sl, #0
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f43f adf2 	beq.w	8007a98 <_strtod_l+0x88>
 8007eb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f002 f8be 	bl	800a038 <_Bfree>
 8007ebc:	9905      	ldr	r1, [sp, #20]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f002 f8ba 	bl	800a038 <_Bfree>
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f002 f8b6 	bl	800a038 <_Bfree>
 8007ecc:	9907      	ldr	r1, [sp, #28]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f002 f8b2 	bl	800a038 <_Bfree>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f002 f8ae 	bl	800a038 <_Bfree>
 8007edc:	e5dc      	b.n	8007a98 <_strtod_l+0x88>
 8007ede:	4b36      	ldr	r3, [pc, #216]	; (8007fb8 <_strtod_l+0x5a8>)
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ee8:	4650      	mov	r0, sl
 8007eea:	4659      	mov	r1, fp
 8007eec:	4699      	mov	r9, r3
 8007eee:	f1b8 0f01 	cmp.w	r8, #1
 8007ef2:	dc21      	bgt.n	8007f38 <_strtod_l+0x528>
 8007ef4:	b10b      	cbz	r3, 8007efa <_strtod_l+0x4ea>
 8007ef6:	4682      	mov	sl, r0
 8007ef8:	468b      	mov	fp, r1
 8007efa:	4b2f      	ldr	r3, [pc, #188]	; (8007fb8 <_strtod_l+0x5a8>)
 8007efc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f04:	4652      	mov	r2, sl
 8007f06:	465b      	mov	r3, fp
 8007f08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f0c:	f7f8 fb74 	bl	80005f8 <__aeabi_dmul>
 8007f10:	4b2a      	ldr	r3, [pc, #168]	; (8007fbc <_strtod_l+0x5ac>)
 8007f12:	460a      	mov	r2, r1
 8007f14:	400b      	ands	r3, r1
 8007f16:	492a      	ldr	r1, [pc, #168]	; (8007fc0 <_strtod_l+0x5b0>)
 8007f18:	428b      	cmp	r3, r1
 8007f1a:	4682      	mov	sl, r0
 8007f1c:	d8bc      	bhi.n	8007e98 <_strtod_l+0x488>
 8007f1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f22:	428b      	cmp	r3, r1
 8007f24:	bf86      	itte	hi
 8007f26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007fc4 <_strtod_l+0x5b4>
 8007f2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f32:	2300      	movs	r3, #0
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	e084      	b.n	8008042 <_strtod_l+0x632>
 8007f38:	f018 0f01 	tst.w	r8, #1
 8007f3c:	d005      	beq.n	8007f4a <_strtod_l+0x53a>
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 fb58 	bl	80005f8 <__aeabi_dmul>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	9a04      	ldr	r2, [sp, #16]
 8007f4c:	3208      	adds	r2, #8
 8007f4e:	f109 0901 	add.w	r9, r9, #1
 8007f52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f56:	9204      	str	r2, [sp, #16]
 8007f58:	e7c9      	b.n	8007eee <_strtod_l+0x4de>
 8007f5a:	d0ea      	beq.n	8007f32 <_strtod_l+0x522>
 8007f5c:	f1c8 0800 	rsb	r8, r8, #0
 8007f60:	f018 020f 	ands.w	r2, r8, #15
 8007f64:	d00a      	beq.n	8007f7c <_strtod_l+0x56c>
 8007f66:	4b13      	ldr	r3, [pc, #76]	; (8007fb4 <_strtod_l+0x5a4>)
 8007f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	4659      	mov	r1, fp
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 fc6a 	bl	800084c <__aeabi_ddiv>
 8007f78:	4682      	mov	sl, r0
 8007f7a:	468b      	mov	fp, r1
 8007f7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f80:	d0d7      	beq.n	8007f32 <_strtod_l+0x522>
 8007f82:	f1b8 0f1f 	cmp.w	r8, #31
 8007f86:	dd1f      	ble.n	8007fc8 <_strtod_l+0x5b8>
 8007f88:	2500      	movs	r5, #0
 8007f8a:	462e      	mov	r6, r5
 8007f8c:	9507      	str	r5, [sp, #28]
 8007f8e:	9505      	str	r5, [sp, #20]
 8007f90:	2322      	movs	r3, #34	; 0x22
 8007f92:	f04f 0a00 	mov.w	sl, #0
 8007f96:	f04f 0b00 	mov.w	fp, #0
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	e786      	b.n	8007eac <_strtod_l+0x49c>
 8007f9e:	bf00      	nop
 8007fa0:	0800bddd 	.word	0x0800bddd
 8007fa4:	0800be1c 	.word	0x0800be1c
 8007fa8:	0800bdd5 	.word	0x0800bdd5
 8007fac:	0800bf5c 	.word	0x0800bf5c
 8007fb0:	0800c223 	.word	0x0800c223
 8007fb4:	0800c0e8 	.word	0x0800c0e8
 8007fb8:	0800c0c0 	.word	0x0800c0c0
 8007fbc:	7ff00000 	.word	0x7ff00000
 8007fc0:	7ca00000 	.word	0x7ca00000
 8007fc4:	7fefffff 	.word	0x7fefffff
 8007fc8:	f018 0310 	ands.w	r3, r8, #16
 8007fcc:	bf18      	it	ne
 8007fce:	236a      	movne	r3, #106	; 0x6a
 8007fd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008380 <_strtod_l+0x970>
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	4659      	mov	r1, fp
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f018 0f01 	tst.w	r8, #1
 8007fe0:	d004      	beq.n	8007fec <_strtod_l+0x5dc>
 8007fe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007fe6:	f7f8 fb07 	bl	80005f8 <__aeabi_dmul>
 8007fea:	2301      	movs	r3, #1
 8007fec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007ff0:	f109 0908 	add.w	r9, r9, #8
 8007ff4:	d1f2      	bne.n	8007fdc <_strtod_l+0x5cc>
 8007ff6:	b10b      	cbz	r3, 8007ffc <_strtod_l+0x5ec>
 8007ff8:	4682      	mov	sl, r0
 8007ffa:	468b      	mov	fp, r1
 8007ffc:	9b04      	ldr	r3, [sp, #16]
 8007ffe:	b1c3      	cbz	r3, 8008032 <_strtod_l+0x622>
 8008000:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008004:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008008:	2b00      	cmp	r3, #0
 800800a:	4659      	mov	r1, fp
 800800c:	dd11      	ble.n	8008032 <_strtod_l+0x622>
 800800e:	2b1f      	cmp	r3, #31
 8008010:	f340 8124 	ble.w	800825c <_strtod_l+0x84c>
 8008014:	2b34      	cmp	r3, #52	; 0x34
 8008016:	bfde      	ittt	le
 8008018:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800801c:	f04f 33ff 	movle.w	r3, #4294967295
 8008020:	fa03 f202 	lslle.w	r2, r3, r2
 8008024:	f04f 0a00 	mov.w	sl, #0
 8008028:	bfcc      	ite	gt
 800802a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800802e:	ea02 0b01 	andle.w	fp, r2, r1
 8008032:	2200      	movs	r2, #0
 8008034:	2300      	movs	r3, #0
 8008036:	4650      	mov	r0, sl
 8008038:	4659      	mov	r1, fp
 800803a:	f7f8 fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800803e:	2800      	cmp	r0, #0
 8008040:	d1a2      	bne.n	8007f88 <_strtod_l+0x578>
 8008042:	9b07      	ldr	r3, [sp, #28]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	9908      	ldr	r1, [sp, #32]
 8008048:	462b      	mov	r3, r5
 800804a:	463a      	mov	r2, r7
 800804c:	4620      	mov	r0, r4
 800804e:	f002 f85b 	bl	800a108 <__s2b>
 8008052:	9007      	str	r0, [sp, #28]
 8008054:	2800      	cmp	r0, #0
 8008056:	f43f af1f 	beq.w	8007e98 <_strtod_l+0x488>
 800805a:	9b05      	ldr	r3, [sp, #20]
 800805c:	1b9e      	subs	r6, r3, r6
 800805e:	9b06      	ldr	r3, [sp, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bfb4      	ite	lt
 8008064:	4633      	movlt	r3, r6
 8008066:	2300      	movge	r3, #0
 8008068:	930c      	str	r3, [sp, #48]	; 0x30
 800806a:	9b06      	ldr	r3, [sp, #24]
 800806c:	2500      	movs	r5, #0
 800806e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008072:	9312      	str	r3, [sp, #72]	; 0x48
 8008074:	462e      	mov	r6, r5
 8008076:	9b07      	ldr	r3, [sp, #28]
 8008078:	4620      	mov	r0, r4
 800807a:	6859      	ldr	r1, [r3, #4]
 800807c:	f001 ff9c 	bl	8009fb8 <_Balloc>
 8008080:	9005      	str	r0, [sp, #20]
 8008082:	2800      	cmp	r0, #0
 8008084:	f43f af0c 	beq.w	8007ea0 <_strtod_l+0x490>
 8008088:	9b07      	ldr	r3, [sp, #28]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	3202      	adds	r2, #2
 800808e:	f103 010c 	add.w	r1, r3, #12
 8008092:	0092      	lsls	r2, r2, #2
 8008094:	300c      	adds	r0, #12
 8008096:	f7fe fc08 	bl	80068aa <memcpy>
 800809a:	ec4b ab10 	vmov	d0, sl, fp
 800809e:	aa1a      	add	r2, sp, #104	; 0x68
 80080a0:	a919      	add	r1, sp, #100	; 0x64
 80080a2:	4620      	mov	r0, r4
 80080a4:	f002 fb76 	bl	800a794 <__d2b>
 80080a8:	ec4b ab18 	vmov	d8, sl, fp
 80080ac:	9018      	str	r0, [sp, #96]	; 0x60
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f aef6 	beq.w	8007ea0 <_strtod_l+0x490>
 80080b4:	2101      	movs	r1, #1
 80080b6:	4620      	mov	r0, r4
 80080b8:	f002 f8c0 	bl	800a23c <__i2b>
 80080bc:	4606      	mov	r6, r0
 80080be:	2800      	cmp	r0, #0
 80080c0:	f43f aeee 	beq.w	8007ea0 <_strtod_l+0x490>
 80080c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080c6:	9904      	ldr	r1, [sp, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bfab      	itete	ge
 80080cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80080ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80080d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80080d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80080d6:	bfac      	ite	ge
 80080d8:	eb03 0902 	addge.w	r9, r3, r2
 80080dc:	1ad7      	sublt	r7, r2, r3
 80080de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80080e0:	eba3 0801 	sub.w	r8, r3, r1
 80080e4:	4490      	add	r8, r2
 80080e6:	4ba1      	ldr	r3, [pc, #644]	; (800836c <_strtod_l+0x95c>)
 80080e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80080ec:	4598      	cmp	r8, r3
 80080ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080f2:	f280 80c7 	bge.w	8008284 <_strtod_l+0x874>
 80080f6:	eba3 0308 	sub.w	r3, r3, r8
 80080fa:	2b1f      	cmp	r3, #31
 80080fc:	eba2 0203 	sub.w	r2, r2, r3
 8008100:	f04f 0101 	mov.w	r1, #1
 8008104:	f300 80b1 	bgt.w	800826a <_strtod_l+0x85a>
 8008108:	fa01 f303 	lsl.w	r3, r1, r3
 800810c:	930d      	str	r3, [sp, #52]	; 0x34
 800810e:	2300      	movs	r3, #0
 8008110:	9308      	str	r3, [sp, #32]
 8008112:	eb09 0802 	add.w	r8, r9, r2
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	45c1      	cmp	r9, r8
 800811a:	4417      	add	r7, r2
 800811c:	441f      	add	r7, r3
 800811e:	464b      	mov	r3, r9
 8008120:	bfa8      	it	ge
 8008122:	4643      	movge	r3, r8
 8008124:	42bb      	cmp	r3, r7
 8008126:	bfa8      	it	ge
 8008128:	463b      	movge	r3, r7
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfc2      	ittt	gt
 800812e:	eba8 0803 	subgt.w	r8, r8, r3
 8008132:	1aff      	subgt	r7, r7, r3
 8008134:	eba9 0903 	subgt.w	r9, r9, r3
 8008138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800813a:	2b00      	cmp	r3, #0
 800813c:	dd17      	ble.n	800816e <_strtod_l+0x75e>
 800813e:	4631      	mov	r1, r6
 8008140:	461a      	mov	r2, r3
 8008142:	4620      	mov	r0, r4
 8008144:	f002 f93a 	bl	800a3bc <__pow5mult>
 8008148:	4606      	mov	r6, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	f43f aea8 	beq.w	8007ea0 <_strtod_l+0x490>
 8008150:	4601      	mov	r1, r0
 8008152:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008154:	4620      	mov	r0, r4
 8008156:	f002 f887 	bl	800a268 <__multiply>
 800815a:	900b      	str	r0, [sp, #44]	; 0x2c
 800815c:	2800      	cmp	r0, #0
 800815e:	f43f ae9f 	beq.w	8007ea0 <_strtod_l+0x490>
 8008162:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008164:	4620      	mov	r0, r4
 8008166:	f001 ff67 	bl	800a038 <_Bfree>
 800816a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816c:	9318      	str	r3, [sp, #96]	; 0x60
 800816e:	f1b8 0f00 	cmp.w	r8, #0
 8008172:	f300 808c 	bgt.w	800828e <_strtod_l+0x87e>
 8008176:	9b06      	ldr	r3, [sp, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	dd08      	ble.n	800818e <_strtod_l+0x77e>
 800817c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800817e:	9905      	ldr	r1, [sp, #20]
 8008180:	4620      	mov	r0, r4
 8008182:	f002 f91b 	bl	800a3bc <__pow5mult>
 8008186:	9005      	str	r0, [sp, #20]
 8008188:	2800      	cmp	r0, #0
 800818a:	f43f ae89 	beq.w	8007ea0 <_strtod_l+0x490>
 800818e:	2f00      	cmp	r7, #0
 8008190:	dd08      	ble.n	80081a4 <_strtod_l+0x794>
 8008192:	9905      	ldr	r1, [sp, #20]
 8008194:	463a      	mov	r2, r7
 8008196:	4620      	mov	r0, r4
 8008198:	f002 f96a 	bl	800a470 <__lshift>
 800819c:	9005      	str	r0, [sp, #20]
 800819e:	2800      	cmp	r0, #0
 80081a0:	f43f ae7e 	beq.w	8007ea0 <_strtod_l+0x490>
 80081a4:	f1b9 0f00 	cmp.w	r9, #0
 80081a8:	dd08      	ble.n	80081bc <_strtod_l+0x7ac>
 80081aa:	4631      	mov	r1, r6
 80081ac:	464a      	mov	r2, r9
 80081ae:	4620      	mov	r0, r4
 80081b0:	f002 f95e 	bl	800a470 <__lshift>
 80081b4:	4606      	mov	r6, r0
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f43f ae72 	beq.w	8007ea0 <_strtod_l+0x490>
 80081bc:	9a05      	ldr	r2, [sp, #20]
 80081be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081c0:	4620      	mov	r0, r4
 80081c2:	f002 f9e1 	bl	800a588 <__mdiff>
 80081c6:	4605      	mov	r5, r0
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f43f ae69 	beq.w	8007ea0 <_strtod_l+0x490>
 80081ce:	68c3      	ldr	r3, [r0, #12]
 80081d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081d2:	2300      	movs	r3, #0
 80081d4:	60c3      	str	r3, [r0, #12]
 80081d6:	4631      	mov	r1, r6
 80081d8:	f002 f9ba 	bl	800a550 <__mcmp>
 80081dc:	2800      	cmp	r0, #0
 80081de:	da60      	bge.n	80082a2 <_strtod_l+0x892>
 80081e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e2:	ea53 030a 	orrs.w	r3, r3, sl
 80081e6:	f040 8082 	bne.w	80082ee <_strtod_l+0x8de>
 80081ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d17d      	bne.n	80082ee <_strtod_l+0x8de>
 80081f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081f6:	0d1b      	lsrs	r3, r3, #20
 80081f8:	051b      	lsls	r3, r3, #20
 80081fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081fe:	d976      	bls.n	80082ee <_strtod_l+0x8de>
 8008200:	696b      	ldr	r3, [r5, #20]
 8008202:	b913      	cbnz	r3, 800820a <_strtod_l+0x7fa>
 8008204:	692b      	ldr	r3, [r5, #16]
 8008206:	2b01      	cmp	r3, #1
 8008208:	dd71      	ble.n	80082ee <_strtod_l+0x8de>
 800820a:	4629      	mov	r1, r5
 800820c:	2201      	movs	r2, #1
 800820e:	4620      	mov	r0, r4
 8008210:	f002 f92e 	bl	800a470 <__lshift>
 8008214:	4631      	mov	r1, r6
 8008216:	4605      	mov	r5, r0
 8008218:	f002 f99a 	bl	800a550 <__mcmp>
 800821c:	2800      	cmp	r0, #0
 800821e:	dd66      	ble.n	80082ee <_strtod_l+0x8de>
 8008220:	9904      	ldr	r1, [sp, #16]
 8008222:	4a53      	ldr	r2, [pc, #332]	; (8008370 <_strtod_l+0x960>)
 8008224:	465b      	mov	r3, fp
 8008226:	2900      	cmp	r1, #0
 8008228:	f000 8081 	beq.w	800832e <_strtod_l+0x91e>
 800822c:	ea02 010b 	and.w	r1, r2, fp
 8008230:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008234:	dc7b      	bgt.n	800832e <_strtod_l+0x91e>
 8008236:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800823a:	f77f aea9 	ble.w	8007f90 <_strtod_l+0x580>
 800823e:	4b4d      	ldr	r3, [pc, #308]	; (8008374 <_strtod_l+0x964>)
 8008240:	4650      	mov	r0, sl
 8008242:	4659      	mov	r1, fp
 8008244:	2200      	movs	r2, #0
 8008246:	f7f8 f9d7 	bl	80005f8 <__aeabi_dmul>
 800824a:	460b      	mov	r3, r1
 800824c:	4303      	orrs	r3, r0
 800824e:	bf08      	it	eq
 8008250:	2322      	moveq	r3, #34	; 0x22
 8008252:	4682      	mov	sl, r0
 8008254:	468b      	mov	fp, r1
 8008256:	bf08      	it	eq
 8008258:	6023      	streq	r3, [r4, #0]
 800825a:	e62b      	b.n	8007eb4 <_strtod_l+0x4a4>
 800825c:	f04f 32ff 	mov.w	r2, #4294967295
 8008260:	fa02 f303 	lsl.w	r3, r2, r3
 8008264:	ea03 0a0a 	and.w	sl, r3, sl
 8008268:	e6e3      	b.n	8008032 <_strtod_l+0x622>
 800826a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800826e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008272:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008276:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800827a:	fa01 f308 	lsl.w	r3, r1, r8
 800827e:	9308      	str	r3, [sp, #32]
 8008280:	910d      	str	r1, [sp, #52]	; 0x34
 8008282:	e746      	b.n	8008112 <_strtod_l+0x702>
 8008284:	2300      	movs	r3, #0
 8008286:	9308      	str	r3, [sp, #32]
 8008288:	2301      	movs	r3, #1
 800828a:	930d      	str	r3, [sp, #52]	; 0x34
 800828c:	e741      	b.n	8008112 <_strtod_l+0x702>
 800828e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008290:	4642      	mov	r2, r8
 8008292:	4620      	mov	r0, r4
 8008294:	f002 f8ec 	bl	800a470 <__lshift>
 8008298:	9018      	str	r0, [sp, #96]	; 0x60
 800829a:	2800      	cmp	r0, #0
 800829c:	f47f af6b 	bne.w	8008176 <_strtod_l+0x766>
 80082a0:	e5fe      	b.n	8007ea0 <_strtod_l+0x490>
 80082a2:	465f      	mov	r7, fp
 80082a4:	d16e      	bne.n	8008384 <_strtod_l+0x974>
 80082a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082ac:	b342      	cbz	r2, 8008300 <_strtod_l+0x8f0>
 80082ae:	4a32      	ldr	r2, [pc, #200]	; (8008378 <_strtod_l+0x968>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d128      	bne.n	8008306 <_strtod_l+0x8f6>
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	4651      	mov	r1, sl
 80082b8:	b1eb      	cbz	r3, 80082f6 <_strtod_l+0x8e6>
 80082ba:	4b2d      	ldr	r3, [pc, #180]	; (8008370 <_strtod_l+0x960>)
 80082bc:	403b      	ands	r3, r7
 80082be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082c2:	f04f 32ff 	mov.w	r2, #4294967295
 80082c6:	d819      	bhi.n	80082fc <_strtod_l+0x8ec>
 80082c8:	0d1b      	lsrs	r3, r3, #20
 80082ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	4299      	cmp	r1, r3
 80082d4:	d117      	bne.n	8008306 <_strtod_l+0x8f6>
 80082d6:	4b29      	ldr	r3, [pc, #164]	; (800837c <_strtod_l+0x96c>)
 80082d8:	429f      	cmp	r7, r3
 80082da:	d102      	bne.n	80082e2 <_strtod_l+0x8d2>
 80082dc:	3101      	adds	r1, #1
 80082de:	f43f addf 	beq.w	8007ea0 <_strtod_l+0x490>
 80082e2:	4b23      	ldr	r3, [pc, #140]	; (8008370 <_strtod_l+0x960>)
 80082e4:	403b      	ands	r3, r7
 80082e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80082ea:	f04f 0a00 	mov.w	sl, #0
 80082ee:	9b04      	ldr	r3, [sp, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1a4      	bne.n	800823e <_strtod_l+0x82e>
 80082f4:	e5de      	b.n	8007eb4 <_strtod_l+0x4a4>
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	e7ea      	b.n	80082d2 <_strtod_l+0x8c2>
 80082fc:	4613      	mov	r3, r2
 80082fe:	e7e8      	b.n	80082d2 <_strtod_l+0x8c2>
 8008300:	ea53 030a 	orrs.w	r3, r3, sl
 8008304:	d08c      	beq.n	8008220 <_strtod_l+0x810>
 8008306:	9b08      	ldr	r3, [sp, #32]
 8008308:	b1db      	cbz	r3, 8008342 <_strtod_l+0x932>
 800830a:	423b      	tst	r3, r7
 800830c:	d0ef      	beq.n	80082ee <_strtod_l+0x8de>
 800830e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008310:	9a04      	ldr	r2, [sp, #16]
 8008312:	4650      	mov	r0, sl
 8008314:	4659      	mov	r1, fp
 8008316:	b1c3      	cbz	r3, 800834a <_strtod_l+0x93a>
 8008318:	f7ff fb5d 	bl	80079d6 <sulp>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	ec51 0b18 	vmov	r0, r1, d8
 8008324:	f7f7 ffb2 	bl	800028c <__adddf3>
 8008328:	4682      	mov	sl, r0
 800832a:	468b      	mov	fp, r1
 800832c:	e7df      	b.n	80082ee <_strtod_l+0x8de>
 800832e:	4013      	ands	r3, r2
 8008330:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008334:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008338:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800833c:	f04f 3aff 	mov.w	sl, #4294967295
 8008340:	e7d5      	b.n	80082ee <_strtod_l+0x8de>
 8008342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008344:	ea13 0f0a 	tst.w	r3, sl
 8008348:	e7e0      	b.n	800830c <_strtod_l+0x8fc>
 800834a:	f7ff fb44 	bl	80079d6 <sulp>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	ec51 0b18 	vmov	r0, r1, d8
 8008356:	f7f7 ff97 	bl	8000288 <__aeabi_dsub>
 800835a:	2200      	movs	r2, #0
 800835c:	2300      	movs	r3, #0
 800835e:	4682      	mov	sl, r0
 8008360:	468b      	mov	fp, r1
 8008362:	f7f8 fbb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008366:	2800      	cmp	r0, #0
 8008368:	d0c1      	beq.n	80082ee <_strtod_l+0x8de>
 800836a:	e611      	b.n	8007f90 <_strtod_l+0x580>
 800836c:	fffffc02 	.word	0xfffffc02
 8008370:	7ff00000 	.word	0x7ff00000
 8008374:	39500000 	.word	0x39500000
 8008378:	000fffff 	.word	0x000fffff
 800837c:	7fefffff 	.word	0x7fefffff
 8008380:	0800be30 	.word	0x0800be30
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	f002 fa60 	bl	800a84c <__ratio>
 800838c:	ec59 8b10 	vmov	r8, r9, d0
 8008390:	ee10 0a10 	vmov	r0, s0
 8008394:	2200      	movs	r2, #0
 8008396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800839a:	4649      	mov	r1, r9
 800839c:	f7f8 fba8 	bl	8000af0 <__aeabi_dcmple>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d07a      	beq.n	800849a <_strtod_l+0xa8a>
 80083a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d04a      	beq.n	8008440 <_strtod_l+0xa30>
 80083aa:	4b95      	ldr	r3, [pc, #596]	; (8008600 <_strtod_l+0xbf0>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008600 <_strtod_l+0xbf0>
 80083b6:	f04f 0800 	mov.w	r8, #0
 80083ba:	4b92      	ldr	r3, [pc, #584]	; (8008604 <_strtod_l+0xbf4>)
 80083bc:	403b      	ands	r3, r7
 80083be:	930d      	str	r3, [sp, #52]	; 0x34
 80083c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083c2:	4b91      	ldr	r3, [pc, #580]	; (8008608 <_strtod_l+0xbf8>)
 80083c4:	429a      	cmp	r2, r3
 80083c6:	f040 80b0 	bne.w	800852a <_strtod_l+0xb1a>
 80083ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80083d2:	ec4b ab10 	vmov	d0, sl, fp
 80083d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083da:	f002 f95f 	bl	800a69c <__ulp>
 80083de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083e2:	ec53 2b10 	vmov	r2, r3, d0
 80083e6:	f7f8 f907 	bl	80005f8 <__aeabi_dmul>
 80083ea:	4652      	mov	r2, sl
 80083ec:	465b      	mov	r3, fp
 80083ee:	f7f7 ff4d 	bl	800028c <__adddf3>
 80083f2:	460b      	mov	r3, r1
 80083f4:	4983      	ldr	r1, [pc, #524]	; (8008604 <_strtod_l+0xbf4>)
 80083f6:	4a85      	ldr	r2, [pc, #532]	; (800860c <_strtod_l+0xbfc>)
 80083f8:	4019      	ands	r1, r3
 80083fa:	4291      	cmp	r1, r2
 80083fc:	4682      	mov	sl, r0
 80083fe:	d960      	bls.n	80084c2 <_strtod_l+0xab2>
 8008400:	ee18 3a90 	vmov	r3, s17
 8008404:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008408:	4293      	cmp	r3, r2
 800840a:	d104      	bne.n	8008416 <_strtod_l+0xa06>
 800840c:	ee18 3a10 	vmov	r3, s16
 8008410:	3301      	adds	r3, #1
 8008412:	f43f ad45 	beq.w	8007ea0 <_strtod_l+0x490>
 8008416:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008618 <_strtod_l+0xc08>
 800841a:	f04f 3aff 	mov.w	sl, #4294967295
 800841e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008420:	4620      	mov	r0, r4
 8008422:	f001 fe09 	bl	800a038 <_Bfree>
 8008426:	9905      	ldr	r1, [sp, #20]
 8008428:	4620      	mov	r0, r4
 800842a:	f001 fe05 	bl	800a038 <_Bfree>
 800842e:	4631      	mov	r1, r6
 8008430:	4620      	mov	r0, r4
 8008432:	f001 fe01 	bl	800a038 <_Bfree>
 8008436:	4629      	mov	r1, r5
 8008438:	4620      	mov	r0, r4
 800843a:	f001 fdfd 	bl	800a038 <_Bfree>
 800843e:	e61a      	b.n	8008076 <_strtod_l+0x666>
 8008440:	f1ba 0f00 	cmp.w	sl, #0
 8008444:	d11b      	bne.n	800847e <_strtod_l+0xa6e>
 8008446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800844a:	b9f3      	cbnz	r3, 800848a <_strtod_l+0xa7a>
 800844c:	4b6c      	ldr	r3, [pc, #432]	; (8008600 <_strtod_l+0xbf0>)
 800844e:	2200      	movs	r2, #0
 8008450:	4640      	mov	r0, r8
 8008452:	4649      	mov	r1, r9
 8008454:	f7f8 fb42 	bl	8000adc <__aeabi_dcmplt>
 8008458:	b9d0      	cbnz	r0, 8008490 <_strtod_l+0xa80>
 800845a:	4640      	mov	r0, r8
 800845c:	4649      	mov	r1, r9
 800845e:	4b6c      	ldr	r3, [pc, #432]	; (8008610 <_strtod_l+0xc00>)
 8008460:	2200      	movs	r2, #0
 8008462:	f7f8 f8c9 	bl	80005f8 <__aeabi_dmul>
 8008466:	4680      	mov	r8, r0
 8008468:	4689      	mov	r9, r1
 800846a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800846e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008472:	9315      	str	r3, [sp, #84]	; 0x54
 8008474:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008478:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800847c:	e79d      	b.n	80083ba <_strtod_l+0x9aa>
 800847e:	f1ba 0f01 	cmp.w	sl, #1
 8008482:	d102      	bne.n	800848a <_strtod_l+0xa7a>
 8008484:	2f00      	cmp	r7, #0
 8008486:	f43f ad83 	beq.w	8007f90 <_strtod_l+0x580>
 800848a:	4b62      	ldr	r3, [pc, #392]	; (8008614 <_strtod_l+0xc04>)
 800848c:	2200      	movs	r2, #0
 800848e:	e78e      	b.n	80083ae <_strtod_l+0x99e>
 8008490:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008610 <_strtod_l+0xc00>
 8008494:	f04f 0800 	mov.w	r8, #0
 8008498:	e7e7      	b.n	800846a <_strtod_l+0xa5a>
 800849a:	4b5d      	ldr	r3, [pc, #372]	; (8008610 <_strtod_l+0xc00>)
 800849c:	4640      	mov	r0, r8
 800849e:	4649      	mov	r1, r9
 80084a0:	2200      	movs	r2, #0
 80084a2:	f7f8 f8a9 	bl	80005f8 <__aeabi_dmul>
 80084a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a8:	4680      	mov	r8, r0
 80084aa:	4689      	mov	r9, r1
 80084ac:	b933      	cbnz	r3, 80084bc <_strtod_l+0xaac>
 80084ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084b2:	900e      	str	r0, [sp, #56]	; 0x38
 80084b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80084b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80084ba:	e7dd      	b.n	8008478 <_strtod_l+0xa68>
 80084bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80084c0:	e7f9      	b.n	80084b6 <_strtod_l+0xaa6>
 80084c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1a8      	bne.n	800841e <_strtod_l+0xa0e>
 80084cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084d2:	0d1b      	lsrs	r3, r3, #20
 80084d4:	051b      	lsls	r3, r3, #20
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d1a1      	bne.n	800841e <_strtod_l+0xa0e>
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f8 fbeb 	bl	8000cb8 <__aeabi_d2lz>
 80084e2:	f7f8 f85b 	bl	800059c <__aeabi_l2d>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4640      	mov	r0, r8
 80084ec:	4649      	mov	r1, r9
 80084ee:	f7f7 fecb 	bl	8000288 <__aeabi_dsub>
 80084f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084f8:	ea43 030a 	orr.w	r3, r3, sl
 80084fc:	4313      	orrs	r3, r2
 80084fe:	4680      	mov	r8, r0
 8008500:	4689      	mov	r9, r1
 8008502:	d055      	beq.n	80085b0 <_strtod_l+0xba0>
 8008504:	a336      	add	r3, pc, #216	; (adr r3, 80085e0 <_strtod_l+0xbd0>)
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	f7f8 fae7 	bl	8000adc <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f47f acd0 	bne.w	8007eb4 <_strtod_l+0x4a4>
 8008514:	a334      	add	r3, pc, #208	; (adr r3, 80085e8 <_strtod_l+0xbd8>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	4640      	mov	r0, r8
 800851c:	4649      	mov	r1, r9
 800851e:	f7f8 fafb 	bl	8000b18 <__aeabi_dcmpgt>
 8008522:	2800      	cmp	r0, #0
 8008524:	f43f af7b 	beq.w	800841e <_strtod_l+0xa0e>
 8008528:	e4c4      	b.n	8007eb4 <_strtod_l+0x4a4>
 800852a:	9b04      	ldr	r3, [sp, #16]
 800852c:	b333      	cbz	r3, 800857c <_strtod_l+0xb6c>
 800852e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008530:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008534:	d822      	bhi.n	800857c <_strtod_l+0xb6c>
 8008536:	a32e      	add	r3, pc, #184	; (adr r3, 80085f0 <_strtod_l+0xbe0>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	4640      	mov	r0, r8
 800853e:	4649      	mov	r1, r9
 8008540:	f7f8 fad6 	bl	8000af0 <__aeabi_dcmple>
 8008544:	b1a0      	cbz	r0, 8008570 <_strtod_l+0xb60>
 8008546:	4649      	mov	r1, r9
 8008548:	4640      	mov	r0, r8
 800854a:	f7f8 fb2d 	bl	8000ba8 <__aeabi_d2uiz>
 800854e:	2801      	cmp	r0, #1
 8008550:	bf38      	it	cc
 8008552:	2001      	movcc	r0, #1
 8008554:	f7f7 ffd6 	bl	8000504 <__aeabi_ui2d>
 8008558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855a:	4680      	mov	r8, r0
 800855c:	4689      	mov	r9, r1
 800855e:	bb23      	cbnz	r3, 80085aa <_strtod_l+0xb9a>
 8008560:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008564:	9010      	str	r0, [sp, #64]	; 0x40
 8008566:	9311      	str	r3, [sp, #68]	; 0x44
 8008568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800856c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008574:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	9309      	str	r3, [sp, #36]	; 0x24
 800857c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008580:	eeb0 0a48 	vmov.f32	s0, s16
 8008584:	eef0 0a68 	vmov.f32	s1, s17
 8008588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800858c:	f002 f886 	bl	800a69c <__ulp>
 8008590:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008594:	ec53 2b10 	vmov	r2, r3, d0
 8008598:	f7f8 f82e 	bl	80005f8 <__aeabi_dmul>
 800859c:	ec53 2b18 	vmov	r2, r3, d8
 80085a0:	f7f7 fe74 	bl	800028c <__adddf3>
 80085a4:	4682      	mov	sl, r0
 80085a6:	468b      	mov	fp, r1
 80085a8:	e78d      	b.n	80084c6 <_strtod_l+0xab6>
 80085aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80085ae:	e7db      	b.n	8008568 <_strtod_l+0xb58>
 80085b0:	a311      	add	r3, pc, #68	; (adr r3, 80085f8 <_strtod_l+0xbe8>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f8 fa91 	bl	8000adc <__aeabi_dcmplt>
 80085ba:	e7b2      	b.n	8008522 <_strtod_l+0xb12>
 80085bc:	2300      	movs	r3, #0
 80085be:	930a      	str	r3, [sp, #40]	; 0x28
 80085c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	f7ff ba6b 	b.w	8007aa0 <_strtod_l+0x90>
 80085ca:	2a65      	cmp	r2, #101	; 0x65
 80085cc:	f43f ab5f 	beq.w	8007c8e <_strtod_l+0x27e>
 80085d0:	2a45      	cmp	r2, #69	; 0x45
 80085d2:	f43f ab5c 	beq.w	8007c8e <_strtod_l+0x27e>
 80085d6:	2301      	movs	r3, #1
 80085d8:	f7ff bb94 	b.w	8007d04 <_strtod_l+0x2f4>
 80085dc:	f3af 8000 	nop.w
 80085e0:	94a03595 	.word	0x94a03595
 80085e4:	3fdfffff 	.word	0x3fdfffff
 80085e8:	35afe535 	.word	0x35afe535
 80085ec:	3fe00000 	.word	0x3fe00000
 80085f0:	ffc00000 	.word	0xffc00000
 80085f4:	41dfffff 	.word	0x41dfffff
 80085f8:	94a03595 	.word	0x94a03595
 80085fc:	3fcfffff 	.word	0x3fcfffff
 8008600:	3ff00000 	.word	0x3ff00000
 8008604:	7ff00000 	.word	0x7ff00000
 8008608:	7fe00000 	.word	0x7fe00000
 800860c:	7c9fffff 	.word	0x7c9fffff
 8008610:	3fe00000 	.word	0x3fe00000
 8008614:	bff00000 	.word	0xbff00000
 8008618:	7fefffff 	.word	0x7fefffff

0800861c <_strtod_r>:
 800861c:	4b01      	ldr	r3, [pc, #4]	; (8008624 <_strtod_r+0x8>)
 800861e:	f7ff b9f7 	b.w	8007a10 <_strtod_l>
 8008622:	bf00      	nop
 8008624:	20000078 	.word	0x20000078

08008628 <_strtol_l.constprop.0>:
 8008628:	2b01      	cmp	r3, #1
 800862a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800862e:	d001      	beq.n	8008634 <_strtol_l.constprop.0+0xc>
 8008630:	2b24      	cmp	r3, #36	; 0x24
 8008632:	d906      	bls.n	8008642 <_strtol_l.constprop.0+0x1a>
 8008634:	f7fd fffa 	bl	800662c <__errno>
 8008638:	2316      	movs	r3, #22
 800863a:	6003      	str	r3, [r0, #0]
 800863c:	2000      	movs	r0, #0
 800863e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008642:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008728 <_strtol_l.constprop.0+0x100>
 8008646:	460d      	mov	r5, r1
 8008648:	462e      	mov	r6, r5
 800864a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800864e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008652:	f017 0708 	ands.w	r7, r7, #8
 8008656:	d1f7      	bne.n	8008648 <_strtol_l.constprop.0+0x20>
 8008658:	2c2d      	cmp	r4, #45	; 0x2d
 800865a:	d132      	bne.n	80086c2 <_strtol_l.constprop.0+0x9a>
 800865c:	782c      	ldrb	r4, [r5, #0]
 800865e:	2701      	movs	r7, #1
 8008660:	1cb5      	adds	r5, r6, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d05b      	beq.n	800871e <_strtol_l.constprop.0+0xf6>
 8008666:	2b10      	cmp	r3, #16
 8008668:	d109      	bne.n	800867e <_strtol_l.constprop.0+0x56>
 800866a:	2c30      	cmp	r4, #48	; 0x30
 800866c:	d107      	bne.n	800867e <_strtol_l.constprop.0+0x56>
 800866e:	782c      	ldrb	r4, [r5, #0]
 8008670:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008674:	2c58      	cmp	r4, #88	; 0x58
 8008676:	d14d      	bne.n	8008714 <_strtol_l.constprop.0+0xec>
 8008678:	786c      	ldrb	r4, [r5, #1]
 800867a:	2310      	movs	r3, #16
 800867c:	3502      	adds	r5, #2
 800867e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008682:	f108 38ff 	add.w	r8, r8, #4294967295
 8008686:	f04f 0c00 	mov.w	ip, #0
 800868a:	fbb8 f9f3 	udiv	r9, r8, r3
 800868e:	4666      	mov	r6, ip
 8008690:	fb03 8a19 	mls	sl, r3, r9, r8
 8008694:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008698:	f1be 0f09 	cmp.w	lr, #9
 800869c:	d816      	bhi.n	80086cc <_strtol_l.constprop.0+0xa4>
 800869e:	4674      	mov	r4, lr
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	dd24      	ble.n	80086ee <_strtol_l.constprop.0+0xc6>
 80086a4:	f1bc 0f00 	cmp.w	ip, #0
 80086a8:	db1e      	blt.n	80086e8 <_strtol_l.constprop.0+0xc0>
 80086aa:	45b1      	cmp	r9, r6
 80086ac:	d31c      	bcc.n	80086e8 <_strtol_l.constprop.0+0xc0>
 80086ae:	d101      	bne.n	80086b4 <_strtol_l.constprop.0+0x8c>
 80086b0:	45a2      	cmp	sl, r4
 80086b2:	db19      	blt.n	80086e8 <_strtol_l.constprop.0+0xc0>
 80086b4:	fb06 4603 	mla	r6, r6, r3, r4
 80086b8:	f04f 0c01 	mov.w	ip, #1
 80086bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086c0:	e7e8      	b.n	8008694 <_strtol_l.constprop.0+0x6c>
 80086c2:	2c2b      	cmp	r4, #43	; 0x2b
 80086c4:	bf04      	itt	eq
 80086c6:	782c      	ldrbeq	r4, [r5, #0]
 80086c8:	1cb5      	addeq	r5, r6, #2
 80086ca:	e7ca      	b.n	8008662 <_strtol_l.constprop.0+0x3a>
 80086cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80086d0:	f1be 0f19 	cmp.w	lr, #25
 80086d4:	d801      	bhi.n	80086da <_strtol_l.constprop.0+0xb2>
 80086d6:	3c37      	subs	r4, #55	; 0x37
 80086d8:	e7e2      	b.n	80086a0 <_strtol_l.constprop.0+0x78>
 80086da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80086de:	f1be 0f19 	cmp.w	lr, #25
 80086e2:	d804      	bhi.n	80086ee <_strtol_l.constprop.0+0xc6>
 80086e4:	3c57      	subs	r4, #87	; 0x57
 80086e6:	e7db      	b.n	80086a0 <_strtol_l.constprop.0+0x78>
 80086e8:	f04f 3cff 	mov.w	ip, #4294967295
 80086ec:	e7e6      	b.n	80086bc <_strtol_l.constprop.0+0x94>
 80086ee:	f1bc 0f00 	cmp.w	ip, #0
 80086f2:	da05      	bge.n	8008700 <_strtol_l.constprop.0+0xd8>
 80086f4:	2322      	movs	r3, #34	; 0x22
 80086f6:	6003      	str	r3, [r0, #0]
 80086f8:	4646      	mov	r6, r8
 80086fa:	b942      	cbnz	r2, 800870e <_strtol_l.constprop.0+0xe6>
 80086fc:	4630      	mov	r0, r6
 80086fe:	e79e      	b.n	800863e <_strtol_l.constprop.0+0x16>
 8008700:	b107      	cbz	r7, 8008704 <_strtol_l.constprop.0+0xdc>
 8008702:	4276      	negs	r6, r6
 8008704:	2a00      	cmp	r2, #0
 8008706:	d0f9      	beq.n	80086fc <_strtol_l.constprop.0+0xd4>
 8008708:	f1bc 0f00 	cmp.w	ip, #0
 800870c:	d000      	beq.n	8008710 <_strtol_l.constprop.0+0xe8>
 800870e:	1e69      	subs	r1, r5, #1
 8008710:	6011      	str	r1, [r2, #0]
 8008712:	e7f3      	b.n	80086fc <_strtol_l.constprop.0+0xd4>
 8008714:	2430      	movs	r4, #48	; 0x30
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1b1      	bne.n	800867e <_strtol_l.constprop.0+0x56>
 800871a:	2308      	movs	r3, #8
 800871c:	e7af      	b.n	800867e <_strtol_l.constprop.0+0x56>
 800871e:	2c30      	cmp	r4, #48	; 0x30
 8008720:	d0a5      	beq.n	800866e <_strtol_l.constprop.0+0x46>
 8008722:	230a      	movs	r3, #10
 8008724:	e7ab      	b.n	800867e <_strtol_l.constprop.0+0x56>
 8008726:	bf00      	nop
 8008728:	0800be59 	.word	0x0800be59

0800872c <_strtol_r>:
 800872c:	f7ff bf7c 	b.w	8008628 <_strtol_l.constprop.0>

08008730 <__swbuf_r>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	460e      	mov	r6, r1
 8008734:	4614      	mov	r4, r2
 8008736:	4605      	mov	r5, r0
 8008738:	b118      	cbz	r0, 8008742 <__swbuf_r+0x12>
 800873a:	6983      	ldr	r3, [r0, #24]
 800873c:	b90b      	cbnz	r3, 8008742 <__swbuf_r+0x12>
 800873e:	f7fd ffd3 	bl	80066e8 <__sinit>
 8008742:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <__swbuf_r+0x98>)
 8008744:	429c      	cmp	r4, r3
 8008746:	d12b      	bne.n	80087a0 <__swbuf_r+0x70>
 8008748:	686c      	ldr	r4, [r5, #4]
 800874a:	69a3      	ldr	r3, [r4, #24]
 800874c:	60a3      	str	r3, [r4, #8]
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	071a      	lsls	r2, r3, #28
 8008752:	d52f      	bpl.n	80087b4 <__swbuf_r+0x84>
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	b36b      	cbz	r3, 80087b4 <__swbuf_r+0x84>
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	6820      	ldr	r0, [r4, #0]
 800875c:	1ac0      	subs	r0, r0, r3
 800875e:	6963      	ldr	r3, [r4, #20]
 8008760:	b2f6      	uxtb	r6, r6
 8008762:	4283      	cmp	r3, r0
 8008764:	4637      	mov	r7, r6
 8008766:	dc04      	bgt.n	8008772 <__swbuf_r+0x42>
 8008768:	4621      	mov	r1, r4
 800876a:	4628      	mov	r0, r5
 800876c:	f000 ffc4 	bl	80096f8 <_fflush_r>
 8008770:	bb30      	cbnz	r0, 80087c0 <__swbuf_r+0x90>
 8008772:	68a3      	ldr	r3, [r4, #8]
 8008774:	3b01      	subs	r3, #1
 8008776:	60a3      	str	r3, [r4, #8]
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	701e      	strb	r6, [r3, #0]
 8008780:	6963      	ldr	r3, [r4, #20]
 8008782:	3001      	adds	r0, #1
 8008784:	4283      	cmp	r3, r0
 8008786:	d004      	beq.n	8008792 <__swbuf_r+0x62>
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	07db      	lsls	r3, r3, #31
 800878c:	d506      	bpl.n	800879c <__swbuf_r+0x6c>
 800878e:	2e0a      	cmp	r6, #10
 8008790:	d104      	bne.n	800879c <__swbuf_r+0x6c>
 8008792:	4621      	mov	r1, r4
 8008794:	4628      	mov	r0, r5
 8008796:	f000 ffaf 	bl	80096f8 <_fflush_r>
 800879a:	b988      	cbnz	r0, 80087c0 <__swbuf_r+0x90>
 800879c:	4638      	mov	r0, r7
 800879e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a0:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <__swbuf_r+0x9c>)
 80087a2:	429c      	cmp	r4, r3
 80087a4:	d101      	bne.n	80087aa <__swbuf_r+0x7a>
 80087a6:	68ac      	ldr	r4, [r5, #8]
 80087a8:	e7cf      	b.n	800874a <__swbuf_r+0x1a>
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <__swbuf_r+0xa0>)
 80087ac:	429c      	cmp	r4, r3
 80087ae:	bf08      	it	eq
 80087b0:	68ec      	ldreq	r4, [r5, #12]
 80087b2:	e7ca      	b.n	800874a <__swbuf_r+0x1a>
 80087b4:	4621      	mov	r1, r4
 80087b6:	4628      	mov	r0, r5
 80087b8:	f000 f81e 	bl	80087f8 <__swsetup_r>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d0cb      	beq.n	8008758 <__swbuf_r+0x28>
 80087c0:	f04f 37ff 	mov.w	r7, #4294967295
 80087c4:	e7ea      	b.n	800879c <__swbuf_r+0x6c>
 80087c6:	bf00      	nop
 80087c8:	0800bd8c 	.word	0x0800bd8c
 80087cc:	0800bdac 	.word	0x0800bdac
 80087d0:	0800bd6c 	.word	0x0800bd6c

080087d4 <_write_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_write_r+0x20>)
 80087d8:	4604      	mov	r4, r0
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	602a      	str	r2, [r5, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	f7f8 ff0c 	bl	8001600 <_write>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_write_r+0x1e>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_write_r+0x1e>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20004c7c 	.word	0x20004c7c

080087f8 <__swsetup_r>:
 80087f8:	4b32      	ldr	r3, [pc, #200]	; (80088c4 <__swsetup_r+0xcc>)
 80087fa:	b570      	push	{r4, r5, r6, lr}
 80087fc:	681d      	ldr	r5, [r3, #0]
 80087fe:	4606      	mov	r6, r0
 8008800:	460c      	mov	r4, r1
 8008802:	b125      	cbz	r5, 800880e <__swsetup_r+0x16>
 8008804:	69ab      	ldr	r3, [r5, #24]
 8008806:	b913      	cbnz	r3, 800880e <__swsetup_r+0x16>
 8008808:	4628      	mov	r0, r5
 800880a:	f7fd ff6d 	bl	80066e8 <__sinit>
 800880e:	4b2e      	ldr	r3, [pc, #184]	; (80088c8 <__swsetup_r+0xd0>)
 8008810:	429c      	cmp	r4, r3
 8008812:	d10f      	bne.n	8008834 <__swsetup_r+0x3c>
 8008814:	686c      	ldr	r4, [r5, #4]
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800881c:	0719      	lsls	r1, r3, #28
 800881e:	d42c      	bmi.n	800887a <__swsetup_r+0x82>
 8008820:	06dd      	lsls	r5, r3, #27
 8008822:	d411      	bmi.n	8008848 <__swsetup_r+0x50>
 8008824:	2309      	movs	r3, #9
 8008826:	6033      	str	r3, [r6, #0]
 8008828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	e03e      	b.n	80088b2 <__swsetup_r+0xba>
 8008834:	4b25      	ldr	r3, [pc, #148]	; (80088cc <__swsetup_r+0xd4>)
 8008836:	429c      	cmp	r4, r3
 8008838:	d101      	bne.n	800883e <__swsetup_r+0x46>
 800883a:	68ac      	ldr	r4, [r5, #8]
 800883c:	e7eb      	b.n	8008816 <__swsetup_r+0x1e>
 800883e:	4b24      	ldr	r3, [pc, #144]	; (80088d0 <__swsetup_r+0xd8>)
 8008840:	429c      	cmp	r4, r3
 8008842:	bf08      	it	eq
 8008844:	68ec      	ldreq	r4, [r5, #12]
 8008846:	e7e6      	b.n	8008816 <__swsetup_r+0x1e>
 8008848:	0758      	lsls	r0, r3, #29
 800884a:	d512      	bpl.n	8008872 <__swsetup_r+0x7a>
 800884c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800884e:	b141      	cbz	r1, 8008862 <__swsetup_r+0x6a>
 8008850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008854:	4299      	cmp	r1, r3
 8008856:	d002      	beq.n	800885e <__swsetup_r+0x66>
 8008858:	4630      	mov	r0, r6
 800885a:	f002 f885 	bl	800a968 <_free_r>
 800885e:	2300      	movs	r3, #0
 8008860:	6363      	str	r3, [r4, #52]	; 0x34
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	2300      	movs	r3, #0
 800886c:	6063      	str	r3, [r4, #4]
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f043 0308 	orr.w	r3, r3, #8
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	b94b      	cbnz	r3, 8008892 <__swsetup_r+0x9a>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008888:	d003      	beq.n	8008892 <__swsetup_r+0x9a>
 800888a:	4621      	mov	r1, r4
 800888c:	4630      	mov	r0, r6
 800888e:	f001 fb2d 	bl	8009eec <__smakebuf_r>
 8008892:	89a0      	ldrh	r0, [r4, #12]
 8008894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008898:	f010 0301 	ands.w	r3, r0, #1
 800889c:	d00a      	beq.n	80088b4 <__swsetup_r+0xbc>
 800889e:	2300      	movs	r3, #0
 80088a0:	60a3      	str	r3, [r4, #8]
 80088a2:	6963      	ldr	r3, [r4, #20]
 80088a4:	425b      	negs	r3, r3
 80088a6:	61a3      	str	r3, [r4, #24]
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	b943      	cbnz	r3, 80088be <__swsetup_r+0xc6>
 80088ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088b0:	d1ba      	bne.n	8008828 <__swsetup_r+0x30>
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
 80088b4:	0781      	lsls	r1, r0, #30
 80088b6:	bf58      	it	pl
 80088b8:	6963      	ldrpl	r3, [r4, #20]
 80088ba:	60a3      	str	r3, [r4, #8]
 80088bc:	e7f4      	b.n	80088a8 <__swsetup_r+0xb0>
 80088be:	2000      	movs	r0, #0
 80088c0:	e7f7      	b.n	80088b2 <__swsetup_r+0xba>
 80088c2:	bf00      	nop
 80088c4:	20000010 	.word	0x20000010
 80088c8:	0800bd8c 	.word	0x0800bd8c
 80088cc:	0800bdac 	.word	0x0800bdac
 80088d0:	0800bd6c 	.word	0x0800bd6c

080088d4 <_close_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d06      	ldr	r5, [pc, #24]	; (80088f0 <_close_r+0x1c>)
 80088d8:	2300      	movs	r3, #0
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	f7f8 feaa 	bl	8001638 <_close>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_close_r+0x1a>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_close_r+0x1a>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	20004c7c 	.word	0x20004c7c

080088f4 <quorem>:
 80088f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	6903      	ldr	r3, [r0, #16]
 80088fa:	690c      	ldr	r4, [r1, #16]
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	4607      	mov	r7, r0
 8008900:	f2c0 8081 	blt.w	8008a06 <quorem+0x112>
 8008904:	3c01      	subs	r4, #1
 8008906:	f101 0814 	add.w	r8, r1, #20
 800890a:	f100 0514 	add.w	r5, r0, #20
 800890e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800891c:	3301      	adds	r3, #1
 800891e:	429a      	cmp	r2, r3
 8008920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008924:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008928:	fbb2 f6f3 	udiv	r6, r2, r3
 800892c:	d331      	bcc.n	8008992 <quorem+0x9e>
 800892e:	f04f 0e00 	mov.w	lr, #0
 8008932:	4640      	mov	r0, r8
 8008934:	46ac      	mov	ip, r5
 8008936:	46f2      	mov	sl, lr
 8008938:	f850 2b04 	ldr.w	r2, [r0], #4
 800893c:	b293      	uxth	r3, r2
 800893e:	fb06 e303 	mla	r3, r6, r3, lr
 8008942:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008946:	b29b      	uxth	r3, r3
 8008948:	ebaa 0303 	sub.w	r3, sl, r3
 800894c:	f8dc a000 	ldr.w	sl, [ip]
 8008950:	0c12      	lsrs	r2, r2, #16
 8008952:	fa13 f38a 	uxtah	r3, r3, sl
 8008956:	fb06 e202 	mla	r2, r6, r2, lr
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008962:	b292      	uxth	r2, r2
 8008964:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800896c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008970:	4581      	cmp	r9, r0
 8008972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008976:	f84c 3b04 	str.w	r3, [ip], #4
 800897a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800897e:	d2db      	bcs.n	8008938 <quorem+0x44>
 8008980:	f855 300b 	ldr.w	r3, [r5, fp]
 8008984:	b92b      	cbnz	r3, 8008992 <quorem+0x9e>
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	3b04      	subs	r3, #4
 800898a:	429d      	cmp	r5, r3
 800898c:	461a      	mov	r2, r3
 800898e:	d32e      	bcc.n	80089ee <quorem+0xfa>
 8008990:	613c      	str	r4, [r7, #16]
 8008992:	4638      	mov	r0, r7
 8008994:	f001 fddc 	bl	800a550 <__mcmp>
 8008998:	2800      	cmp	r0, #0
 800899a:	db24      	blt.n	80089e6 <quorem+0xf2>
 800899c:	3601      	adds	r6, #1
 800899e:	4628      	mov	r0, r5
 80089a0:	f04f 0c00 	mov.w	ip, #0
 80089a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80089a8:	f8d0 e000 	ldr.w	lr, [r0]
 80089ac:	b293      	uxth	r3, r2
 80089ae:	ebac 0303 	sub.w	r3, ip, r3
 80089b2:	0c12      	lsrs	r2, r2, #16
 80089b4:	fa13 f38e 	uxtah	r3, r3, lr
 80089b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089c6:	45c1      	cmp	r9, r8
 80089c8:	f840 3b04 	str.w	r3, [r0], #4
 80089cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089d0:	d2e8      	bcs.n	80089a4 <quorem+0xb0>
 80089d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089da:	b922      	cbnz	r2, 80089e6 <quorem+0xf2>
 80089dc:	3b04      	subs	r3, #4
 80089de:	429d      	cmp	r5, r3
 80089e0:	461a      	mov	r2, r3
 80089e2:	d30a      	bcc.n	80089fa <quorem+0x106>
 80089e4:	613c      	str	r4, [r7, #16]
 80089e6:	4630      	mov	r0, r6
 80089e8:	b003      	add	sp, #12
 80089ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ee:	6812      	ldr	r2, [r2, #0]
 80089f0:	3b04      	subs	r3, #4
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d1cc      	bne.n	8008990 <quorem+0x9c>
 80089f6:	3c01      	subs	r4, #1
 80089f8:	e7c7      	b.n	800898a <quorem+0x96>
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	3b04      	subs	r3, #4
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	d1f0      	bne.n	80089e4 <quorem+0xf0>
 8008a02:	3c01      	subs	r4, #1
 8008a04:	e7eb      	b.n	80089de <quorem+0xea>
 8008a06:	2000      	movs	r0, #0
 8008a08:	e7ee      	b.n	80089e8 <quorem+0xf4>
 8008a0a:	0000      	movs	r0, r0
 8008a0c:	0000      	movs	r0, r0
	...

08008a10 <_dtoa_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	ed2d 8b04 	vpush	{d8-d9}
 8008a18:	ec57 6b10 	vmov	r6, r7, d0
 8008a1c:	b093      	sub	sp, #76	; 0x4c
 8008a1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a24:	9106      	str	r1, [sp, #24]
 8008a26:	ee10 aa10 	vmov	sl, s0
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a30:	46bb      	mov	fp, r7
 8008a32:	b975      	cbnz	r5, 8008a52 <_dtoa_r+0x42>
 8008a34:	2010      	movs	r0, #16
 8008a36:	f001 fa99 	bl	8009f6c <malloc>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	6260      	str	r0, [r4, #36]	; 0x24
 8008a3e:	b920      	cbnz	r0, 8008a4a <_dtoa_r+0x3a>
 8008a40:	4ba7      	ldr	r3, [pc, #668]	; (8008ce0 <_dtoa_r+0x2d0>)
 8008a42:	21ea      	movs	r1, #234	; 0xea
 8008a44:	48a7      	ldr	r0, [pc, #668]	; (8008ce4 <_dtoa_r+0x2d4>)
 8008a46:	f002 fea7 	bl	800b798 <__assert_func>
 8008a4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a4e:	6005      	str	r5, [r0, #0]
 8008a50:	60c5      	str	r5, [r0, #12]
 8008a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a54:	6819      	ldr	r1, [r3, #0]
 8008a56:	b151      	cbz	r1, 8008a6e <_dtoa_r+0x5e>
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	604a      	str	r2, [r1, #4]
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4093      	lsls	r3, r2
 8008a60:	608b      	str	r3, [r1, #8]
 8008a62:	4620      	mov	r0, r4
 8008a64:	f001 fae8 	bl	800a038 <_Bfree>
 8008a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	1e3b      	subs	r3, r7, #0
 8008a70:	bfaa      	itet	ge
 8008a72:	2300      	movge	r3, #0
 8008a74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a78:	f8c8 3000 	strge.w	r3, [r8]
 8008a7c:	4b9a      	ldr	r3, [pc, #616]	; (8008ce8 <_dtoa_r+0x2d8>)
 8008a7e:	bfbc      	itt	lt
 8008a80:	2201      	movlt	r2, #1
 8008a82:	f8c8 2000 	strlt.w	r2, [r8]
 8008a86:	ea33 030b 	bics.w	r3, r3, fp
 8008a8a:	d11b      	bne.n	8008ac4 <_dtoa_r+0xb4>
 8008a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a98:	4333      	orrs	r3, r6
 8008a9a:	f000 8592 	beq.w	80095c2 <_dtoa_r+0xbb2>
 8008a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa0:	b963      	cbnz	r3, 8008abc <_dtoa_r+0xac>
 8008aa2:	4b92      	ldr	r3, [pc, #584]	; (8008cec <_dtoa_r+0x2dc>)
 8008aa4:	e022      	b.n	8008aec <_dtoa_r+0xdc>
 8008aa6:	4b92      	ldr	r3, [pc, #584]	; (8008cf0 <_dtoa_r+0x2e0>)
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	9801      	ldr	r0, [sp, #4]
 8008ab2:	b013      	add	sp, #76	; 0x4c
 8008ab4:	ecbd 8b04 	vpop	{d8-d9}
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	4b8b      	ldr	r3, [pc, #556]	; (8008cec <_dtoa_r+0x2dc>)
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	3303      	adds	r3, #3
 8008ac2:	e7f3      	b.n	8008aac <_dtoa_r+0x9c>
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	4650      	mov	r0, sl
 8008aca:	4659      	mov	r1, fp
 8008acc:	f7f7 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ad0:	ec4b ab19 	vmov	d9, sl, fp
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	b158      	cbz	r0, 8008af0 <_dtoa_r+0xe0>
 8008ad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ada:	2301      	movs	r3, #1
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 856b 	beq.w	80095bc <_dtoa_r+0xbac>
 8008ae6:	4883      	ldr	r0, [pc, #524]	; (8008cf4 <_dtoa_r+0x2e4>)
 8008ae8:	6018      	str	r0, [r3, #0]
 8008aea:	1e43      	subs	r3, r0, #1
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	e7df      	b.n	8008ab0 <_dtoa_r+0xa0>
 8008af0:	ec4b ab10 	vmov	d0, sl, fp
 8008af4:	aa10      	add	r2, sp, #64	; 0x40
 8008af6:	a911      	add	r1, sp, #68	; 0x44
 8008af8:	4620      	mov	r0, r4
 8008afa:	f001 fe4b 	bl	800a794 <__d2b>
 8008afe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008b02:	ee08 0a10 	vmov	s16, r0
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	f000 8084 	beq.w	8008c14 <_dtoa_r+0x204>
 8008b0c:	ee19 3a90 	vmov	r3, s19
 8008b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b18:	4656      	mov	r6, sl
 8008b1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b26:	4b74      	ldr	r3, [pc, #464]	; (8008cf8 <_dtoa_r+0x2e8>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	f7f7 fbab 	bl	8000288 <__aeabi_dsub>
 8008b32:	a365      	add	r3, pc, #404	; (adr r3, 8008cc8 <_dtoa_r+0x2b8>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd5e 	bl	80005f8 <__aeabi_dmul>
 8008b3c:	a364      	add	r3, pc, #400	; (adr r3, 8008cd0 <_dtoa_r+0x2c0>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fba3 	bl	800028c <__adddf3>
 8008b46:	4606      	mov	r6, r0
 8008b48:	4628      	mov	r0, r5
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	f7f7 fcea 	bl	8000524 <__aeabi_i2d>
 8008b50:	a361      	add	r3, pc, #388	; (adr r3, 8008cd8 <_dtoa_r+0x2c8>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f7f7 fd4f 	bl	80005f8 <__aeabi_dmul>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	f7f7 fb93 	bl	800028c <__adddf3>
 8008b66:	4606      	mov	r6, r0
 8008b68:	460f      	mov	r7, r1
 8008b6a:	f7f7 fff5 	bl	8000b58 <__aeabi_d2iz>
 8008b6e:	2200      	movs	r2, #0
 8008b70:	9000      	str	r0, [sp, #0]
 8008b72:	2300      	movs	r3, #0
 8008b74:	4630      	mov	r0, r6
 8008b76:	4639      	mov	r1, r7
 8008b78:	f7f7 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8008b7c:	b150      	cbz	r0, 8008b94 <_dtoa_r+0x184>
 8008b7e:	9800      	ldr	r0, [sp, #0]
 8008b80:	f7f7 fcd0 	bl	8000524 <__aeabi_i2d>
 8008b84:	4632      	mov	r2, r6
 8008b86:	463b      	mov	r3, r7
 8008b88:	f7f7 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b8c:	b910      	cbnz	r0, 8008b94 <_dtoa_r+0x184>
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	9b00      	ldr	r3, [sp, #0]
 8008b96:	2b16      	cmp	r3, #22
 8008b98:	d85a      	bhi.n	8008c50 <_dtoa_r+0x240>
 8008b9a:	9a00      	ldr	r2, [sp, #0]
 8008b9c:	4b57      	ldr	r3, [pc, #348]	; (8008cfc <_dtoa_r+0x2ec>)
 8008b9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	ec51 0b19 	vmov	r0, r1, d9
 8008baa:	f7f7 ff97 	bl	8000adc <__aeabi_dcmplt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d050      	beq.n	8008c54 <_dtoa_r+0x244>
 8008bb2:	9b00      	ldr	r3, [sp, #0]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bbe:	1b5d      	subs	r5, r3, r5
 8008bc0:	1e6b      	subs	r3, r5, #1
 8008bc2:	9305      	str	r3, [sp, #20]
 8008bc4:	bf45      	ittet	mi
 8008bc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bca:	9304      	strmi	r3, [sp, #16]
 8008bcc:	2300      	movpl	r3, #0
 8008bce:	2300      	movmi	r3, #0
 8008bd0:	bf4c      	ite	mi
 8008bd2:	9305      	strmi	r3, [sp, #20]
 8008bd4:	9304      	strpl	r3, [sp, #16]
 8008bd6:	9b00      	ldr	r3, [sp, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	db3d      	blt.n	8008c58 <_dtoa_r+0x248>
 8008bdc:	9b05      	ldr	r3, [sp, #20]
 8008bde:	9a00      	ldr	r2, [sp, #0]
 8008be0:	920a      	str	r2, [sp, #40]	; 0x28
 8008be2:	4413      	add	r3, r2
 8008be4:	9305      	str	r3, [sp, #20]
 8008be6:	2300      	movs	r3, #0
 8008be8:	9307      	str	r3, [sp, #28]
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	2b09      	cmp	r3, #9
 8008bee:	f200 8089 	bhi.w	8008d04 <_dtoa_r+0x2f4>
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	bfc4      	itt	gt
 8008bf6:	3b04      	subgt	r3, #4
 8008bf8:	9306      	strgt	r3, [sp, #24]
 8008bfa:	9b06      	ldr	r3, [sp, #24]
 8008bfc:	f1a3 0302 	sub.w	r3, r3, #2
 8008c00:	bfcc      	ite	gt
 8008c02:	2500      	movgt	r5, #0
 8008c04:	2501      	movle	r5, #1
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	f200 8087 	bhi.w	8008d1a <_dtoa_r+0x30a>
 8008c0c:	e8df f003 	tbb	[pc, r3]
 8008c10:	59383a2d 	.word	0x59383a2d
 8008c14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c18:	441d      	add	r5, r3
 8008c1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	bfc1      	itttt	gt
 8008c22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008c2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c32:	bfda      	itte	le
 8008c34:	f1c3 0320 	rsble	r3, r3, #32
 8008c38:	fa06 f003 	lslle.w	r0, r6, r3
 8008c3c:	4318      	orrgt	r0, r3
 8008c3e:	f7f7 fc61 	bl	8000504 <__aeabi_ui2d>
 8008c42:	2301      	movs	r3, #1
 8008c44:	4606      	mov	r6, r0
 8008c46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c4a:	3d01      	subs	r5, #1
 8008c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c4e:	e76a      	b.n	8008b26 <_dtoa_r+0x116>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e7b2      	b.n	8008bba <_dtoa_r+0x1aa>
 8008c54:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c56:	e7b1      	b.n	8008bbc <_dtoa_r+0x1ac>
 8008c58:	9b04      	ldr	r3, [sp, #16]
 8008c5a:	9a00      	ldr	r2, [sp, #0]
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	9304      	str	r3, [sp, #16]
 8008c60:	4253      	negs	r3, r2
 8008c62:	9307      	str	r3, [sp, #28]
 8008c64:	2300      	movs	r3, #0
 8008c66:	930a      	str	r3, [sp, #40]	; 0x28
 8008c68:	e7bf      	b.n	8008bea <_dtoa_r+0x1da>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9308      	str	r3, [sp, #32]
 8008c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dc55      	bgt.n	8008d20 <_dtoa_r+0x310>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c7e:	e00c      	b.n	8008c9a <_dtoa_r+0x28a>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e7f3      	b.n	8008c6c <_dtoa_r+0x25c>
 8008c84:	2300      	movs	r3, #0
 8008c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c88:	9308      	str	r3, [sp, #32]
 8008c8a:	9b00      	ldr	r3, [sp, #0]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	9302      	str	r3, [sp, #8]
 8008c90:	3301      	adds	r3, #1
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	9303      	str	r3, [sp, #12]
 8008c96:	bfb8      	it	lt
 8008c98:	2301      	movlt	r3, #1
 8008c9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	6042      	str	r2, [r0, #4]
 8008ca0:	2204      	movs	r2, #4
 8008ca2:	f102 0614 	add.w	r6, r2, #20
 8008ca6:	429e      	cmp	r6, r3
 8008ca8:	6841      	ldr	r1, [r0, #4]
 8008caa:	d93d      	bls.n	8008d28 <_dtoa_r+0x318>
 8008cac:	4620      	mov	r0, r4
 8008cae:	f001 f983 	bl	8009fb8 <_Balloc>
 8008cb2:	9001      	str	r0, [sp, #4]
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d13b      	bne.n	8008d30 <_dtoa_r+0x320>
 8008cb8:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <_dtoa_r+0x2f0>)
 8008cba:	4602      	mov	r2, r0
 8008cbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cc0:	e6c0      	b.n	8008a44 <_dtoa_r+0x34>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7df      	b.n	8008c86 <_dtoa_r+0x276>
 8008cc6:	bf00      	nop
 8008cc8:	636f4361 	.word	0x636f4361
 8008ccc:	3fd287a7 	.word	0x3fd287a7
 8008cd0:	8b60c8b3 	.word	0x8b60c8b3
 8008cd4:	3fc68a28 	.word	0x3fc68a28
 8008cd8:	509f79fb 	.word	0x509f79fb
 8008cdc:	3fd34413 	.word	0x3fd34413
 8008ce0:	0800bf66 	.word	0x0800bf66
 8008ce4:	0800bf7d 	.word	0x0800bf7d
 8008ce8:	7ff00000 	.word	0x7ff00000
 8008cec:	0800bf62 	.word	0x0800bf62
 8008cf0:	0800bf59 	.word	0x0800bf59
 8008cf4:	0800c1d2 	.word	0x0800c1d2
 8008cf8:	3ff80000 	.word	0x3ff80000
 8008cfc:	0800c0e8 	.word	0x0800c0e8
 8008d00:	0800bfd8 	.word	0x0800bfd8
 8008d04:	2501      	movs	r5, #1
 8008d06:	2300      	movs	r3, #0
 8008d08:	9306      	str	r3, [sp, #24]
 8008d0a:	9508      	str	r5, [sp, #32]
 8008d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	2312      	movs	r3, #18
 8008d18:	e7b0      	b.n	8008c7c <_dtoa_r+0x26c>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	9308      	str	r3, [sp, #32]
 8008d1e:	e7f5      	b.n	8008d0c <_dtoa_r+0x2fc>
 8008d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d26:	e7b8      	b.n	8008c9a <_dtoa_r+0x28a>
 8008d28:	3101      	adds	r1, #1
 8008d2a:	6041      	str	r1, [r0, #4]
 8008d2c:	0052      	lsls	r2, r2, #1
 8008d2e:	e7b8      	b.n	8008ca2 <_dtoa_r+0x292>
 8008d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d32:	9a01      	ldr	r2, [sp, #4]
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	2b0e      	cmp	r3, #14
 8008d3a:	f200 809d 	bhi.w	8008e78 <_dtoa_r+0x468>
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	f000 809a 	beq.w	8008e78 <_dtoa_r+0x468>
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	dd32      	ble.n	8008db0 <_dtoa_r+0x3a0>
 8008d4a:	4ab7      	ldr	r2, [pc, #732]	; (8009028 <_dtoa_r+0x618>)
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d58:	9b00      	ldr	r3, [sp, #0]
 8008d5a:	05d8      	lsls	r0, r3, #23
 8008d5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d60:	d516      	bpl.n	8008d90 <_dtoa_r+0x380>
 8008d62:	4bb2      	ldr	r3, [pc, #712]	; (800902c <_dtoa_r+0x61c>)
 8008d64:	ec51 0b19 	vmov	r0, r1, d9
 8008d68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d6c:	f7f7 fd6e 	bl	800084c <__aeabi_ddiv>
 8008d70:	f007 070f 	and.w	r7, r7, #15
 8008d74:	4682      	mov	sl, r0
 8008d76:	468b      	mov	fp, r1
 8008d78:	2503      	movs	r5, #3
 8008d7a:	4eac      	ldr	r6, [pc, #688]	; (800902c <_dtoa_r+0x61c>)
 8008d7c:	b957      	cbnz	r7, 8008d94 <_dtoa_r+0x384>
 8008d7e:	4642      	mov	r2, r8
 8008d80:	464b      	mov	r3, r9
 8008d82:	4650      	mov	r0, sl
 8008d84:	4659      	mov	r1, fp
 8008d86:	f7f7 fd61 	bl	800084c <__aeabi_ddiv>
 8008d8a:	4682      	mov	sl, r0
 8008d8c:	468b      	mov	fp, r1
 8008d8e:	e028      	b.n	8008de2 <_dtoa_r+0x3d2>
 8008d90:	2502      	movs	r5, #2
 8008d92:	e7f2      	b.n	8008d7a <_dtoa_r+0x36a>
 8008d94:	07f9      	lsls	r1, r7, #31
 8008d96:	d508      	bpl.n	8008daa <_dtoa_r+0x39a>
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008da0:	f7f7 fc2a 	bl	80005f8 <__aeabi_dmul>
 8008da4:	3501      	adds	r5, #1
 8008da6:	4680      	mov	r8, r0
 8008da8:	4689      	mov	r9, r1
 8008daa:	107f      	asrs	r7, r7, #1
 8008dac:	3608      	adds	r6, #8
 8008dae:	e7e5      	b.n	8008d7c <_dtoa_r+0x36c>
 8008db0:	f000 809b 	beq.w	8008eea <_dtoa_r+0x4da>
 8008db4:	9b00      	ldr	r3, [sp, #0]
 8008db6:	4f9d      	ldr	r7, [pc, #628]	; (800902c <_dtoa_r+0x61c>)
 8008db8:	425e      	negs	r6, r3
 8008dba:	4b9b      	ldr	r3, [pc, #620]	; (8009028 <_dtoa_r+0x618>)
 8008dbc:	f006 020f 	and.w	r2, r6, #15
 8008dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	ec51 0b19 	vmov	r0, r1, d9
 8008dcc:	f7f7 fc14 	bl	80005f8 <__aeabi_dmul>
 8008dd0:	1136      	asrs	r6, r6, #4
 8008dd2:	4682      	mov	sl, r0
 8008dd4:	468b      	mov	fp, r1
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2502      	movs	r5, #2
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	d17a      	bne.n	8008ed4 <_dtoa_r+0x4c4>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1d3      	bne.n	8008d8a <_dtoa_r+0x37a>
 8008de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8082 	beq.w	8008eee <_dtoa_r+0x4de>
 8008dea:	4b91      	ldr	r3, [pc, #580]	; (8009030 <_dtoa_r+0x620>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	4650      	mov	r0, sl
 8008df0:	4659      	mov	r1, fp
 8008df2:	f7f7 fe73 	bl	8000adc <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d079      	beq.n	8008eee <_dtoa_r+0x4de>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d076      	beq.n	8008eee <_dtoa_r+0x4de>
 8008e00:	9b02      	ldr	r3, [sp, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dd36      	ble.n	8008e74 <_dtoa_r+0x464>
 8008e06:	9b00      	ldr	r3, [sp, #0]
 8008e08:	4650      	mov	r0, sl
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	1e5f      	subs	r7, r3, #1
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4b88      	ldr	r3, [pc, #544]	; (8009034 <_dtoa_r+0x624>)
 8008e12:	f7f7 fbf1 	bl	80005f8 <__aeabi_dmul>
 8008e16:	9e02      	ldr	r6, [sp, #8]
 8008e18:	4682      	mov	sl, r0
 8008e1a:	468b      	mov	fp, r1
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7f7 fb80 	bl	8000524 <__aeabi_i2d>
 8008e24:	4652      	mov	r2, sl
 8008e26:	465b      	mov	r3, fp
 8008e28:	f7f7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8008e2c:	4b82      	ldr	r3, [pc, #520]	; (8009038 <_dtoa_r+0x628>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f7f7 fa2c 	bl	800028c <__adddf3>
 8008e34:	46d0      	mov	r8, sl
 8008e36:	46d9      	mov	r9, fp
 8008e38:	4682      	mov	sl, r0
 8008e3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	d158      	bne.n	8008ef4 <_dtoa_r+0x4e4>
 8008e42:	4b7e      	ldr	r3, [pc, #504]	; (800903c <_dtoa_r+0x62c>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	4640      	mov	r0, r8
 8008e48:	4649      	mov	r1, r9
 8008e4a:	f7f7 fa1d 	bl	8000288 <__aeabi_dsub>
 8008e4e:	4652      	mov	r2, sl
 8008e50:	465b      	mov	r3, fp
 8008e52:	4680      	mov	r8, r0
 8008e54:	4689      	mov	r9, r1
 8008e56:	f7f7 fe5f 	bl	8000b18 <__aeabi_dcmpgt>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f040 8295 	bne.w	800938a <_dtoa_r+0x97a>
 8008e60:	4652      	mov	r2, sl
 8008e62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e66:	4640      	mov	r0, r8
 8008e68:	4649      	mov	r1, r9
 8008e6a:	f7f7 fe37 	bl	8000adc <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f040 8289 	bne.w	8009386 <_dtoa_r+0x976>
 8008e74:	ec5b ab19 	vmov	sl, fp, d9
 8008e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f2c0 8148 	blt.w	8009110 <_dtoa_r+0x700>
 8008e80:	9a00      	ldr	r2, [sp, #0]
 8008e82:	2a0e      	cmp	r2, #14
 8008e84:	f300 8144 	bgt.w	8009110 <_dtoa_r+0x700>
 8008e88:	4b67      	ldr	r3, [pc, #412]	; (8009028 <_dtoa_r+0x618>)
 8008e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f280 80d5 	bge.w	8009044 <_dtoa_r+0x634>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f300 80d1 	bgt.w	8009044 <_dtoa_r+0x634>
 8008ea2:	f040 826f 	bne.w	8009384 <_dtoa_r+0x974>
 8008ea6:	4b65      	ldr	r3, [pc, #404]	; (800903c <_dtoa_r+0x62c>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f7f7 fba3 	bl	80005f8 <__aeabi_dmul>
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	465b      	mov	r3, fp
 8008eb6:	f7f7 fe25 	bl	8000b04 <__aeabi_dcmpge>
 8008eba:	9e03      	ldr	r6, [sp, #12]
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f040 8245 	bne.w	800934e <_dtoa_r+0x93e>
 8008ec4:	9d01      	ldr	r5, [sp, #4]
 8008ec6:	2331      	movs	r3, #49	; 0x31
 8008ec8:	f805 3b01 	strb.w	r3, [r5], #1
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	e240      	b.n	8009356 <_dtoa_r+0x946>
 8008ed4:	07f2      	lsls	r2, r6, #31
 8008ed6:	d505      	bpl.n	8008ee4 <_dtoa_r+0x4d4>
 8008ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008edc:	f7f7 fb8c 	bl	80005f8 <__aeabi_dmul>
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	1076      	asrs	r6, r6, #1
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	e777      	b.n	8008dda <_dtoa_r+0x3ca>
 8008eea:	2502      	movs	r5, #2
 8008eec:	e779      	b.n	8008de2 <_dtoa_r+0x3d2>
 8008eee:	9f00      	ldr	r7, [sp, #0]
 8008ef0:	9e03      	ldr	r6, [sp, #12]
 8008ef2:	e794      	b.n	8008e1e <_dtoa_r+0x40e>
 8008ef4:	9901      	ldr	r1, [sp, #4]
 8008ef6:	4b4c      	ldr	r3, [pc, #304]	; (8009028 <_dtoa_r+0x618>)
 8008ef8:	4431      	add	r1, r6
 8008efa:	910d      	str	r1, [sp, #52]	; 0x34
 8008efc:	9908      	ldr	r1, [sp, #32]
 8008efe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f06:	2900      	cmp	r1, #0
 8008f08:	d043      	beq.n	8008f92 <_dtoa_r+0x582>
 8008f0a:	494d      	ldr	r1, [pc, #308]	; (8009040 <_dtoa_r+0x630>)
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	f7f7 fc9d 	bl	800084c <__aeabi_ddiv>
 8008f12:	4652      	mov	r2, sl
 8008f14:	465b      	mov	r3, fp
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	9d01      	ldr	r5, [sp, #4]
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	4649      	mov	r1, r9
 8008f22:	4640      	mov	r0, r8
 8008f24:	f7f7 fe18 	bl	8000b58 <__aeabi_d2iz>
 8008f28:	4606      	mov	r6, r0
 8008f2a:	f7f7 fafb 	bl	8000524 <__aeabi_i2d>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 f9a7 	bl	8000288 <__aeabi_dsub>
 8008f3a:	3630      	adds	r6, #48	; 0x30
 8008f3c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f40:	4652      	mov	r2, sl
 8008f42:	465b      	mov	r3, fp
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	f7f7 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d163      	bne.n	8009018 <_dtoa_r+0x608>
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	4936      	ldr	r1, [pc, #216]	; (8009030 <_dtoa_r+0x620>)
 8008f56:	2000      	movs	r0, #0
 8008f58:	f7f7 f996 	bl	8000288 <__aeabi_dsub>
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	465b      	mov	r3, fp
 8008f60:	f7f7 fdbc 	bl	8000adc <__aeabi_dcmplt>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f040 80b5 	bne.w	80090d4 <_dtoa_r+0x6c4>
 8008f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f6c:	429d      	cmp	r5, r3
 8008f6e:	d081      	beq.n	8008e74 <_dtoa_r+0x464>
 8008f70:	4b30      	ldr	r3, [pc, #192]	; (8009034 <_dtoa_r+0x624>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	4650      	mov	r0, sl
 8008f76:	4659      	mov	r1, fp
 8008f78:	f7f7 fb3e 	bl	80005f8 <__aeabi_dmul>
 8008f7c:	4b2d      	ldr	r3, [pc, #180]	; (8009034 <_dtoa_r+0x624>)
 8008f7e:	4682      	mov	sl, r0
 8008f80:	468b      	mov	fp, r1
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	2200      	movs	r2, #0
 8008f88:	f7f7 fb36 	bl	80005f8 <__aeabi_dmul>
 8008f8c:	4680      	mov	r8, r0
 8008f8e:	4689      	mov	r9, r1
 8008f90:	e7c6      	b.n	8008f20 <_dtoa_r+0x510>
 8008f92:	4650      	mov	r0, sl
 8008f94:	4659      	mov	r1, fp
 8008f96:	f7f7 fb2f 	bl	80005f8 <__aeabi_dmul>
 8008f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f9c:	9d01      	ldr	r5, [sp, #4]
 8008f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	468b      	mov	fp, r1
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	f7f7 fdd6 	bl	8000b58 <__aeabi_d2iz>
 8008fac:	4606      	mov	r6, r0
 8008fae:	f7f7 fab9 	bl	8000524 <__aeabi_i2d>
 8008fb2:	3630      	adds	r6, #48	; 0x30
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4640      	mov	r0, r8
 8008fba:	4649      	mov	r1, r9
 8008fbc:	f7f7 f964 	bl	8000288 <__aeabi_dsub>
 8008fc0:	f805 6b01 	strb.w	r6, [r5], #1
 8008fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	4680      	mov	r8, r0
 8008fca:	4689      	mov	r9, r1
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	d124      	bne.n	800901c <_dtoa_r+0x60c>
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <_dtoa_r+0x630>)
 8008fd4:	4650      	mov	r0, sl
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	f7f7 f958 	bl	800028c <__adddf3>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	f7f7 fd98 	bl	8000b18 <__aeabi_dcmpgt>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d173      	bne.n	80090d4 <_dtoa_r+0x6c4>
 8008fec:	4652      	mov	r2, sl
 8008fee:	465b      	mov	r3, fp
 8008ff0:	4913      	ldr	r1, [pc, #76]	; (8009040 <_dtoa_r+0x630>)
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f7f7 f948 	bl	8000288 <__aeabi_dsub>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	4649      	mov	r1, r9
 8009000:	f7f7 fd6c 	bl	8000adc <__aeabi_dcmplt>
 8009004:	2800      	cmp	r0, #0
 8009006:	f43f af35 	beq.w	8008e74 <_dtoa_r+0x464>
 800900a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800900c:	1e6b      	subs	r3, r5, #1
 800900e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009010:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009014:	2b30      	cmp	r3, #48	; 0x30
 8009016:	d0f8      	beq.n	800900a <_dtoa_r+0x5fa>
 8009018:	9700      	str	r7, [sp, #0]
 800901a:	e049      	b.n	80090b0 <_dtoa_r+0x6a0>
 800901c:	4b05      	ldr	r3, [pc, #20]	; (8009034 <_dtoa_r+0x624>)
 800901e:	f7f7 faeb 	bl	80005f8 <__aeabi_dmul>
 8009022:	4680      	mov	r8, r0
 8009024:	4689      	mov	r9, r1
 8009026:	e7bd      	b.n	8008fa4 <_dtoa_r+0x594>
 8009028:	0800c0e8 	.word	0x0800c0e8
 800902c:	0800c0c0 	.word	0x0800c0c0
 8009030:	3ff00000 	.word	0x3ff00000
 8009034:	40240000 	.word	0x40240000
 8009038:	401c0000 	.word	0x401c0000
 800903c:	40140000 	.word	0x40140000
 8009040:	3fe00000 	.word	0x3fe00000
 8009044:	9d01      	ldr	r5, [sp, #4]
 8009046:	4656      	mov	r6, sl
 8009048:	465f      	mov	r7, fp
 800904a:	4642      	mov	r2, r8
 800904c:	464b      	mov	r3, r9
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fbfb 	bl	800084c <__aeabi_ddiv>
 8009056:	f7f7 fd7f 	bl	8000b58 <__aeabi_d2iz>
 800905a:	4682      	mov	sl, r0
 800905c:	f7f7 fa62 	bl	8000524 <__aeabi_i2d>
 8009060:	4642      	mov	r2, r8
 8009062:	464b      	mov	r3, r9
 8009064:	f7f7 fac8 	bl	80005f8 <__aeabi_dmul>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4630      	mov	r0, r6
 800906e:	4639      	mov	r1, r7
 8009070:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009074:	f7f7 f908 	bl	8000288 <__aeabi_dsub>
 8009078:	f805 6b01 	strb.w	r6, [r5], #1
 800907c:	9e01      	ldr	r6, [sp, #4]
 800907e:	9f03      	ldr	r7, [sp, #12]
 8009080:	1bae      	subs	r6, r5, r6
 8009082:	42b7      	cmp	r7, r6
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	d135      	bne.n	80090f6 <_dtoa_r+0x6e6>
 800908a:	f7f7 f8ff 	bl	800028c <__adddf3>
 800908e:	4642      	mov	r2, r8
 8009090:	464b      	mov	r3, r9
 8009092:	4606      	mov	r6, r0
 8009094:	460f      	mov	r7, r1
 8009096:	f7f7 fd3f 	bl	8000b18 <__aeabi_dcmpgt>
 800909a:	b9d0      	cbnz	r0, 80090d2 <_dtoa_r+0x6c2>
 800909c:	4642      	mov	r2, r8
 800909e:	464b      	mov	r3, r9
 80090a0:	4630      	mov	r0, r6
 80090a2:	4639      	mov	r1, r7
 80090a4:	f7f7 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80090a8:	b110      	cbz	r0, 80090b0 <_dtoa_r+0x6a0>
 80090aa:	f01a 0f01 	tst.w	sl, #1
 80090ae:	d110      	bne.n	80090d2 <_dtoa_r+0x6c2>
 80090b0:	4620      	mov	r0, r4
 80090b2:	ee18 1a10 	vmov	r1, s16
 80090b6:	f000 ffbf 	bl	800a038 <_Bfree>
 80090ba:	2300      	movs	r3, #0
 80090bc:	9800      	ldr	r0, [sp, #0]
 80090be:	702b      	strb	r3, [r5, #0]
 80090c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090c2:	3001      	adds	r0, #1
 80090c4:	6018      	str	r0, [r3, #0]
 80090c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f43f acf1 	beq.w	8008ab0 <_dtoa_r+0xa0>
 80090ce:	601d      	str	r5, [r3, #0]
 80090d0:	e4ee      	b.n	8008ab0 <_dtoa_r+0xa0>
 80090d2:	9f00      	ldr	r7, [sp, #0]
 80090d4:	462b      	mov	r3, r5
 80090d6:	461d      	mov	r5, r3
 80090d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090dc:	2a39      	cmp	r2, #57	; 0x39
 80090de:	d106      	bne.n	80090ee <_dtoa_r+0x6de>
 80090e0:	9a01      	ldr	r2, [sp, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d1f7      	bne.n	80090d6 <_dtoa_r+0x6c6>
 80090e6:	9901      	ldr	r1, [sp, #4]
 80090e8:	2230      	movs	r2, #48	; 0x30
 80090ea:	3701      	adds	r7, #1
 80090ec:	700a      	strb	r2, [r1, #0]
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	3201      	adds	r2, #1
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	e790      	b.n	8009018 <_dtoa_r+0x608>
 80090f6:	4ba6      	ldr	r3, [pc, #664]	; (8009390 <_dtoa_r+0x980>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	f7f7 fa7d 	bl	80005f8 <__aeabi_dmul>
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	f7f7 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800910a:	2800      	cmp	r0, #0
 800910c:	d09d      	beq.n	800904a <_dtoa_r+0x63a>
 800910e:	e7cf      	b.n	80090b0 <_dtoa_r+0x6a0>
 8009110:	9a08      	ldr	r2, [sp, #32]
 8009112:	2a00      	cmp	r2, #0
 8009114:	f000 80d7 	beq.w	80092c6 <_dtoa_r+0x8b6>
 8009118:	9a06      	ldr	r2, [sp, #24]
 800911a:	2a01      	cmp	r2, #1
 800911c:	f300 80ba 	bgt.w	8009294 <_dtoa_r+0x884>
 8009120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009122:	2a00      	cmp	r2, #0
 8009124:	f000 80b2 	beq.w	800928c <_dtoa_r+0x87c>
 8009128:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800912c:	9e07      	ldr	r6, [sp, #28]
 800912e:	9d04      	ldr	r5, [sp, #16]
 8009130:	9a04      	ldr	r2, [sp, #16]
 8009132:	441a      	add	r2, r3
 8009134:	9204      	str	r2, [sp, #16]
 8009136:	9a05      	ldr	r2, [sp, #20]
 8009138:	2101      	movs	r1, #1
 800913a:	441a      	add	r2, r3
 800913c:	4620      	mov	r0, r4
 800913e:	9205      	str	r2, [sp, #20]
 8009140:	f001 f87c 	bl	800a23c <__i2b>
 8009144:	4607      	mov	r7, r0
 8009146:	2d00      	cmp	r5, #0
 8009148:	dd0c      	ble.n	8009164 <_dtoa_r+0x754>
 800914a:	9b05      	ldr	r3, [sp, #20]
 800914c:	2b00      	cmp	r3, #0
 800914e:	dd09      	ble.n	8009164 <_dtoa_r+0x754>
 8009150:	42ab      	cmp	r3, r5
 8009152:	9a04      	ldr	r2, [sp, #16]
 8009154:	bfa8      	it	ge
 8009156:	462b      	movge	r3, r5
 8009158:	1ad2      	subs	r2, r2, r3
 800915a:	9204      	str	r2, [sp, #16]
 800915c:	9a05      	ldr	r2, [sp, #20]
 800915e:	1aed      	subs	r5, r5, r3
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	9305      	str	r3, [sp, #20]
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	b31b      	cbz	r3, 80091b0 <_dtoa_r+0x7a0>
 8009168:	9b08      	ldr	r3, [sp, #32]
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 80af 	beq.w	80092ce <_dtoa_r+0x8be>
 8009170:	2e00      	cmp	r6, #0
 8009172:	dd13      	ble.n	800919c <_dtoa_r+0x78c>
 8009174:	4639      	mov	r1, r7
 8009176:	4632      	mov	r2, r6
 8009178:	4620      	mov	r0, r4
 800917a:	f001 f91f 	bl	800a3bc <__pow5mult>
 800917e:	ee18 2a10 	vmov	r2, s16
 8009182:	4601      	mov	r1, r0
 8009184:	4607      	mov	r7, r0
 8009186:	4620      	mov	r0, r4
 8009188:	f001 f86e 	bl	800a268 <__multiply>
 800918c:	ee18 1a10 	vmov	r1, s16
 8009190:	4680      	mov	r8, r0
 8009192:	4620      	mov	r0, r4
 8009194:	f000 ff50 	bl	800a038 <_Bfree>
 8009198:	ee08 8a10 	vmov	s16, r8
 800919c:	9b07      	ldr	r3, [sp, #28]
 800919e:	1b9a      	subs	r2, r3, r6
 80091a0:	d006      	beq.n	80091b0 <_dtoa_r+0x7a0>
 80091a2:	ee18 1a10 	vmov	r1, s16
 80091a6:	4620      	mov	r0, r4
 80091a8:	f001 f908 	bl	800a3bc <__pow5mult>
 80091ac:	ee08 0a10 	vmov	s16, r0
 80091b0:	2101      	movs	r1, #1
 80091b2:	4620      	mov	r0, r4
 80091b4:	f001 f842 	bl	800a23c <__i2b>
 80091b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	4606      	mov	r6, r0
 80091be:	f340 8088 	ble.w	80092d2 <_dtoa_r+0x8c2>
 80091c2:	461a      	mov	r2, r3
 80091c4:	4601      	mov	r1, r0
 80091c6:	4620      	mov	r0, r4
 80091c8:	f001 f8f8 	bl	800a3bc <__pow5mult>
 80091cc:	9b06      	ldr	r3, [sp, #24]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	4606      	mov	r6, r0
 80091d2:	f340 8081 	ble.w	80092d8 <_dtoa_r+0x8c8>
 80091d6:	f04f 0800 	mov.w	r8, #0
 80091da:	6933      	ldr	r3, [r6, #16]
 80091dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091e0:	6918      	ldr	r0, [r3, #16]
 80091e2:	f000 ffdb 	bl	800a19c <__hi0bits>
 80091e6:	f1c0 0020 	rsb	r0, r0, #32
 80091ea:	9b05      	ldr	r3, [sp, #20]
 80091ec:	4418      	add	r0, r3
 80091ee:	f010 001f 	ands.w	r0, r0, #31
 80091f2:	f000 8092 	beq.w	800931a <_dtoa_r+0x90a>
 80091f6:	f1c0 0320 	rsb	r3, r0, #32
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	f340 808a 	ble.w	8009314 <_dtoa_r+0x904>
 8009200:	f1c0 001c 	rsb	r0, r0, #28
 8009204:	9b04      	ldr	r3, [sp, #16]
 8009206:	4403      	add	r3, r0
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	9b05      	ldr	r3, [sp, #20]
 800920c:	4403      	add	r3, r0
 800920e:	4405      	add	r5, r0
 8009210:	9305      	str	r3, [sp, #20]
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	dd07      	ble.n	8009228 <_dtoa_r+0x818>
 8009218:	ee18 1a10 	vmov	r1, s16
 800921c:	461a      	mov	r2, r3
 800921e:	4620      	mov	r0, r4
 8009220:	f001 f926 	bl	800a470 <__lshift>
 8009224:	ee08 0a10 	vmov	s16, r0
 8009228:	9b05      	ldr	r3, [sp, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	dd05      	ble.n	800923a <_dtoa_r+0x82a>
 800922e:	4631      	mov	r1, r6
 8009230:	461a      	mov	r2, r3
 8009232:	4620      	mov	r0, r4
 8009234:	f001 f91c 	bl	800a470 <__lshift>
 8009238:	4606      	mov	r6, r0
 800923a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d06e      	beq.n	800931e <_dtoa_r+0x90e>
 8009240:	ee18 0a10 	vmov	r0, s16
 8009244:	4631      	mov	r1, r6
 8009246:	f001 f983 	bl	800a550 <__mcmp>
 800924a:	2800      	cmp	r0, #0
 800924c:	da67      	bge.n	800931e <_dtoa_r+0x90e>
 800924e:	9b00      	ldr	r3, [sp, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	ee18 1a10 	vmov	r1, s16
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	220a      	movs	r2, #10
 800925a:	2300      	movs	r3, #0
 800925c:	4620      	mov	r0, r4
 800925e:	f000 ff0d 	bl	800a07c <__multadd>
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	ee08 0a10 	vmov	s16, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 81b1 	beq.w	80095d0 <_dtoa_r+0xbc0>
 800926e:	2300      	movs	r3, #0
 8009270:	4639      	mov	r1, r7
 8009272:	220a      	movs	r2, #10
 8009274:	4620      	mov	r0, r4
 8009276:	f000 ff01 	bl	800a07c <__multadd>
 800927a:	9b02      	ldr	r3, [sp, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	4607      	mov	r7, r0
 8009280:	f300 808e 	bgt.w	80093a0 <_dtoa_r+0x990>
 8009284:	9b06      	ldr	r3, [sp, #24]
 8009286:	2b02      	cmp	r3, #2
 8009288:	dc51      	bgt.n	800932e <_dtoa_r+0x91e>
 800928a:	e089      	b.n	80093a0 <_dtoa_r+0x990>
 800928c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800928e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009292:	e74b      	b.n	800912c <_dtoa_r+0x71c>
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	1e5e      	subs	r6, r3, #1
 8009298:	9b07      	ldr	r3, [sp, #28]
 800929a:	42b3      	cmp	r3, r6
 800929c:	bfbf      	itttt	lt
 800929e:	9b07      	ldrlt	r3, [sp, #28]
 80092a0:	9607      	strlt	r6, [sp, #28]
 80092a2:	1af2      	sublt	r2, r6, r3
 80092a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80092a6:	bfb6      	itet	lt
 80092a8:	189b      	addlt	r3, r3, r2
 80092aa:	1b9e      	subge	r6, r3, r6
 80092ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	bfb8      	it	lt
 80092b2:	2600      	movlt	r6, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bfb7      	itett	lt
 80092b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80092bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80092c0:	1a9d      	sublt	r5, r3, r2
 80092c2:	2300      	movlt	r3, #0
 80092c4:	e734      	b.n	8009130 <_dtoa_r+0x720>
 80092c6:	9e07      	ldr	r6, [sp, #28]
 80092c8:	9d04      	ldr	r5, [sp, #16]
 80092ca:	9f08      	ldr	r7, [sp, #32]
 80092cc:	e73b      	b.n	8009146 <_dtoa_r+0x736>
 80092ce:	9a07      	ldr	r2, [sp, #28]
 80092d0:	e767      	b.n	80091a2 <_dtoa_r+0x792>
 80092d2:	9b06      	ldr	r3, [sp, #24]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	dc18      	bgt.n	800930a <_dtoa_r+0x8fa>
 80092d8:	f1ba 0f00 	cmp.w	sl, #0
 80092dc:	d115      	bne.n	800930a <_dtoa_r+0x8fa>
 80092de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092e2:	b993      	cbnz	r3, 800930a <_dtoa_r+0x8fa>
 80092e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092e8:	0d1b      	lsrs	r3, r3, #20
 80092ea:	051b      	lsls	r3, r3, #20
 80092ec:	b183      	cbz	r3, 8009310 <_dtoa_r+0x900>
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	3301      	adds	r3, #1
 80092f2:	9304      	str	r3, [sp, #16]
 80092f4:	9b05      	ldr	r3, [sp, #20]
 80092f6:	3301      	adds	r3, #1
 80092f8:	9305      	str	r3, [sp, #20]
 80092fa:	f04f 0801 	mov.w	r8, #1
 80092fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009300:	2b00      	cmp	r3, #0
 8009302:	f47f af6a 	bne.w	80091da <_dtoa_r+0x7ca>
 8009306:	2001      	movs	r0, #1
 8009308:	e76f      	b.n	80091ea <_dtoa_r+0x7da>
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	e7f6      	b.n	80092fe <_dtoa_r+0x8ee>
 8009310:	4698      	mov	r8, r3
 8009312:	e7f4      	b.n	80092fe <_dtoa_r+0x8ee>
 8009314:	f43f af7d 	beq.w	8009212 <_dtoa_r+0x802>
 8009318:	4618      	mov	r0, r3
 800931a:	301c      	adds	r0, #28
 800931c:	e772      	b.n	8009204 <_dtoa_r+0x7f4>
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	dc37      	bgt.n	8009394 <_dtoa_r+0x984>
 8009324:	9b06      	ldr	r3, [sp, #24]
 8009326:	2b02      	cmp	r3, #2
 8009328:	dd34      	ble.n	8009394 <_dtoa_r+0x984>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	9302      	str	r3, [sp, #8]
 800932e:	9b02      	ldr	r3, [sp, #8]
 8009330:	b96b      	cbnz	r3, 800934e <_dtoa_r+0x93e>
 8009332:	4631      	mov	r1, r6
 8009334:	2205      	movs	r2, #5
 8009336:	4620      	mov	r0, r4
 8009338:	f000 fea0 	bl	800a07c <__multadd>
 800933c:	4601      	mov	r1, r0
 800933e:	4606      	mov	r6, r0
 8009340:	ee18 0a10 	vmov	r0, s16
 8009344:	f001 f904 	bl	800a550 <__mcmp>
 8009348:	2800      	cmp	r0, #0
 800934a:	f73f adbb 	bgt.w	8008ec4 <_dtoa_r+0x4b4>
 800934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009350:	9d01      	ldr	r5, [sp, #4]
 8009352:	43db      	mvns	r3, r3
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	4631      	mov	r1, r6
 800935c:	4620      	mov	r0, r4
 800935e:	f000 fe6b 	bl	800a038 <_Bfree>
 8009362:	2f00      	cmp	r7, #0
 8009364:	f43f aea4 	beq.w	80090b0 <_dtoa_r+0x6a0>
 8009368:	f1b8 0f00 	cmp.w	r8, #0
 800936c:	d005      	beq.n	800937a <_dtoa_r+0x96a>
 800936e:	45b8      	cmp	r8, r7
 8009370:	d003      	beq.n	800937a <_dtoa_r+0x96a>
 8009372:	4641      	mov	r1, r8
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fe5f 	bl	800a038 <_Bfree>
 800937a:	4639      	mov	r1, r7
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fe5b 	bl	800a038 <_Bfree>
 8009382:	e695      	b.n	80090b0 <_dtoa_r+0x6a0>
 8009384:	2600      	movs	r6, #0
 8009386:	4637      	mov	r7, r6
 8009388:	e7e1      	b.n	800934e <_dtoa_r+0x93e>
 800938a:	9700      	str	r7, [sp, #0]
 800938c:	4637      	mov	r7, r6
 800938e:	e599      	b.n	8008ec4 <_dtoa_r+0x4b4>
 8009390:	40240000 	.word	0x40240000
 8009394:	9b08      	ldr	r3, [sp, #32]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 80ca 	beq.w	8009530 <_dtoa_r+0xb20>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	2d00      	cmp	r5, #0
 80093a2:	dd05      	ble.n	80093b0 <_dtoa_r+0x9a0>
 80093a4:	4639      	mov	r1, r7
 80093a6:	462a      	mov	r2, r5
 80093a8:	4620      	mov	r0, r4
 80093aa:	f001 f861 	bl	800a470 <__lshift>
 80093ae:	4607      	mov	r7, r0
 80093b0:	f1b8 0f00 	cmp.w	r8, #0
 80093b4:	d05b      	beq.n	800946e <_dtoa_r+0xa5e>
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fdfd 	bl	8009fb8 <_Balloc>
 80093be:	4605      	mov	r5, r0
 80093c0:	b928      	cbnz	r0, 80093ce <_dtoa_r+0x9be>
 80093c2:	4b87      	ldr	r3, [pc, #540]	; (80095e0 <_dtoa_r+0xbd0>)
 80093c4:	4602      	mov	r2, r0
 80093c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093ca:	f7ff bb3b 	b.w	8008a44 <_dtoa_r+0x34>
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	3202      	adds	r2, #2
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	f107 010c 	add.w	r1, r7, #12
 80093d8:	300c      	adds	r0, #12
 80093da:	f7fd fa66 	bl	80068aa <memcpy>
 80093de:	2201      	movs	r2, #1
 80093e0:	4629      	mov	r1, r5
 80093e2:	4620      	mov	r0, r4
 80093e4:	f001 f844 	bl	800a470 <__lshift>
 80093e8:	9b01      	ldr	r3, [sp, #4]
 80093ea:	f103 0901 	add.w	r9, r3, #1
 80093ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093f2:	4413      	add	r3, r2
 80093f4:	9305      	str	r3, [sp, #20]
 80093f6:	f00a 0301 	and.w	r3, sl, #1
 80093fa:	46b8      	mov	r8, r7
 80093fc:	9304      	str	r3, [sp, #16]
 80093fe:	4607      	mov	r7, r0
 8009400:	4631      	mov	r1, r6
 8009402:	ee18 0a10 	vmov	r0, s16
 8009406:	f7ff fa75 	bl	80088f4 <quorem>
 800940a:	4641      	mov	r1, r8
 800940c:	9002      	str	r0, [sp, #8]
 800940e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009412:	ee18 0a10 	vmov	r0, s16
 8009416:	f001 f89b 	bl	800a550 <__mcmp>
 800941a:	463a      	mov	r2, r7
 800941c:	9003      	str	r0, [sp, #12]
 800941e:	4631      	mov	r1, r6
 8009420:	4620      	mov	r0, r4
 8009422:	f001 f8b1 	bl	800a588 <__mdiff>
 8009426:	68c2      	ldr	r2, [r0, #12]
 8009428:	f109 3bff 	add.w	fp, r9, #4294967295
 800942c:	4605      	mov	r5, r0
 800942e:	bb02      	cbnz	r2, 8009472 <_dtoa_r+0xa62>
 8009430:	4601      	mov	r1, r0
 8009432:	ee18 0a10 	vmov	r0, s16
 8009436:	f001 f88b 	bl	800a550 <__mcmp>
 800943a:	4602      	mov	r2, r0
 800943c:	4629      	mov	r1, r5
 800943e:	4620      	mov	r0, r4
 8009440:	9207      	str	r2, [sp, #28]
 8009442:	f000 fdf9 	bl	800a038 <_Bfree>
 8009446:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800944a:	ea43 0102 	orr.w	r1, r3, r2
 800944e:	9b04      	ldr	r3, [sp, #16]
 8009450:	430b      	orrs	r3, r1
 8009452:	464d      	mov	r5, r9
 8009454:	d10f      	bne.n	8009476 <_dtoa_r+0xa66>
 8009456:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800945a:	d02a      	beq.n	80094b2 <_dtoa_r+0xaa2>
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	dd02      	ble.n	8009468 <_dtoa_r+0xa58>
 8009462:	9b02      	ldr	r3, [sp, #8]
 8009464:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009468:	f88b a000 	strb.w	sl, [fp]
 800946c:	e775      	b.n	800935a <_dtoa_r+0x94a>
 800946e:	4638      	mov	r0, r7
 8009470:	e7ba      	b.n	80093e8 <_dtoa_r+0x9d8>
 8009472:	2201      	movs	r2, #1
 8009474:	e7e2      	b.n	800943c <_dtoa_r+0xa2c>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	db04      	blt.n	8009486 <_dtoa_r+0xa76>
 800947c:	9906      	ldr	r1, [sp, #24]
 800947e:	430b      	orrs	r3, r1
 8009480:	9904      	ldr	r1, [sp, #16]
 8009482:	430b      	orrs	r3, r1
 8009484:	d122      	bne.n	80094cc <_dtoa_r+0xabc>
 8009486:	2a00      	cmp	r2, #0
 8009488:	ddee      	ble.n	8009468 <_dtoa_r+0xa58>
 800948a:	ee18 1a10 	vmov	r1, s16
 800948e:	2201      	movs	r2, #1
 8009490:	4620      	mov	r0, r4
 8009492:	f000 ffed 	bl	800a470 <__lshift>
 8009496:	4631      	mov	r1, r6
 8009498:	ee08 0a10 	vmov	s16, r0
 800949c:	f001 f858 	bl	800a550 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	dc03      	bgt.n	80094ac <_dtoa_r+0xa9c>
 80094a4:	d1e0      	bne.n	8009468 <_dtoa_r+0xa58>
 80094a6:	f01a 0f01 	tst.w	sl, #1
 80094aa:	d0dd      	beq.n	8009468 <_dtoa_r+0xa58>
 80094ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094b0:	d1d7      	bne.n	8009462 <_dtoa_r+0xa52>
 80094b2:	2339      	movs	r3, #57	; 0x39
 80094b4:	f88b 3000 	strb.w	r3, [fp]
 80094b8:	462b      	mov	r3, r5
 80094ba:	461d      	mov	r5, r3
 80094bc:	3b01      	subs	r3, #1
 80094be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094c2:	2a39      	cmp	r2, #57	; 0x39
 80094c4:	d071      	beq.n	80095aa <_dtoa_r+0xb9a>
 80094c6:	3201      	adds	r2, #1
 80094c8:	701a      	strb	r2, [r3, #0]
 80094ca:	e746      	b.n	800935a <_dtoa_r+0x94a>
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	dd07      	ble.n	80094e0 <_dtoa_r+0xad0>
 80094d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094d4:	d0ed      	beq.n	80094b2 <_dtoa_r+0xaa2>
 80094d6:	f10a 0301 	add.w	r3, sl, #1
 80094da:	f88b 3000 	strb.w	r3, [fp]
 80094de:	e73c      	b.n	800935a <_dtoa_r+0x94a>
 80094e0:	9b05      	ldr	r3, [sp, #20]
 80094e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80094e6:	4599      	cmp	r9, r3
 80094e8:	d047      	beq.n	800957a <_dtoa_r+0xb6a>
 80094ea:	ee18 1a10 	vmov	r1, s16
 80094ee:	2300      	movs	r3, #0
 80094f0:	220a      	movs	r2, #10
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 fdc2 	bl	800a07c <__multadd>
 80094f8:	45b8      	cmp	r8, r7
 80094fa:	ee08 0a10 	vmov	s16, r0
 80094fe:	f04f 0300 	mov.w	r3, #0
 8009502:	f04f 020a 	mov.w	r2, #10
 8009506:	4641      	mov	r1, r8
 8009508:	4620      	mov	r0, r4
 800950a:	d106      	bne.n	800951a <_dtoa_r+0xb0a>
 800950c:	f000 fdb6 	bl	800a07c <__multadd>
 8009510:	4680      	mov	r8, r0
 8009512:	4607      	mov	r7, r0
 8009514:	f109 0901 	add.w	r9, r9, #1
 8009518:	e772      	b.n	8009400 <_dtoa_r+0x9f0>
 800951a:	f000 fdaf 	bl	800a07c <__multadd>
 800951e:	4639      	mov	r1, r7
 8009520:	4680      	mov	r8, r0
 8009522:	2300      	movs	r3, #0
 8009524:	220a      	movs	r2, #10
 8009526:	4620      	mov	r0, r4
 8009528:	f000 fda8 	bl	800a07c <__multadd>
 800952c:	4607      	mov	r7, r0
 800952e:	e7f1      	b.n	8009514 <_dtoa_r+0xb04>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	9302      	str	r3, [sp, #8]
 8009534:	9d01      	ldr	r5, [sp, #4]
 8009536:	ee18 0a10 	vmov	r0, s16
 800953a:	4631      	mov	r1, r6
 800953c:	f7ff f9da 	bl	80088f4 <quorem>
 8009540:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	f805 ab01 	strb.w	sl, [r5], #1
 800954a:	1aea      	subs	r2, r5, r3
 800954c:	9b02      	ldr	r3, [sp, #8]
 800954e:	4293      	cmp	r3, r2
 8009550:	dd09      	ble.n	8009566 <_dtoa_r+0xb56>
 8009552:	ee18 1a10 	vmov	r1, s16
 8009556:	2300      	movs	r3, #0
 8009558:	220a      	movs	r2, #10
 800955a:	4620      	mov	r0, r4
 800955c:	f000 fd8e 	bl	800a07c <__multadd>
 8009560:	ee08 0a10 	vmov	s16, r0
 8009564:	e7e7      	b.n	8009536 <_dtoa_r+0xb26>
 8009566:	9b02      	ldr	r3, [sp, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	bfc8      	it	gt
 800956c:	461d      	movgt	r5, r3
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	bfd8      	it	le
 8009572:	2501      	movle	r5, #1
 8009574:	441d      	add	r5, r3
 8009576:	f04f 0800 	mov.w	r8, #0
 800957a:	ee18 1a10 	vmov	r1, s16
 800957e:	2201      	movs	r2, #1
 8009580:	4620      	mov	r0, r4
 8009582:	f000 ff75 	bl	800a470 <__lshift>
 8009586:	4631      	mov	r1, r6
 8009588:	ee08 0a10 	vmov	s16, r0
 800958c:	f000 ffe0 	bl	800a550 <__mcmp>
 8009590:	2800      	cmp	r0, #0
 8009592:	dc91      	bgt.n	80094b8 <_dtoa_r+0xaa8>
 8009594:	d102      	bne.n	800959c <_dtoa_r+0xb8c>
 8009596:	f01a 0f01 	tst.w	sl, #1
 800959a:	d18d      	bne.n	80094b8 <_dtoa_r+0xaa8>
 800959c:	462b      	mov	r3, r5
 800959e:	461d      	mov	r5, r3
 80095a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095a4:	2a30      	cmp	r2, #48	; 0x30
 80095a6:	d0fa      	beq.n	800959e <_dtoa_r+0xb8e>
 80095a8:	e6d7      	b.n	800935a <_dtoa_r+0x94a>
 80095aa:	9a01      	ldr	r2, [sp, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d184      	bne.n	80094ba <_dtoa_r+0xaaa>
 80095b0:	9b00      	ldr	r3, [sp, #0]
 80095b2:	3301      	adds	r3, #1
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	2331      	movs	r3, #49	; 0x31
 80095b8:	7013      	strb	r3, [r2, #0]
 80095ba:	e6ce      	b.n	800935a <_dtoa_r+0x94a>
 80095bc:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <_dtoa_r+0xbd4>)
 80095be:	f7ff ba95 	b.w	8008aec <_dtoa_r+0xdc>
 80095c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f47f aa6e 	bne.w	8008aa6 <_dtoa_r+0x96>
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <_dtoa_r+0xbd8>)
 80095cc:	f7ff ba8e 	b.w	8008aec <_dtoa_r+0xdc>
 80095d0:	9b02      	ldr	r3, [sp, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dcae      	bgt.n	8009534 <_dtoa_r+0xb24>
 80095d6:	9b06      	ldr	r3, [sp, #24]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	f73f aea8 	bgt.w	800932e <_dtoa_r+0x91e>
 80095de:	e7a9      	b.n	8009534 <_dtoa_r+0xb24>
 80095e0:	0800bfd8 	.word	0x0800bfd8
 80095e4:	0800c1d1 	.word	0x0800c1d1
 80095e8:	0800bf59 	.word	0x0800bf59

080095ec <__sflush_r>:
 80095ec:	898a      	ldrh	r2, [r1, #12]
 80095ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f2:	4605      	mov	r5, r0
 80095f4:	0710      	lsls	r0, r2, #28
 80095f6:	460c      	mov	r4, r1
 80095f8:	d458      	bmi.n	80096ac <__sflush_r+0xc0>
 80095fa:	684b      	ldr	r3, [r1, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dc05      	bgt.n	800960c <__sflush_r+0x20>
 8009600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009602:	2b00      	cmp	r3, #0
 8009604:	dc02      	bgt.n	800960c <__sflush_r+0x20>
 8009606:	2000      	movs	r0, #0
 8009608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800960e:	2e00      	cmp	r6, #0
 8009610:	d0f9      	beq.n	8009606 <__sflush_r+0x1a>
 8009612:	2300      	movs	r3, #0
 8009614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009618:	682f      	ldr	r7, [r5, #0]
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	d032      	beq.n	8009684 <__sflush_r+0x98>
 800961e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	075a      	lsls	r2, r3, #29
 8009624:	d505      	bpl.n	8009632 <__sflush_r+0x46>
 8009626:	6863      	ldr	r3, [r4, #4]
 8009628:	1ac0      	subs	r0, r0, r3
 800962a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800962c:	b10b      	cbz	r3, 8009632 <__sflush_r+0x46>
 800962e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009630:	1ac0      	subs	r0, r0, r3
 8009632:	2300      	movs	r3, #0
 8009634:	4602      	mov	r2, r0
 8009636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009638:	6a21      	ldr	r1, [r4, #32]
 800963a:	4628      	mov	r0, r5
 800963c:	47b0      	blx	r6
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	d106      	bne.n	8009652 <__sflush_r+0x66>
 8009644:	6829      	ldr	r1, [r5, #0]
 8009646:	291d      	cmp	r1, #29
 8009648:	d82c      	bhi.n	80096a4 <__sflush_r+0xb8>
 800964a:	4a2a      	ldr	r2, [pc, #168]	; (80096f4 <__sflush_r+0x108>)
 800964c:	40ca      	lsrs	r2, r1
 800964e:	07d6      	lsls	r6, r2, #31
 8009650:	d528      	bpl.n	80096a4 <__sflush_r+0xb8>
 8009652:	2200      	movs	r2, #0
 8009654:	6062      	str	r2, [r4, #4]
 8009656:	04d9      	lsls	r1, r3, #19
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	6022      	str	r2, [r4, #0]
 800965c:	d504      	bpl.n	8009668 <__sflush_r+0x7c>
 800965e:	1c42      	adds	r2, r0, #1
 8009660:	d101      	bne.n	8009666 <__sflush_r+0x7a>
 8009662:	682b      	ldr	r3, [r5, #0]
 8009664:	b903      	cbnz	r3, 8009668 <__sflush_r+0x7c>
 8009666:	6560      	str	r0, [r4, #84]	; 0x54
 8009668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800966a:	602f      	str	r7, [r5, #0]
 800966c:	2900      	cmp	r1, #0
 800966e:	d0ca      	beq.n	8009606 <__sflush_r+0x1a>
 8009670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009674:	4299      	cmp	r1, r3
 8009676:	d002      	beq.n	800967e <__sflush_r+0x92>
 8009678:	4628      	mov	r0, r5
 800967a:	f001 f975 	bl	800a968 <_free_r>
 800967e:	2000      	movs	r0, #0
 8009680:	6360      	str	r0, [r4, #52]	; 0x34
 8009682:	e7c1      	b.n	8009608 <__sflush_r+0x1c>
 8009684:	6a21      	ldr	r1, [r4, #32]
 8009686:	2301      	movs	r3, #1
 8009688:	4628      	mov	r0, r5
 800968a:	47b0      	blx	r6
 800968c:	1c41      	adds	r1, r0, #1
 800968e:	d1c7      	bne.n	8009620 <__sflush_r+0x34>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0c4      	beq.n	8009620 <__sflush_r+0x34>
 8009696:	2b1d      	cmp	r3, #29
 8009698:	d001      	beq.n	800969e <__sflush_r+0xb2>
 800969a:	2b16      	cmp	r3, #22
 800969c:	d101      	bne.n	80096a2 <__sflush_r+0xb6>
 800969e:	602f      	str	r7, [r5, #0]
 80096a0:	e7b1      	b.n	8009606 <__sflush_r+0x1a>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	e7ad      	b.n	8009608 <__sflush_r+0x1c>
 80096ac:	690f      	ldr	r7, [r1, #16]
 80096ae:	2f00      	cmp	r7, #0
 80096b0:	d0a9      	beq.n	8009606 <__sflush_r+0x1a>
 80096b2:	0793      	lsls	r3, r2, #30
 80096b4:	680e      	ldr	r6, [r1, #0]
 80096b6:	bf08      	it	eq
 80096b8:	694b      	ldreq	r3, [r1, #20]
 80096ba:	600f      	str	r7, [r1, #0]
 80096bc:	bf18      	it	ne
 80096be:	2300      	movne	r3, #0
 80096c0:	eba6 0807 	sub.w	r8, r6, r7
 80096c4:	608b      	str	r3, [r1, #8]
 80096c6:	f1b8 0f00 	cmp.w	r8, #0
 80096ca:	dd9c      	ble.n	8009606 <__sflush_r+0x1a>
 80096cc:	6a21      	ldr	r1, [r4, #32]
 80096ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096d0:	4643      	mov	r3, r8
 80096d2:	463a      	mov	r2, r7
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b0      	blx	r6
 80096d8:	2800      	cmp	r0, #0
 80096da:	dc06      	bgt.n	80096ea <__sflush_r+0xfe>
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	e78e      	b.n	8009608 <__sflush_r+0x1c>
 80096ea:	4407      	add	r7, r0
 80096ec:	eba8 0800 	sub.w	r8, r8, r0
 80096f0:	e7e9      	b.n	80096c6 <__sflush_r+0xda>
 80096f2:	bf00      	nop
 80096f4:	20400001 	.word	0x20400001

080096f8 <_fflush_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	690b      	ldr	r3, [r1, #16]
 80096fc:	4605      	mov	r5, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	b913      	cbnz	r3, 8009708 <_fflush_r+0x10>
 8009702:	2500      	movs	r5, #0
 8009704:	4628      	mov	r0, r5
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	b118      	cbz	r0, 8009712 <_fflush_r+0x1a>
 800970a:	6983      	ldr	r3, [r0, #24]
 800970c:	b90b      	cbnz	r3, 8009712 <_fflush_r+0x1a>
 800970e:	f7fc ffeb 	bl	80066e8 <__sinit>
 8009712:	4b14      	ldr	r3, [pc, #80]	; (8009764 <_fflush_r+0x6c>)
 8009714:	429c      	cmp	r4, r3
 8009716:	d11b      	bne.n	8009750 <_fflush_r+0x58>
 8009718:	686c      	ldr	r4, [r5, #4]
 800971a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0ef      	beq.n	8009702 <_fflush_r+0xa>
 8009722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009724:	07d0      	lsls	r0, r2, #31
 8009726:	d404      	bmi.n	8009732 <_fflush_r+0x3a>
 8009728:	0599      	lsls	r1, r3, #22
 800972a:	d402      	bmi.n	8009732 <_fflush_r+0x3a>
 800972c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800972e:	f7fd f8ba 	bl	80068a6 <__retarget_lock_acquire_recursive>
 8009732:	4628      	mov	r0, r5
 8009734:	4621      	mov	r1, r4
 8009736:	f7ff ff59 	bl	80095ec <__sflush_r>
 800973a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800973c:	07da      	lsls	r2, r3, #31
 800973e:	4605      	mov	r5, r0
 8009740:	d4e0      	bmi.n	8009704 <_fflush_r+0xc>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	059b      	lsls	r3, r3, #22
 8009746:	d4dd      	bmi.n	8009704 <_fflush_r+0xc>
 8009748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800974a:	f7fd f8ad 	bl	80068a8 <__retarget_lock_release_recursive>
 800974e:	e7d9      	b.n	8009704 <_fflush_r+0xc>
 8009750:	4b05      	ldr	r3, [pc, #20]	; (8009768 <_fflush_r+0x70>)
 8009752:	429c      	cmp	r4, r3
 8009754:	d101      	bne.n	800975a <_fflush_r+0x62>
 8009756:	68ac      	ldr	r4, [r5, #8]
 8009758:	e7df      	b.n	800971a <_fflush_r+0x22>
 800975a:	4b04      	ldr	r3, [pc, #16]	; (800976c <_fflush_r+0x74>)
 800975c:	429c      	cmp	r4, r3
 800975e:	bf08      	it	eq
 8009760:	68ec      	ldreq	r4, [r5, #12]
 8009762:	e7da      	b.n	800971a <_fflush_r+0x22>
 8009764:	0800bd8c 	.word	0x0800bd8c
 8009768:	0800bdac 	.word	0x0800bdac
 800976c:	0800bd6c 	.word	0x0800bd6c

08009770 <fflush>:
 8009770:	4601      	mov	r1, r0
 8009772:	b920      	cbnz	r0, 800977e <fflush+0xe>
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <fflush+0x18>)
 8009776:	4905      	ldr	r1, [pc, #20]	; (800978c <fflush+0x1c>)
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	f7fd b850 	b.w	800681e <_fwalk_reent>
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <fflush+0x20>)
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	f7ff bfb9 	b.w	80096f8 <_fflush_r>
 8009786:	bf00      	nop
 8009788:	0800bdcc 	.word	0x0800bdcc
 800978c:	080096f9 	.word	0x080096f9
 8009790:	20000010 	.word	0x20000010

08009794 <rshift>:
 8009794:	6903      	ldr	r3, [r0, #16]
 8009796:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800979a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800979e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097a2:	f100 0414 	add.w	r4, r0, #20
 80097a6:	dd45      	ble.n	8009834 <rshift+0xa0>
 80097a8:	f011 011f 	ands.w	r1, r1, #31
 80097ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097b4:	d10c      	bne.n	80097d0 <rshift+0x3c>
 80097b6:	f100 0710 	add.w	r7, r0, #16
 80097ba:	4629      	mov	r1, r5
 80097bc:	42b1      	cmp	r1, r6
 80097be:	d334      	bcc.n	800982a <rshift+0x96>
 80097c0:	1a9b      	subs	r3, r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	1eea      	subs	r2, r5, #3
 80097c6:	4296      	cmp	r6, r2
 80097c8:	bf38      	it	cc
 80097ca:	2300      	movcc	r3, #0
 80097cc:	4423      	add	r3, r4
 80097ce:	e015      	b.n	80097fc <rshift+0x68>
 80097d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097d4:	f1c1 0820 	rsb	r8, r1, #32
 80097d8:	40cf      	lsrs	r7, r1
 80097da:	f105 0e04 	add.w	lr, r5, #4
 80097de:	46a1      	mov	r9, r4
 80097e0:	4576      	cmp	r6, lr
 80097e2:	46f4      	mov	ip, lr
 80097e4:	d815      	bhi.n	8009812 <rshift+0x7e>
 80097e6:	1a9a      	subs	r2, r3, r2
 80097e8:	0092      	lsls	r2, r2, #2
 80097ea:	3a04      	subs	r2, #4
 80097ec:	3501      	adds	r5, #1
 80097ee:	42ae      	cmp	r6, r5
 80097f0:	bf38      	it	cc
 80097f2:	2200      	movcc	r2, #0
 80097f4:	18a3      	adds	r3, r4, r2
 80097f6:	50a7      	str	r7, [r4, r2]
 80097f8:	b107      	cbz	r7, 80097fc <rshift+0x68>
 80097fa:	3304      	adds	r3, #4
 80097fc:	1b1a      	subs	r2, r3, r4
 80097fe:	42a3      	cmp	r3, r4
 8009800:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009804:	bf08      	it	eq
 8009806:	2300      	moveq	r3, #0
 8009808:	6102      	str	r2, [r0, #16]
 800980a:	bf08      	it	eq
 800980c:	6143      	streq	r3, [r0, #20]
 800980e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009812:	f8dc c000 	ldr.w	ip, [ip]
 8009816:	fa0c fc08 	lsl.w	ip, ip, r8
 800981a:	ea4c 0707 	orr.w	r7, ip, r7
 800981e:	f849 7b04 	str.w	r7, [r9], #4
 8009822:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009826:	40cf      	lsrs	r7, r1
 8009828:	e7da      	b.n	80097e0 <rshift+0x4c>
 800982a:	f851 cb04 	ldr.w	ip, [r1], #4
 800982e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009832:	e7c3      	b.n	80097bc <rshift+0x28>
 8009834:	4623      	mov	r3, r4
 8009836:	e7e1      	b.n	80097fc <rshift+0x68>

08009838 <__hexdig_fun>:
 8009838:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800983c:	2b09      	cmp	r3, #9
 800983e:	d802      	bhi.n	8009846 <__hexdig_fun+0xe>
 8009840:	3820      	subs	r0, #32
 8009842:	b2c0      	uxtb	r0, r0
 8009844:	4770      	bx	lr
 8009846:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800984a:	2b05      	cmp	r3, #5
 800984c:	d801      	bhi.n	8009852 <__hexdig_fun+0x1a>
 800984e:	3847      	subs	r0, #71	; 0x47
 8009850:	e7f7      	b.n	8009842 <__hexdig_fun+0xa>
 8009852:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009856:	2b05      	cmp	r3, #5
 8009858:	d801      	bhi.n	800985e <__hexdig_fun+0x26>
 800985a:	3827      	subs	r0, #39	; 0x27
 800985c:	e7f1      	b.n	8009842 <__hexdig_fun+0xa>
 800985e:	2000      	movs	r0, #0
 8009860:	4770      	bx	lr
	...

08009864 <__gethex>:
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	ed2d 8b02 	vpush	{d8}
 800986c:	b089      	sub	sp, #36	; 0x24
 800986e:	ee08 0a10 	vmov	s16, r0
 8009872:	9304      	str	r3, [sp, #16]
 8009874:	4bb4      	ldr	r3, [pc, #720]	; (8009b48 <__gethex+0x2e4>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	4618      	mov	r0, r3
 800987c:	468b      	mov	fp, r1
 800987e:	4690      	mov	r8, r2
 8009880:	f7f6 fca6 	bl	80001d0 <strlen>
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	f8db 2000 	ldr.w	r2, [fp]
 800988a:	4403      	add	r3, r0
 800988c:	4682      	mov	sl, r0
 800988e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009892:	9305      	str	r3, [sp, #20]
 8009894:	1c93      	adds	r3, r2, #2
 8009896:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800989a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800989e:	32fe      	adds	r2, #254	; 0xfe
 80098a0:	18d1      	adds	r1, r2, r3
 80098a2:	461f      	mov	r7, r3
 80098a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098a8:	9100      	str	r1, [sp, #0]
 80098aa:	2830      	cmp	r0, #48	; 0x30
 80098ac:	d0f8      	beq.n	80098a0 <__gethex+0x3c>
 80098ae:	f7ff ffc3 	bl	8009838 <__hexdig_fun>
 80098b2:	4604      	mov	r4, r0
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d13a      	bne.n	800992e <__gethex+0xca>
 80098b8:	9901      	ldr	r1, [sp, #4]
 80098ba:	4652      	mov	r2, sl
 80098bc:	4638      	mov	r0, r7
 80098be:	f001 fe03 	bl	800b4c8 <strncmp>
 80098c2:	4605      	mov	r5, r0
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d168      	bne.n	800999a <__gethex+0x136>
 80098c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80098cc:	eb07 060a 	add.w	r6, r7, sl
 80098d0:	f7ff ffb2 	bl	8009838 <__hexdig_fun>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d062      	beq.n	800999e <__gethex+0x13a>
 80098d8:	4633      	mov	r3, r6
 80098da:	7818      	ldrb	r0, [r3, #0]
 80098dc:	2830      	cmp	r0, #48	; 0x30
 80098de:	461f      	mov	r7, r3
 80098e0:	f103 0301 	add.w	r3, r3, #1
 80098e4:	d0f9      	beq.n	80098da <__gethex+0x76>
 80098e6:	f7ff ffa7 	bl	8009838 <__hexdig_fun>
 80098ea:	2301      	movs	r3, #1
 80098ec:	fab0 f480 	clz	r4, r0
 80098f0:	0964      	lsrs	r4, r4, #5
 80098f2:	4635      	mov	r5, r6
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	463a      	mov	r2, r7
 80098f8:	4616      	mov	r6, r2
 80098fa:	3201      	adds	r2, #1
 80098fc:	7830      	ldrb	r0, [r6, #0]
 80098fe:	f7ff ff9b 	bl	8009838 <__hexdig_fun>
 8009902:	2800      	cmp	r0, #0
 8009904:	d1f8      	bne.n	80098f8 <__gethex+0x94>
 8009906:	9901      	ldr	r1, [sp, #4]
 8009908:	4652      	mov	r2, sl
 800990a:	4630      	mov	r0, r6
 800990c:	f001 fddc 	bl	800b4c8 <strncmp>
 8009910:	b980      	cbnz	r0, 8009934 <__gethex+0xd0>
 8009912:	b94d      	cbnz	r5, 8009928 <__gethex+0xc4>
 8009914:	eb06 050a 	add.w	r5, r6, sl
 8009918:	462a      	mov	r2, r5
 800991a:	4616      	mov	r6, r2
 800991c:	3201      	adds	r2, #1
 800991e:	7830      	ldrb	r0, [r6, #0]
 8009920:	f7ff ff8a 	bl	8009838 <__hexdig_fun>
 8009924:	2800      	cmp	r0, #0
 8009926:	d1f8      	bne.n	800991a <__gethex+0xb6>
 8009928:	1bad      	subs	r5, r5, r6
 800992a:	00ad      	lsls	r5, r5, #2
 800992c:	e004      	b.n	8009938 <__gethex+0xd4>
 800992e:	2400      	movs	r4, #0
 8009930:	4625      	mov	r5, r4
 8009932:	e7e0      	b.n	80098f6 <__gethex+0x92>
 8009934:	2d00      	cmp	r5, #0
 8009936:	d1f7      	bne.n	8009928 <__gethex+0xc4>
 8009938:	7833      	ldrb	r3, [r6, #0]
 800993a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800993e:	2b50      	cmp	r3, #80	; 0x50
 8009940:	d13b      	bne.n	80099ba <__gethex+0x156>
 8009942:	7873      	ldrb	r3, [r6, #1]
 8009944:	2b2b      	cmp	r3, #43	; 0x2b
 8009946:	d02c      	beq.n	80099a2 <__gethex+0x13e>
 8009948:	2b2d      	cmp	r3, #45	; 0x2d
 800994a:	d02e      	beq.n	80099aa <__gethex+0x146>
 800994c:	1c71      	adds	r1, r6, #1
 800994e:	f04f 0900 	mov.w	r9, #0
 8009952:	7808      	ldrb	r0, [r1, #0]
 8009954:	f7ff ff70 	bl	8009838 <__hexdig_fun>
 8009958:	1e43      	subs	r3, r0, #1
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b18      	cmp	r3, #24
 800995e:	d82c      	bhi.n	80099ba <__gethex+0x156>
 8009960:	f1a0 0210 	sub.w	r2, r0, #16
 8009964:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009968:	f7ff ff66 	bl	8009838 <__hexdig_fun>
 800996c:	1e43      	subs	r3, r0, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b18      	cmp	r3, #24
 8009972:	d91d      	bls.n	80099b0 <__gethex+0x14c>
 8009974:	f1b9 0f00 	cmp.w	r9, #0
 8009978:	d000      	beq.n	800997c <__gethex+0x118>
 800997a:	4252      	negs	r2, r2
 800997c:	4415      	add	r5, r2
 800997e:	f8cb 1000 	str.w	r1, [fp]
 8009982:	b1e4      	cbz	r4, 80099be <__gethex+0x15a>
 8009984:	9b00      	ldr	r3, [sp, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	bf14      	ite	ne
 800998a:	2700      	movne	r7, #0
 800998c:	2706      	moveq	r7, #6
 800998e:	4638      	mov	r0, r7
 8009990:	b009      	add	sp, #36	; 0x24
 8009992:	ecbd 8b02 	vpop	{d8}
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	463e      	mov	r6, r7
 800999c:	4625      	mov	r5, r4
 800999e:	2401      	movs	r4, #1
 80099a0:	e7ca      	b.n	8009938 <__gethex+0xd4>
 80099a2:	f04f 0900 	mov.w	r9, #0
 80099a6:	1cb1      	adds	r1, r6, #2
 80099a8:	e7d3      	b.n	8009952 <__gethex+0xee>
 80099aa:	f04f 0901 	mov.w	r9, #1
 80099ae:	e7fa      	b.n	80099a6 <__gethex+0x142>
 80099b0:	230a      	movs	r3, #10
 80099b2:	fb03 0202 	mla	r2, r3, r2, r0
 80099b6:	3a10      	subs	r2, #16
 80099b8:	e7d4      	b.n	8009964 <__gethex+0x100>
 80099ba:	4631      	mov	r1, r6
 80099bc:	e7df      	b.n	800997e <__gethex+0x11a>
 80099be:	1bf3      	subs	r3, r6, r7
 80099c0:	3b01      	subs	r3, #1
 80099c2:	4621      	mov	r1, r4
 80099c4:	2b07      	cmp	r3, #7
 80099c6:	dc0b      	bgt.n	80099e0 <__gethex+0x17c>
 80099c8:	ee18 0a10 	vmov	r0, s16
 80099cc:	f000 faf4 	bl	8009fb8 <_Balloc>
 80099d0:	4604      	mov	r4, r0
 80099d2:	b940      	cbnz	r0, 80099e6 <__gethex+0x182>
 80099d4:	4b5d      	ldr	r3, [pc, #372]	; (8009b4c <__gethex+0x2e8>)
 80099d6:	4602      	mov	r2, r0
 80099d8:	21de      	movs	r1, #222	; 0xde
 80099da:	485d      	ldr	r0, [pc, #372]	; (8009b50 <__gethex+0x2ec>)
 80099dc:	f001 fedc 	bl	800b798 <__assert_func>
 80099e0:	3101      	adds	r1, #1
 80099e2:	105b      	asrs	r3, r3, #1
 80099e4:	e7ee      	b.n	80099c4 <__gethex+0x160>
 80099e6:	f100 0914 	add.w	r9, r0, #20
 80099ea:	f04f 0b00 	mov.w	fp, #0
 80099ee:	f1ca 0301 	rsb	r3, sl, #1
 80099f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80099f6:	f8cd b000 	str.w	fp, [sp]
 80099fa:	9306      	str	r3, [sp, #24]
 80099fc:	42b7      	cmp	r7, r6
 80099fe:	d340      	bcc.n	8009a82 <__gethex+0x21e>
 8009a00:	9802      	ldr	r0, [sp, #8]
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	f840 3b04 	str.w	r3, [r0], #4
 8009a08:	eba0 0009 	sub.w	r0, r0, r9
 8009a0c:	1080      	asrs	r0, r0, #2
 8009a0e:	0146      	lsls	r6, r0, #5
 8009a10:	6120      	str	r0, [r4, #16]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fbc2 	bl	800a19c <__hi0bits>
 8009a18:	1a30      	subs	r0, r6, r0
 8009a1a:	f8d8 6000 	ldr.w	r6, [r8]
 8009a1e:	42b0      	cmp	r0, r6
 8009a20:	dd63      	ble.n	8009aea <__gethex+0x286>
 8009a22:	1b87      	subs	r7, r0, r6
 8009a24:	4639      	mov	r1, r7
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 ff66 	bl	800a8f8 <__any_on>
 8009a2c:	4682      	mov	sl, r0
 8009a2e:	b1a8      	cbz	r0, 8009a5c <__gethex+0x1f8>
 8009a30:	1e7b      	subs	r3, r7, #1
 8009a32:	1159      	asrs	r1, r3, #5
 8009a34:	f003 021f 	and.w	r2, r3, #31
 8009a38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009a3c:	f04f 0a01 	mov.w	sl, #1
 8009a40:	fa0a f202 	lsl.w	r2, sl, r2
 8009a44:	420a      	tst	r2, r1
 8009a46:	d009      	beq.n	8009a5c <__gethex+0x1f8>
 8009a48:	4553      	cmp	r3, sl
 8009a4a:	dd05      	ble.n	8009a58 <__gethex+0x1f4>
 8009a4c:	1eb9      	subs	r1, r7, #2
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f000 ff52 	bl	800a8f8 <__any_on>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d145      	bne.n	8009ae4 <__gethex+0x280>
 8009a58:	f04f 0a02 	mov.w	sl, #2
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f7ff fe98 	bl	8009794 <rshift>
 8009a64:	443d      	add	r5, r7
 8009a66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a6a:	42ab      	cmp	r3, r5
 8009a6c:	da4c      	bge.n	8009b08 <__gethex+0x2a4>
 8009a6e:	ee18 0a10 	vmov	r0, s16
 8009a72:	4621      	mov	r1, r4
 8009a74:	f000 fae0 	bl	800a038 <_Bfree>
 8009a78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	27a3      	movs	r7, #163	; 0xa3
 8009a80:	e785      	b.n	800998e <__gethex+0x12a>
 8009a82:	1e73      	subs	r3, r6, #1
 8009a84:	9a05      	ldr	r2, [sp, #20]
 8009a86:	9303      	str	r3, [sp, #12]
 8009a88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d019      	beq.n	8009ac4 <__gethex+0x260>
 8009a90:	f1bb 0f20 	cmp.w	fp, #32
 8009a94:	d107      	bne.n	8009aa6 <__gethex+0x242>
 8009a96:	9b02      	ldr	r3, [sp, #8]
 8009a98:	9a00      	ldr	r2, [sp, #0]
 8009a9a:	f843 2b04 	str.w	r2, [r3], #4
 8009a9e:	9302      	str	r3, [sp, #8]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	469b      	mov	fp, r3
 8009aa6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009aaa:	f7ff fec5 	bl	8009838 <__hexdig_fun>
 8009aae:	9b00      	ldr	r3, [sp, #0]
 8009ab0:	f000 000f 	and.w	r0, r0, #15
 8009ab4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ab8:	4303      	orrs	r3, r0
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	f10b 0b04 	add.w	fp, fp, #4
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	e00d      	b.n	8009ae0 <__gethex+0x27c>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	9a06      	ldr	r2, [sp, #24]
 8009ac8:	4413      	add	r3, r2
 8009aca:	42bb      	cmp	r3, r7
 8009acc:	d3e0      	bcc.n	8009a90 <__gethex+0x22c>
 8009ace:	4618      	mov	r0, r3
 8009ad0:	9901      	ldr	r1, [sp, #4]
 8009ad2:	9307      	str	r3, [sp, #28]
 8009ad4:	4652      	mov	r2, sl
 8009ad6:	f001 fcf7 	bl	800b4c8 <strncmp>
 8009ada:	9b07      	ldr	r3, [sp, #28]
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d1d7      	bne.n	8009a90 <__gethex+0x22c>
 8009ae0:	461e      	mov	r6, r3
 8009ae2:	e78b      	b.n	80099fc <__gethex+0x198>
 8009ae4:	f04f 0a03 	mov.w	sl, #3
 8009ae8:	e7b8      	b.n	8009a5c <__gethex+0x1f8>
 8009aea:	da0a      	bge.n	8009b02 <__gethex+0x29e>
 8009aec:	1a37      	subs	r7, r6, r0
 8009aee:	4621      	mov	r1, r4
 8009af0:	ee18 0a10 	vmov	r0, s16
 8009af4:	463a      	mov	r2, r7
 8009af6:	f000 fcbb 	bl	800a470 <__lshift>
 8009afa:	1bed      	subs	r5, r5, r7
 8009afc:	4604      	mov	r4, r0
 8009afe:	f100 0914 	add.w	r9, r0, #20
 8009b02:	f04f 0a00 	mov.w	sl, #0
 8009b06:	e7ae      	b.n	8009a66 <__gethex+0x202>
 8009b08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b0c:	42a8      	cmp	r0, r5
 8009b0e:	dd72      	ble.n	8009bf6 <__gethex+0x392>
 8009b10:	1b45      	subs	r5, r0, r5
 8009b12:	42ae      	cmp	r6, r5
 8009b14:	dc36      	bgt.n	8009b84 <__gethex+0x320>
 8009b16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d02a      	beq.n	8009b74 <__gethex+0x310>
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d02c      	beq.n	8009b7c <__gethex+0x318>
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d11c      	bne.n	8009b60 <__gethex+0x2fc>
 8009b26:	42ae      	cmp	r6, r5
 8009b28:	d11a      	bne.n	8009b60 <__gethex+0x2fc>
 8009b2a:	2e01      	cmp	r6, #1
 8009b2c:	d112      	bne.n	8009b54 <__gethex+0x2f0>
 8009b2e:	9a04      	ldr	r2, [sp, #16]
 8009b30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	2301      	movs	r3, #1
 8009b38:	6123      	str	r3, [r4, #16]
 8009b3a:	f8c9 3000 	str.w	r3, [r9]
 8009b3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b40:	2762      	movs	r7, #98	; 0x62
 8009b42:	601c      	str	r4, [r3, #0]
 8009b44:	e723      	b.n	800998e <__gethex+0x12a>
 8009b46:	bf00      	nop
 8009b48:	0800c050 	.word	0x0800c050
 8009b4c:	0800bfd8 	.word	0x0800bfd8
 8009b50:	0800bfe9 	.word	0x0800bfe9
 8009b54:	1e71      	subs	r1, r6, #1
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 fece 	bl	800a8f8 <__any_on>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d1e6      	bne.n	8009b2e <__gethex+0x2ca>
 8009b60:	ee18 0a10 	vmov	r0, s16
 8009b64:	4621      	mov	r1, r4
 8009b66:	f000 fa67 	bl	800a038 <_Bfree>
 8009b6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	2750      	movs	r7, #80	; 0x50
 8009b72:	e70c      	b.n	800998e <__gethex+0x12a>
 8009b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1f2      	bne.n	8009b60 <__gethex+0x2fc>
 8009b7a:	e7d8      	b.n	8009b2e <__gethex+0x2ca>
 8009b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1d5      	bne.n	8009b2e <__gethex+0x2ca>
 8009b82:	e7ed      	b.n	8009b60 <__gethex+0x2fc>
 8009b84:	1e6f      	subs	r7, r5, #1
 8009b86:	f1ba 0f00 	cmp.w	sl, #0
 8009b8a:	d131      	bne.n	8009bf0 <__gethex+0x38c>
 8009b8c:	b127      	cbz	r7, 8009b98 <__gethex+0x334>
 8009b8e:	4639      	mov	r1, r7
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 feb1 	bl	800a8f8 <__any_on>
 8009b96:	4682      	mov	sl, r0
 8009b98:	117b      	asrs	r3, r7, #5
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ba0:	f007 071f 	and.w	r7, r7, #31
 8009ba4:	fa01 f707 	lsl.w	r7, r1, r7
 8009ba8:	421f      	tst	r7, r3
 8009baa:	4629      	mov	r1, r5
 8009bac:	4620      	mov	r0, r4
 8009bae:	bf18      	it	ne
 8009bb0:	f04a 0a02 	orrne.w	sl, sl, #2
 8009bb4:	1b76      	subs	r6, r6, r5
 8009bb6:	f7ff fded 	bl	8009794 <rshift>
 8009bba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009bbe:	2702      	movs	r7, #2
 8009bc0:	f1ba 0f00 	cmp.w	sl, #0
 8009bc4:	d048      	beq.n	8009c58 <__gethex+0x3f4>
 8009bc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d015      	beq.n	8009bfa <__gethex+0x396>
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	d017      	beq.n	8009c02 <__gethex+0x39e>
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d109      	bne.n	8009bea <__gethex+0x386>
 8009bd6:	f01a 0f02 	tst.w	sl, #2
 8009bda:	d006      	beq.n	8009bea <__gethex+0x386>
 8009bdc:	f8d9 0000 	ldr.w	r0, [r9]
 8009be0:	ea4a 0a00 	orr.w	sl, sl, r0
 8009be4:	f01a 0f01 	tst.w	sl, #1
 8009be8:	d10e      	bne.n	8009c08 <__gethex+0x3a4>
 8009bea:	f047 0710 	orr.w	r7, r7, #16
 8009bee:	e033      	b.n	8009c58 <__gethex+0x3f4>
 8009bf0:	f04f 0a01 	mov.w	sl, #1
 8009bf4:	e7d0      	b.n	8009b98 <__gethex+0x334>
 8009bf6:	2701      	movs	r7, #1
 8009bf8:	e7e2      	b.n	8009bc0 <__gethex+0x35c>
 8009bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bfc:	f1c3 0301 	rsb	r3, r3, #1
 8009c00:	9315      	str	r3, [sp, #84]	; 0x54
 8009c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d0f0      	beq.n	8009bea <__gethex+0x386>
 8009c08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c0c:	f104 0314 	add.w	r3, r4, #20
 8009c10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c18:	f04f 0c00 	mov.w	ip, #0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c22:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c26:	d01c      	beq.n	8009c62 <__gethex+0x3fe>
 8009c28:	3201      	adds	r2, #1
 8009c2a:	6002      	str	r2, [r0, #0]
 8009c2c:	2f02      	cmp	r7, #2
 8009c2e:	f104 0314 	add.w	r3, r4, #20
 8009c32:	d13f      	bne.n	8009cb4 <__gethex+0x450>
 8009c34:	f8d8 2000 	ldr.w	r2, [r8]
 8009c38:	3a01      	subs	r2, #1
 8009c3a:	42b2      	cmp	r2, r6
 8009c3c:	d10a      	bne.n	8009c54 <__gethex+0x3f0>
 8009c3e:	1171      	asrs	r1, r6, #5
 8009c40:	2201      	movs	r2, #1
 8009c42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c46:	f006 061f 	and.w	r6, r6, #31
 8009c4a:	fa02 f606 	lsl.w	r6, r2, r6
 8009c4e:	421e      	tst	r6, r3
 8009c50:	bf18      	it	ne
 8009c52:	4617      	movne	r7, r2
 8009c54:	f047 0720 	orr.w	r7, r7, #32
 8009c58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c5a:	601c      	str	r4, [r3, #0]
 8009c5c:	9b04      	ldr	r3, [sp, #16]
 8009c5e:	601d      	str	r5, [r3, #0]
 8009c60:	e695      	b.n	800998e <__gethex+0x12a>
 8009c62:	4299      	cmp	r1, r3
 8009c64:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c68:	d8d8      	bhi.n	8009c1c <__gethex+0x3b8>
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	459b      	cmp	fp, r3
 8009c6e:	db19      	blt.n	8009ca4 <__gethex+0x440>
 8009c70:	6861      	ldr	r1, [r4, #4]
 8009c72:	ee18 0a10 	vmov	r0, s16
 8009c76:	3101      	adds	r1, #1
 8009c78:	f000 f99e 	bl	8009fb8 <_Balloc>
 8009c7c:	4681      	mov	r9, r0
 8009c7e:	b918      	cbnz	r0, 8009c88 <__gethex+0x424>
 8009c80:	4b1a      	ldr	r3, [pc, #104]	; (8009cec <__gethex+0x488>)
 8009c82:	4602      	mov	r2, r0
 8009c84:	2184      	movs	r1, #132	; 0x84
 8009c86:	e6a8      	b.n	80099da <__gethex+0x176>
 8009c88:	6922      	ldr	r2, [r4, #16]
 8009c8a:	3202      	adds	r2, #2
 8009c8c:	f104 010c 	add.w	r1, r4, #12
 8009c90:	0092      	lsls	r2, r2, #2
 8009c92:	300c      	adds	r0, #12
 8009c94:	f7fc fe09 	bl	80068aa <memcpy>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	ee18 0a10 	vmov	r0, s16
 8009c9e:	f000 f9cb 	bl	800a038 <_Bfree>
 8009ca2:	464c      	mov	r4, r9
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cac:	6122      	str	r2, [r4, #16]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	615a      	str	r2, [r3, #20]
 8009cb2:	e7bb      	b.n	8009c2c <__gethex+0x3c8>
 8009cb4:	6922      	ldr	r2, [r4, #16]
 8009cb6:	455a      	cmp	r2, fp
 8009cb8:	dd0b      	ble.n	8009cd2 <__gethex+0x46e>
 8009cba:	2101      	movs	r1, #1
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7ff fd69 	bl	8009794 <rshift>
 8009cc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cc6:	3501      	adds	r5, #1
 8009cc8:	42ab      	cmp	r3, r5
 8009cca:	f6ff aed0 	blt.w	8009a6e <__gethex+0x20a>
 8009cce:	2701      	movs	r7, #1
 8009cd0:	e7c0      	b.n	8009c54 <__gethex+0x3f0>
 8009cd2:	f016 061f 	ands.w	r6, r6, #31
 8009cd6:	d0fa      	beq.n	8009cce <__gethex+0x46a>
 8009cd8:	4453      	add	r3, sl
 8009cda:	f1c6 0620 	rsb	r6, r6, #32
 8009cde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ce2:	f000 fa5b 	bl	800a19c <__hi0bits>
 8009ce6:	42b0      	cmp	r0, r6
 8009ce8:	dbe7      	blt.n	8009cba <__gethex+0x456>
 8009cea:	e7f0      	b.n	8009cce <__gethex+0x46a>
 8009cec:	0800bfd8 	.word	0x0800bfd8

08009cf0 <L_shift>:
 8009cf0:	f1c2 0208 	rsb	r2, r2, #8
 8009cf4:	0092      	lsls	r2, r2, #2
 8009cf6:	b570      	push	{r4, r5, r6, lr}
 8009cf8:	f1c2 0620 	rsb	r6, r2, #32
 8009cfc:	6843      	ldr	r3, [r0, #4]
 8009cfe:	6804      	ldr	r4, [r0, #0]
 8009d00:	fa03 f506 	lsl.w	r5, r3, r6
 8009d04:	432c      	orrs	r4, r5
 8009d06:	40d3      	lsrs	r3, r2
 8009d08:	6004      	str	r4, [r0, #0]
 8009d0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d0e:	4288      	cmp	r0, r1
 8009d10:	d3f4      	bcc.n	8009cfc <L_shift+0xc>
 8009d12:	bd70      	pop	{r4, r5, r6, pc}

08009d14 <__match>:
 8009d14:	b530      	push	{r4, r5, lr}
 8009d16:	6803      	ldr	r3, [r0, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d1e:	b914      	cbnz	r4, 8009d26 <__match+0x12>
 8009d20:	6003      	str	r3, [r0, #0]
 8009d22:	2001      	movs	r0, #1
 8009d24:	bd30      	pop	{r4, r5, pc}
 8009d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d2e:	2d19      	cmp	r5, #25
 8009d30:	bf98      	it	ls
 8009d32:	3220      	addls	r2, #32
 8009d34:	42a2      	cmp	r2, r4
 8009d36:	d0f0      	beq.n	8009d1a <__match+0x6>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e7f3      	b.n	8009d24 <__match+0x10>

08009d3c <__hexnan>:
 8009d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d40:	680b      	ldr	r3, [r1, #0]
 8009d42:	115e      	asrs	r6, r3, #5
 8009d44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d48:	f013 031f 	ands.w	r3, r3, #31
 8009d4c:	b087      	sub	sp, #28
 8009d4e:	bf18      	it	ne
 8009d50:	3604      	addne	r6, #4
 8009d52:	2500      	movs	r5, #0
 8009d54:	1f37      	subs	r7, r6, #4
 8009d56:	4690      	mov	r8, r2
 8009d58:	6802      	ldr	r2, [r0, #0]
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	4682      	mov	sl, r0
 8009d5e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d62:	46b9      	mov	r9, r7
 8009d64:	463c      	mov	r4, r7
 8009d66:	9502      	str	r5, [sp, #8]
 8009d68:	46ab      	mov	fp, r5
 8009d6a:	7851      	ldrb	r1, [r2, #1]
 8009d6c:	1c53      	adds	r3, r2, #1
 8009d6e:	9303      	str	r3, [sp, #12]
 8009d70:	b341      	cbz	r1, 8009dc4 <__hexnan+0x88>
 8009d72:	4608      	mov	r0, r1
 8009d74:	9205      	str	r2, [sp, #20]
 8009d76:	9104      	str	r1, [sp, #16]
 8009d78:	f7ff fd5e 	bl	8009838 <__hexdig_fun>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d14f      	bne.n	8009e20 <__hexnan+0xe4>
 8009d80:	9904      	ldr	r1, [sp, #16]
 8009d82:	9a05      	ldr	r2, [sp, #20]
 8009d84:	2920      	cmp	r1, #32
 8009d86:	d818      	bhi.n	8009dba <__hexnan+0x7e>
 8009d88:	9b02      	ldr	r3, [sp, #8]
 8009d8a:	459b      	cmp	fp, r3
 8009d8c:	dd13      	ble.n	8009db6 <__hexnan+0x7a>
 8009d8e:	454c      	cmp	r4, r9
 8009d90:	d206      	bcs.n	8009da0 <__hexnan+0x64>
 8009d92:	2d07      	cmp	r5, #7
 8009d94:	dc04      	bgt.n	8009da0 <__hexnan+0x64>
 8009d96:	462a      	mov	r2, r5
 8009d98:	4649      	mov	r1, r9
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f7ff ffa8 	bl	8009cf0 <L_shift>
 8009da0:	4544      	cmp	r4, r8
 8009da2:	d950      	bls.n	8009e46 <__hexnan+0x10a>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f1a4 0904 	sub.w	r9, r4, #4
 8009daa:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dae:	f8cd b008 	str.w	fp, [sp, #8]
 8009db2:	464c      	mov	r4, r9
 8009db4:	461d      	mov	r5, r3
 8009db6:	9a03      	ldr	r2, [sp, #12]
 8009db8:	e7d7      	b.n	8009d6a <__hexnan+0x2e>
 8009dba:	2929      	cmp	r1, #41	; 0x29
 8009dbc:	d156      	bne.n	8009e6c <__hexnan+0x130>
 8009dbe:	3202      	adds	r2, #2
 8009dc0:	f8ca 2000 	str.w	r2, [sl]
 8009dc4:	f1bb 0f00 	cmp.w	fp, #0
 8009dc8:	d050      	beq.n	8009e6c <__hexnan+0x130>
 8009dca:	454c      	cmp	r4, r9
 8009dcc:	d206      	bcs.n	8009ddc <__hexnan+0xa0>
 8009dce:	2d07      	cmp	r5, #7
 8009dd0:	dc04      	bgt.n	8009ddc <__hexnan+0xa0>
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7ff ff8a 	bl	8009cf0 <L_shift>
 8009ddc:	4544      	cmp	r4, r8
 8009dde:	d934      	bls.n	8009e4a <__hexnan+0x10e>
 8009de0:	f1a8 0204 	sub.w	r2, r8, #4
 8009de4:	4623      	mov	r3, r4
 8009de6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009dea:	f842 1f04 	str.w	r1, [r2, #4]!
 8009dee:	429f      	cmp	r7, r3
 8009df0:	d2f9      	bcs.n	8009de6 <__hexnan+0xaa>
 8009df2:	1b3b      	subs	r3, r7, r4
 8009df4:	f023 0303 	bic.w	r3, r3, #3
 8009df8:	3304      	adds	r3, #4
 8009dfa:	3401      	adds	r4, #1
 8009dfc:	3e03      	subs	r6, #3
 8009dfe:	42b4      	cmp	r4, r6
 8009e00:	bf88      	it	hi
 8009e02:	2304      	movhi	r3, #4
 8009e04:	4443      	add	r3, r8
 8009e06:	2200      	movs	r2, #0
 8009e08:	f843 2b04 	str.w	r2, [r3], #4
 8009e0c:	429f      	cmp	r7, r3
 8009e0e:	d2fb      	bcs.n	8009e08 <__hexnan+0xcc>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	b91b      	cbnz	r3, 8009e1c <__hexnan+0xe0>
 8009e14:	4547      	cmp	r7, r8
 8009e16:	d127      	bne.n	8009e68 <__hexnan+0x12c>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	603b      	str	r3, [r7, #0]
 8009e1c:	2005      	movs	r0, #5
 8009e1e:	e026      	b.n	8009e6e <__hexnan+0x132>
 8009e20:	3501      	adds	r5, #1
 8009e22:	2d08      	cmp	r5, #8
 8009e24:	f10b 0b01 	add.w	fp, fp, #1
 8009e28:	dd06      	ble.n	8009e38 <__hexnan+0xfc>
 8009e2a:	4544      	cmp	r4, r8
 8009e2c:	d9c3      	bls.n	8009db6 <__hexnan+0x7a>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e34:	2501      	movs	r5, #1
 8009e36:	3c04      	subs	r4, #4
 8009e38:	6822      	ldr	r2, [r4, #0]
 8009e3a:	f000 000f 	and.w	r0, r0, #15
 8009e3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009e42:	6022      	str	r2, [r4, #0]
 8009e44:	e7b7      	b.n	8009db6 <__hexnan+0x7a>
 8009e46:	2508      	movs	r5, #8
 8009e48:	e7b5      	b.n	8009db6 <__hexnan+0x7a>
 8009e4a:	9b01      	ldr	r3, [sp, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d0df      	beq.n	8009e10 <__hexnan+0xd4>
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	f1c3 0320 	rsb	r3, r3, #32
 8009e58:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e60:	401a      	ands	r2, r3
 8009e62:	f846 2c04 	str.w	r2, [r6, #-4]
 8009e66:	e7d3      	b.n	8009e10 <__hexnan+0xd4>
 8009e68:	3f04      	subs	r7, #4
 8009e6a:	e7d1      	b.n	8009e10 <__hexnan+0xd4>
 8009e6c:	2004      	movs	r0, #4
 8009e6e:	b007      	add	sp, #28
 8009e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e74 <_localeconv_r>:
 8009e74:	4800      	ldr	r0, [pc, #0]	; (8009e78 <_localeconv_r+0x4>)
 8009e76:	4770      	bx	lr
 8009e78:	20000168 	.word	0x20000168

08009e7c <_lseek_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d07      	ldr	r5, [pc, #28]	; (8009e9c <_lseek_r+0x20>)
 8009e80:	4604      	mov	r4, r0
 8009e82:	4608      	mov	r0, r1
 8009e84:	4611      	mov	r1, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	602a      	str	r2, [r5, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	f7f7 fbfb 	bl	8001686 <_lseek>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_lseek_r+0x1e>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_lseek_r+0x1e>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	20004c7c 	.word	0x20004c7c

08009ea0 <__swhatbuf_r>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	460e      	mov	r6, r1
 8009ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	b096      	sub	sp, #88	; 0x58
 8009eac:	4614      	mov	r4, r2
 8009eae:	461d      	mov	r5, r3
 8009eb0:	da08      	bge.n	8009ec4 <__swhatbuf_r+0x24>
 8009eb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	602a      	str	r2, [r5, #0]
 8009eba:	061a      	lsls	r2, r3, #24
 8009ebc:	d410      	bmi.n	8009ee0 <__swhatbuf_r+0x40>
 8009ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec2:	e00e      	b.n	8009ee2 <__swhatbuf_r+0x42>
 8009ec4:	466a      	mov	r2, sp
 8009ec6:	f001 fc97 	bl	800b7f8 <_fstat_r>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	dbf1      	blt.n	8009eb2 <__swhatbuf_r+0x12>
 8009ece:	9a01      	ldr	r2, [sp, #4]
 8009ed0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ed4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ed8:	425a      	negs	r2, r3
 8009eda:	415a      	adcs	r2, r3
 8009edc:	602a      	str	r2, [r5, #0]
 8009ede:	e7ee      	b.n	8009ebe <__swhatbuf_r+0x1e>
 8009ee0:	2340      	movs	r3, #64	; 0x40
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	b016      	add	sp, #88	; 0x58
 8009ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009eec <__smakebuf_r>:
 8009eec:	898b      	ldrh	r3, [r1, #12]
 8009eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ef0:	079d      	lsls	r5, r3, #30
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	d507      	bpl.n	8009f08 <__smakebuf_r+0x1c>
 8009ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	2301      	movs	r3, #1
 8009f02:	6163      	str	r3, [r4, #20]
 8009f04:	b002      	add	sp, #8
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	ab01      	add	r3, sp, #4
 8009f0a:	466a      	mov	r2, sp
 8009f0c:	f7ff ffc8 	bl	8009ea0 <__swhatbuf_r>
 8009f10:	9900      	ldr	r1, [sp, #0]
 8009f12:	4605      	mov	r5, r0
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7fc fcff 	bl	8006918 <_malloc_r>
 8009f1a:	b948      	cbnz	r0, 8009f30 <__smakebuf_r+0x44>
 8009f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f20:	059a      	lsls	r2, r3, #22
 8009f22:	d4ef      	bmi.n	8009f04 <__smakebuf_r+0x18>
 8009f24:	f023 0303 	bic.w	r3, r3, #3
 8009f28:	f043 0302 	orr.w	r3, r3, #2
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	e7e3      	b.n	8009ef8 <__smakebuf_r+0xc>
 8009f30:	4b0d      	ldr	r3, [pc, #52]	; (8009f68 <__smakebuf_r+0x7c>)
 8009f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	6020      	str	r0, [r4, #0]
 8009f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	9b00      	ldr	r3, [sp, #0]
 8009f40:	6163      	str	r3, [r4, #20]
 8009f42:	9b01      	ldr	r3, [sp, #4]
 8009f44:	6120      	str	r0, [r4, #16]
 8009f46:	b15b      	cbz	r3, 8009f60 <__smakebuf_r+0x74>
 8009f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f001 fc65 	bl	800b81c <_isatty_r>
 8009f52:	b128      	cbz	r0, 8009f60 <__smakebuf_r+0x74>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	f043 0301 	orr.w	r3, r3, #1
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	89a0      	ldrh	r0, [r4, #12]
 8009f62:	4305      	orrs	r5, r0
 8009f64:	81a5      	strh	r5, [r4, #12]
 8009f66:	e7cd      	b.n	8009f04 <__smakebuf_r+0x18>
 8009f68:	08006681 	.word	0x08006681

08009f6c <malloc>:
 8009f6c:	4b02      	ldr	r3, [pc, #8]	; (8009f78 <malloc+0xc>)
 8009f6e:	4601      	mov	r1, r0
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	f7fc bcd1 	b.w	8006918 <_malloc_r>
 8009f76:	bf00      	nop
 8009f78:	20000010 	.word	0x20000010

08009f7c <__ascii_mbtowc>:
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	b901      	cbnz	r1, 8009f82 <__ascii_mbtowc+0x6>
 8009f80:	a901      	add	r1, sp, #4
 8009f82:	b142      	cbz	r2, 8009f96 <__ascii_mbtowc+0x1a>
 8009f84:	b14b      	cbz	r3, 8009f9a <__ascii_mbtowc+0x1e>
 8009f86:	7813      	ldrb	r3, [r2, #0]
 8009f88:	600b      	str	r3, [r1, #0]
 8009f8a:	7812      	ldrb	r2, [r2, #0]
 8009f8c:	1e10      	subs	r0, r2, #0
 8009f8e:	bf18      	it	ne
 8009f90:	2001      	movne	r0, #1
 8009f92:	b002      	add	sp, #8
 8009f94:	4770      	bx	lr
 8009f96:	4610      	mov	r0, r2
 8009f98:	e7fb      	b.n	8009f92 <__ascii_mbtowc+0x16>
 8009f9a:	f06f 0001 	mvn.w	r0, #1
 8009f9e:	e7f8      	b.n	8009f92 <__ascii_mbtowc+0x16>

08009fa0 <__malloc_lock>:
 8009fa0:	4801      	ldr	r0, [pc, #4]	; (8009fa8 <__malloc_lock+0x8>)
 8009fa2:	f7fc bc80 	b.w	80068a6 <__retarget_lock_acquire_recursive>
 8009fa6:	bf00      	nop
 8009fa8:	20004c70 	.word	0x20004c70

08009fac <__malloc_unlock>:
 8009fac:	4801      	ldr	r0, [pc, #4]	; (8009fb4 <__malloc_unlock+0x8>)
 8009fae:	f7fc bc7b 	b.w	80068a8 <__retarget_lock_release_recursive>
 8009fb2:	bf00      	nop
 8009fb4:	20004c70 	.word	0x20004c70

08009fb8 <_Balloc>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	b976      	cbnz	r6, 8009fe0 <_Balloc+0x28>
 8009fc2:	2010      	movs	r0, #16
 8009fc4:	f7ff ffd2 	bl	8009f6c <malloc>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	6260      	str	r0, [r4, #36]	; 0x24
 8009fcc:	b920      	cbnz	r0, 8009fd8 <_Balloc+0x20>
 8009fce:	4b18      	ldr	r3, [pc, #96]	; (800a030 <_Balloc+0x78>)
 8009fd0:	4818      	ldr	r0, [pc, #96]	; (800a034 <_Balloc+0x7c>)
 8009fd2:	2166      	movs	r1, #102	; 0x66
 8009fd4:	f001 fbe0 	bl	800b798 <__assert_func>
 8009fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fdc:	6006      	str	r6, [r0, #0]
 8009fde:	60c6      	str	r6, [r0, #12]
 8009fe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009fe2:	68f3      	ldr	r3, [r6, #12]
 8009fe4:	b183      	cbz	r3, 800a008 <_Balloc+0x50>
 8009fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fee:	b9b8      	cbnz	r0, 800a020 <_Balloc+0x68>
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ff6:	1d72      	adds	r2, r6, #5
 8009ff8:	0092      	lsls	r2, r2, #2
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 fc9d 	bl	800a93a <_calloc_r>
 800a000:	b160      	cbz	r0, 800a01c <_Balloc+0x64>
 800a002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a006:	e00e      	b.n	800a026 <_Balloc+0x6e>
 800a008:	2221      	movs	r2, #33	; 0x21
 800a00a:	2104      	movs	r1, #4
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 fc94 	bl	800a93a <_calloc_r>
 800a012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a014:	60f0      	str	r0, [r6, #12]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e4      	bne.n	8009fe6 <_Balloc+0x2e>
 800a01c:	2000      	movs	r0, #0
 800a01e:	bd70      	pop	{r4, r5, r6, pc}
 800a020:	6802      	ldr	r2, [r0, #0]
 800a022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a026:	2300      	movs	r3, #0
 800a028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a02c:	e7f7      	b.n	800a01e <_Balloc+0x66>
 800a02e:	bf00      	nop
 800a030:	0800bf66 	.word	0x0800bf66
 800a034:	0800c064 	.word	0x0800c064

0800a038 <_Bfree>:
 800a038:	b570      	push	{r4, r5, r6, lr}
 800a03a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a03c:	4605      	mov	r5, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	b976      	cbnz	r6, 800a060 <_Bfree+0x28>
 800a042:	2010      	movs	r0, #16
 800a044:	f7ff ff92 	bl	8009f6c <malloc>
 800a048:	4602      	mov	r2, r0
 800a04a:	6268      	str	r0, [r5, #36]	; 0x24
 800a04c:	b920      	cbnz	r0, 800a058 <_Bfree+0x20>
 800a04e:	4b09      	ldr	r3, [pc, #36]	; (800a074 <_Bfree+0x3c>)
 800a050:	4809      	ldr	r0, [pc, #36]	; (800a078 <_Bfree+0x40>)
 800a052:	218a      	movs	r1, #138	; 0x8a
 800a054:	f001 fba0 	bl	800b798 <__assert_func>
 800a058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a05c:	6006      	str	r6, [r0, #0]
 800a05e:	60c6      	str	r6, [r0, #12]
 800a060:	b13c      	cbz	r4, 800a072 <_Bfree+0x3a>
 800a062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a064:	6862      	ldr	r2, [r4, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a06c:	6021      	str	r1, [r4, #0]
 800a06e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	0800bf66 	.word	0x0800bf66
 800a078:	0800c064 	.word	0x0800c064

0800a07c <__multadd>:
 800a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	690d      	ldr	r5, [r1, #16]
 800a082:	4607      	mov	r7, r0
 800a084:	460c      	mov	r4, r1
 800a086:	461e      	mov	r6, r3
 800a088:	f101 0c14 	add.w	ip, r1, #20
 800a08c:	2000      	movs	r0, #0
 800a08e:	f8dc 3000 	ldr.w	r3, [ip]
 800a092:	b299      	uxth	r1, r3
 800a094:	fb02 6101 	mla	r1, r2, r1, r6
 800a098:	0c1e      	lsrs	r6, r3, #16
 800a09a:	0c0b      	lsrs	r3, r1, #16
 800a09c:	fb02 3306 	mla	r3, r2, r6, r3
 800a0a0:	b289      	uxth	r1, r1
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0a8:	4285      	cmp	r5, r0
 800a0aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a0ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0b2:	dcec      	bgt.n	800a08e <__multadd+0x12>
 800a0b4:	b30e      	cbz	r6, 800a0fa <__multadd+0x7e>
 800a0b6:	68a3      	ldr	r3, [r4, #8]
 800a0b8:	42ab      	cmp	r3, r5
 800a0ba:	dc19      	bgt.n	800a0f0 <__multadd+0x74>
 800a0bc:	6861      	ldr	r1, [r4, #4]
 800a0be:	4638      	mov	r0, r7
 800a0c0:	3101      	adds	r1, #1
 800a0c2:	f7ff ff79 	bl	8009fb8 <_Balloc>
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	b928      	cbnz	r0, 800a0d6 <__multadd+0x5a>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <__multadd+0x84>)
 800a0ce:	480d      	ldr	r0, [pc, #52]	; (800a104 <__multadd+0x88>)
 800a0d0:	21b5      	movs	r1, #181	; 0xb5
 800a0d2:	f001 fb61 	bl	800b798 <__assert_func>
 800a0d6:	6922      	ldr	r2, [r4, #16]
 800a0d8:	3202      	adds	r2, #2
 800a0da:	f104 010c 	add.w	r1, r4, #12
 800a0de:	0092      	lsls	r2, r2, #2
 800a0e0:	300c      	adds	r0, #12
 800a0e2:	f7fc fbe2 	bl	80068aa <memcpy>
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	f7ff ffa5 	bl	800a038 <_Bfree>
 800a0ee:	4644      	mov	r4, r8
 800a0f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0f4:	3501      	adds	r5, #1
 800a0f6:	615e      	str	r6, [r3, #20]
 800a0f8:	6125      	str	r5, [r4, #16]
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a100:	0800bfd8 	.word	0x0800bfd8
 800a104:	0800c064 	.word	0x0800c064

0800a108 <__s2b>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	460c      	mov	r4, r1
 800a10e:	4615      	mov	r5, r2
 800a110:	461f      	mov	r7, r3
 800a112:	2209      	movs	r2, #9
 800a114:	3308      	adds	r3, #8
 800a116:	4606      	mov	r6, r0
 800a118:	fb93 f3f2 	sdiv	r3, r3, r2
 800a11c:	2100      	movs	r1, #0
 800a11e:	2201      	movs	r2, #1
 800a120:	429a      	cmp	r2, r3
 800a122:	db09      	blt.n	800a138 <__s2b+0x30>
 800a124:	4630      	mov	r0, r6
 800a126:	f7ff ff47 	bl	8009fb8 <_Balloc>
 800a12a:	b940      	cbnz	r0, 800a13e <__s2b+0x36>
 800a12c:	4602      	mov	r2, r0
 800a12e:	4b19      	ldr	r3, [pc, #100]	; (800a194 <__s2b+0x8c>)
 800a130:	4819      	ldr	r0, [pc, #100]	; (800a198 <__s2b+0x90>)
 800a132:	21ce      	movs	r1, #206	; 0xce
 800a134:	f001 fb30 	bl	800b798 <__assert_func>
 800a138:	0052      	lsls	r2, r2, #1
 800a13a:	3101      	adds	r1, #1
 800a13c:	e7f0      	b.n	800a120 <__s2b+0x18>
 800a13e:	9b08      	ldr	r3, [sp, #32]
 800a140:	6143      	str	r3, [r0, #20]
 800a142:	2d09      	cmp	r5, #9
 800a144:	f04f 0301 	mov.w	r3, #1
 800a148:	6103      	str	r3, [r0, #16]
 800a14a:	dd16      	ble.n	800a17a <__s2b+0x72>
 800a14c:	f104 0909 	add.w	r9, r4, #9
 800a150:	46c8      	mov	r8, r9
 800a152:	442c      	add	r4, r5
 800a154:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a158:	4601      	mov	r1, r0
 800a15a:	3b30      	subs	r3, #48	; 0x30
 800a15c:	220a      	movs	r2, #10
 800a15e:	4630      	mov	r0, r6
 800a160:	f7ff ff8c 	bl	800a07c <__multadd>
 800a164:	45a0      	cmp	r8, r4
 800a166:	d1f5      	bne.n	800a154 <__s2b+0x4c>
 800a168:	f1a5 0408 	sub.w	r4, r5, #8
 800a16c:	444c      	add	r4, r9
 800a16e:	1b2d      	subs	r5, r5, r4
 800a170:	1963      	adds	r3, r4, r5
 800a172:	42bb      	cmp	r3, r7
 800a174:	db04      	blt.n	800a180 <__s2b+0x78>
 800a176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a17a:	340a      	adds	r4, #10
 800a17c:	2509      	movs	r5, #9
 800a17e:	e7f6      	b.n	800a16e <__s2b+0x66>
 800a180:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a184:	4601      	mov	r1, r0
 800a186:	3b30      	subs	r3, #48	; 0x30
 800a188:	220a      	movs	r2, #10
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff ff76 	bl	800a07c <__multadd>
 800a190:	e7ee      	b.n	800a170 <__s2b+0x68>
 800a192:	bf00      	nop
 800a194:	0800bfd8 	.word	0x0800bfd8
 800a198:	0800c064 	.word	0x0800c064

0800a19c <__hi0bits>:
 800a19c:	0c03      	lsrs	r3, r0, #16
 800a19e:	041b      	lsls	r3, r3, #16
 800a1a0:	b9d3      	cbnz	r3, 800a1d8 <__hi0bits+0x3c>
 800a1a2:	0400      	lsls	r0, r0, #16
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a1aa:	bf04      	itt	eq
 800a1ac:	0200      	lsleq	r0, r0, #8
 800a1ae:	3308      	addeq	r3, #8
 800a1b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a1b4:	bf04      	itt	eq
 800a1b6:	0100      	lsleq	r0, r0, #4
 800a1b8:	3304      	addeq	r3, #4
 800a1ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a1be:	bf04      	itt	eq
 800a1c0:	0080      	lsleq	r0, r0, #2
 800a1c2:	3302      	addeq	r3, #2
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	db05      	blt.n	800a1d4 <__hi0bits+0x38>
 800a1c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a1cc:	f103 0301 	add.w	r3, r3, #1
 800a1d0:	bf08      	it	eq
 800a1d2:	2320      	moveq	r3, #32
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	4770      	bx	lr
 800a1d8:	2300      	movs	r3, #0
 800a1da:	e7e4      	b.n	800a1a6 <__hi0bits+0xa>

0800a1dc <__lo0bits>:
 800a1dc:	6803      	ldr	r3, [r0, #0]
 800a1de:	f013 0207 	ands.w	r2, r3, #7
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	d00b      	beq.n	800a1fe <__lo0bits+0x22>
 800a1e6:	07da      	lsls	r2, r3, #31
 800a1e8:	d423      	bmi.n	800a232 <__lo0bits+0x56>
 800a1ea:	0798      	lsls	r0, r3, #30
 800a1ec:	bf49      	itett	mi
 800a1ee:	085b      	lsrmi	r3, r3, #1
 800a1f0:	089b      	lsrpl	r3, r3, #2
 800a1f2:	2001      	movmi	r0, #1
 800a1f4:	600b      	strmi	r3, [r1, #0]
 800a1f6:	bf5c      	itt	pl
 800a1f8:	600b      	strpl	r3, [r1, #0]
 800a1fa:	2002      	movpl	r0, #2
 800a1fc:	4770      	bx	lr
 800a1fe:	b298      	uxth	r0, r3
 800a200:	b9a8      	cbnz	r0, 800a22e <__lo0bits+0x52>
 800a202:	0c1b      	lsrs	r3, r3, #16
 800a204:	2010      	movs	r0, #16
 800a206:	b2da      	uxtb	r2, r3
 800a208:	b90a      	cbnz	r2, 800a20e <__lo0bits+0x32>
 800a20a:	3008      	adds	r0, #8
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	071a      	lsls	r2, r3, #28
 800a210:	bf04      	itt	eq
 800a212:	091b      	lsreq	r3, r3, #4
 800a214:	3004      	addeq	r0, #4
 800a216:	079a      	lsls	r2, r3, #30
 800a218:	bf04      	itt	eq
 800a21a:	089b      	lsreq	r3, r3, #2
 800a21c:	3002      	addeq	r0, #2
 800a21e:	07da      	lsls	r2, r3, #31
 800a220:	d403      	bmi.n	800a22a <__lo0bits+0x4e>
 800a222:	085b      	lsrs	r3, r3, #1
 800a224:	f100 0001 	add.w	r0, r0, #1
 800a228:	d005      	beq.n	800a236 <__lo0bits+0x5a>
 800a22a:	600b      	str	r3, [r1, #0]
 800a22c:	4770      	bx	lr
 800a22e:	4610      	mov	r0, r2
 800a230:	e7e9      	b.n	800a206 <__lo0bits+0x2a>
 800a232:	2000      	movs	r0, #0
 800a234:	4770      	bx	lr
 800a236:	2020      	movs	r0, #32
 800a238:	4770      	bx	lr
	...

0800a23c <__i2b>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	460c      	mov	r4, r1
 800a240:	2101      	movs	r1, #1
 800a242:	f7ff feb9 	bl	8009fb8 <_Balloc>
 800a246:	4602      	mov	r2, r0
 800a248:	b928      	cbnz	r0, 800a256 <__i2b+0x1a>
 800a24a:	4b05      	ldr	r3, [pc, #20]	; (800a260 <__i2b+0x24>)
 800a24c:	4805      	ldr	r0, [pc, #20]	; (800a264 <__i2b+0x28>)
 800a24e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a252:	f001 faa1 	bl	800b798 <__assert_func>
 800a256:	2301      	movs	r3, #1
 800a258:	6144      	str	r4, [r0, #20]
 800a25a:	6103      	str	r3, [r0, #16]
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	bf00      	nop
 800a260:	0800bfd8 	.word	0x0800bfd8
 800a264:	0800c064 	.word	0x0800c064

0800a268 <__multiply>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	4691      	mov	r9, r2
 800a26e:	690a      	ldr	r2, [r1, #16]
 800a270:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a274:	429a      	cmp	r2, r3
 800a276:	bfb8      	it	lt
 800a278:	460b      	movlt	r3, r1
 800a27a:	460c      	mov	r4, r1
 800a27c:	bfbc      	itt	lt
 800a27e:	464c      	movlt	r4, r9
 800a280:	4699      	movlt	r9, r3
 800a282:	6927      	ldr	r7, [r4, #16]
 800a284:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a288:	68a3      	ldr	r3, [r4, #8]
 800a28a:	6861      	ldr	r1, [r4, #4]
 800a28c:	eb07 060a 	add.w	r6, r7, sl
 800a290:	42b3      	cmp	r3, r6
 800a292:	b085      	sub	sp, #20
 800a294:	bfb8      	it	lt
 800a296:	3101      	addlt	r1, #1
 800a298:	f7ff fe8e 	bl	8009fb8 <_Balloc>
 800a29c:	b930      	cbnz	r0, 800a2ac <__multiply+0x44>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	4b44      	ldr	r3, [pc, #272]	; (800a3b4 <__multiply+0x14c>)
 800a2a2:	4845      	ldr	r0, [pc, #276]	; (800a3b8 <__multiply+0x150>)
 800a2a4:	f240 115d 	movw	r1, #349	; 0x15d
 800a2a8:	f001 fa76 	bl	800b798 <__assert_func>
 800a2ac:	f100 0514 	add.w	r5, r0, #20
 800a2b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4543      	cmp	r3, r8
 800a2ba:	d321      	bcc.n	800a300 <__multiply+0x98>
 800a2bc:	f104 0314 	add.w	r3, r4, #20
 800a2c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2c4:	f109 0314 	add.w	r3, r9, #20
 800a2c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a2cc:	9202      	str	r2, [sp, #8]
 800a2ce:	1b3a      	subs	r2, r7, r4
 800a2d0:	3a15      	subs	r2, #21
 800a2d2:	f022 0203 	bic.w	r2, r2, #3
 800a2d6:	3204      	adds	r2, #4
 800a2d8:	f104 0115 	add.w	r1, r4, #21
 800a2dc:	428f      	cmp	r7, r1
 800a2de:	bf38      	it	cc
 800a2e0:	2204      	movcc	r2, #4
 800a2e2:	9201      	str	r2, [sp, #4]
 800a2e4:	9a02      	ldr	r2, [sp, #8]
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d80c      	bhi.n	800a306 <__multiply+0x9e>
 800a2ec:	2e00      	cmp	r6, #0
 800a2ee:	dd03      	ble.n	800a2f8 <__multiply+0x90>
 800a2f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d05a      	beq.n	800a3ae <__multiply+0x146>
 800a2f8:	6106      	str	r6, [r0, #16]
 800a2fa:	b005      	add	sp, #20
 800a2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a300:	f843 2b04 	str.w	r2, [r3], #4
 800a304:	e7d8      	b.n	800a2b8 <__multiply+0x50>
 800a306:	f8b3 a000 	ldrh.w	sl, [r3]
 800a30a:	f1ba 0f00 	cmp.w	sl, #0
 800a30e:	d024      	beq.n	800a35a <__multiply+0xf2>
 800a310:	f104 0e14 	add.w	lr, r4, #20
 800a314:	46a9      	mov	r9, r5
 800a316:	f04f 0c00 	mov.w	ip, #0
 800a31a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a31e:	f8d9 1000 	ldr.w	r1, [r9]
 800a322:	fa1f fb82 	uxth.w	fp, r2
 800a326:	b289      	uxth	r1, r1
 800a328:	fb0a 110b 	mla	r1, sl, fp, r1
 800a32c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a330:	f8d9 2000 	ldr.w	r2, [r9]
 800a334:	4461      	add	r1, ip
 800a336:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a33a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a33e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a342:	b289      	uxth	r1, r1
 800a344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a348:	4577      	cmp	r7, lr
 800a34a:	f849 1b04 	str.w	r1, [r9], #4
 800a34e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a352:	d8e2      	bhi.n	800a31a <__multiply+0xb2>
 800a354:	9a01      	ldr	r2, [sp, #4]
 800a356:	f845 c002 	str.w	ip, [r5, r2]
 800a35a:	9a03      	ldr	r2, [sp, #12]
 800a35c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a360:	3304      	adds	r3, #4
 800a362:	f1b9 0f00 	cmp.w	r9, #0
 800a366:	d020      	beq.n	800a3aa <__multiply+0x142>
 800a368:	6829      	ldr	r1, [r5, #0]
 800a36a:	f104 0c14 	add.w	ip, r4, #20
 800a36e:	46ae      	mov	lr, r5
 800a370:	f04f 0a00 	mov.w	sl, #0
 800a374:	f8bc b000 	ldrh.w	fp, [ip]
 800a378:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a37c:	fb09 220b 	mla	r2, r9, fp, r2
 800a380:	4492      	add	sl, r2
 800a382:	b289      	uxth	r1, r1
 800a384:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a388:	f84e 1b04 	str.w	r1, [lr], #4
 800a38c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a390:	f8be 1000 	ldrh.w	r1, [lr]
 800a394:	0c12      	lsrs	r2, r2, #16
 800a396:	fb09 1102 	mla	r1, r9, r2, r1
 800a39a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a39e:	4567      	cmp	r7, ip
 800a3a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3a4:	d8e6      	bhi.n	800a374 <__multiply+0x10c>
 800a3a6:	9a01      	ldr	r2, [sp, #4]
 800a3a8:	50a9      	str	r1, [r5, r2]
 800a3aa:	3504      	adds	r5, #4
 800a3ac:	e79a      	b.n	800a2e4 <__multiply+0x7c>
 800a3ae:	3e01      	subs	r6, #1
 800a3b0:	e79c      	b.n	800a2ec <__multiply+0x84>
 800a3b2:	bf00      	nop
 800a3b4:	0800bfd8 	.word	0x0800bfd8
 800a3b8:	0800c064 	.word	0x0800c064

0800a3bc <__pow5mult>:
 800a3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c0:	4615      	mov	r5, r2
 800a3c2:	f012 0203 	ands.w	r2, r2, #3
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	460f      	mov	r7, r1
 800a3ca:	d007      	beq.n	800a3dc <__pow5mult+0x20>
 800a3cc:	4c25      	ldr	r4, [pc, #148]	; (800a464 <__pow5mult+0xa8>)
 800a3ce:	3a01      	subs	r2, #1
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3d6:	f7ff fe51 	bl	800a07c <__multadd>
 800a3da:	4607      	mov	r7, r0
 800a3dc:	10ad      	asrs	r5, r5, #2
 800a3de:	d03d      	beq.n	800a45c <__pow5mult+0xa0>
 800a3e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3e2:	b97c      	cbnz	r4, 800a404 <__pow5mult+0x48>
 800a3e4:	2010      	movs	r0, #16
 800a3e6:	f7ff fdc1 	bl	8009f6c <malloc>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	6270      	str	r0, [r6, #36]	; 0x24
 800a3ee:	b928      	cbnz	r0, 800a3fc <__pow5mult+0x40>
 800a3f0:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <__pow5mult+0xac>)
 800a3f2:	481e      	ldr	r0, [pc, #120]	; (800a46c <__pow5mult+0xb0>)
 800a3f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3f8:	f001 f9ce 	bl	800b798 <__assert_func>
 800a3fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a400:	6004      	str	r4, [r0, #0]
 800a402:	60c4      	str	r4, [r0, #12]
 800a404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a40c:	b94c      	cbnz	r4, 800a422 <__pow5mult+0x66>
 800a40e:	f240 2171 	movw	r1, #625	; 0x271
 800a412:	4630      	mov	r0, r6
 800a414:	f7ff ff12 	bl	800a23c <__i2b>
 800a418:	2300      	movs	r3, #0
 800a41a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a41e:	4604      	mov	r4, r0
 800a420:	6003      	str	r3, [r0, #0]
 800a422:	f04f 0900 	mov.w	r9, #0
 800a426:	07eb      	lsls	r3, r5, #31
 800a428:	d50a      	bpl.n	800a440 <__pow5mult+0x84>
 800a42a:	4639      	mov	r1, r7
 800a42c:	4622      	mov	r2, r4
 800a42e:	4630      	mov	r0, r6
 800a430:	f7ff ff1a 	bl	800a268 <__multiply>
 800a434:	4639      	mov	r1, r7
 800a436:	4680      	mov	r8, r0
 800a438:	4630      	mov	r0, r6
 800a43a:	f7ff fdfd 	bl	800a038 <_Bfree>
 800a43e:	4647      	mov	r7, r8
 800a440:	106d      	asrs	r5, r5, #1
 800a442:	d00b      	beq.n	800a45c <__pow5mult+0xa0>
 800a444:	6820      	ldr	r0, [r4, #0]
 800a446:	b938      	cbnz	r0, 800a458 <__pow5mult+0x9c>
 800a448:	4622      	mov	r2, r4
 800a44a:	4621      	mov	r1, r4
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff ff0b 	bl	800a268 <__multiply>
 800a452:	6020      	str	r0, [r4, #0]
 800a454:	f8c0 9000 	str.w	r9, [r0]
 800a458:	4604      	mov	r4, r0
 800a45a:	e7e4      	b.n	800a426 <__pow5mult+0x6a>
 800a45c:	4638      	mov	r0, r7
 800a45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a462:	bf00      	nop
 800a464:	0800c1b0 	.word	0x0800c1b0
 800a468:	0800bf66 	.word	0x0800bf66
 800a46c:	0800c064 	.word	0x0800c064

0800a470 <__lshift>:
 800a470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a474:	460c      	mov	r4, r1
 800a476:	6849      	ldr	r1, [r1, #4]
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a47e:	68a3      	ldr	r3, [r4, #8]
 800a480:	4607      	mov	r7, r0
 800a482:	4691      	mov	r9, r2
 800a484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a488:	f108 0601 	add.w	r6, r8, #1
 800a48c:	42b3      	cmp	r3, r6
 800a48e:	db0b      	blt.n	800a4a8 <__lshift+0x38>
 800a490:	4638      	mov	r0, r7
 800a492:	f7ff fd91 	bl	8009fb8 <_Balloc>
 800a496:	4605      	mov	r5, r0
 800a498:	b948      	cbnz	r0, 800a4ae <__lshift+0x3e>
 800a49a:	4602      	mov	r2, r0
 800a49c:	4b2a      	ldr	r3, [pc, #168]	; (800a548 <__lshift+0xd8>)
 800a49e:	482b      	ldr	r0, [pc, #172]	; (800a54c <__lshift+0xdc>)
 800a4a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a4a4:	f001 f978 	bl	800b798 <__assert_func>
 800a4a8:	3101      	adds	r1, #1
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	e7ee      	b.n	800a48c <__lshift+0x1c>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f100 0114 	add.w	r1, r0, #20
 800a4b4:	f100 0210 	add.w	r2, r0, #16
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	4553      	cmp	r3, sl
 800a4bc:	db37      	blt.n	800a52e <__lshift+0xbe>
 800a4be:	6920      	ldr	r0, [r4, #16]
 800a4c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4c4:	f104 0314 	add.w	r3, r4, #20
 800a4c8:	f019 091f 	ands.w	r9, r9, #31
 800a4cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4d4:	d02f      	beq.n	800a536 <__lshift+0xc6>
 800a4d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a4da:	468a      	mov	sl, r1
 800a4dc:	f04f 0c00 	mov.w	ip, #0
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	fa02 f209 	lsl.w	r2, r2, r9
 800a4e6:	ea42 020c 	orr.w	r2, r2, ip
 800a4ea:	f84a 2b04 	str.w	r2, [sl], #4
 800a4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f2:	4298      	cmp	r0, r3
 800a4f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a4f8:	d8f2      	bhi.n	800a4e0 <__lshift+0x70>
 800a4fa:	1b03      	subs	r3, r0, r4
 800a4fc:	3b15      	subs	r3, #21
 800a4fe:	f023 0303 	bic.w	r3, r3, #3
 800a502:	3304      	adds	r3, #4
 800a504:	f104 0215 	add.w	r2, r4, #21
 800a508:	4290      	cmp	r0, r2
 800a50a:	bf38      	it	cc
 800a50c:	2304      	movcc	r3, #4
 800a50e:	f841 c003 	str.w	ip, [r1, r3]
 800a512:	f1bc 0f00 	cmp.w	ip, #0
 800a516:	d001      	beq.n	800a51c <__lshift+0xac>
 800a518:	f108 0602 	add.w	r6, r8, #2
 800a51c:	3e01      	subs	r6, #1
 800a51e:	4638      	mov	r0, r7
 800a520:	612e      	str	r6, [r5, #16]
 800a522:	4621      	mov	r1, r4
 800a524:	f7ff fd88 	bl	800a038 <_Bfree>
 800a528:	4628      	mov	r0, r5
 800a52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a532:	3301      	adds	r3, #1
 800a534:	e7c1      	b.n	800a4ba <__lshift+0x4a>
 800a536:	3904      	subs	r1, #4
 800a538:	f853 2b04 	ldr.w	r2, [r3], #4
 800a53c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a540:	4298      	cmp	r0, r3
 800a542:	d8f9      	bhi.n	800a538 <__lshift+0xc8>
 800a544:	e7ea      	b.n	800a51c <__lshift+0xac>
 800a546:	bf00      	nop
 800a548:	0800bfd8 	.word	0x0800bfd8
 800a54c:	0800c064 	.word	0x0800c064

0800a550 <__mcmp>:
 800a550:	b530      	push	{r4, r5, lr}
 800a552:	6902      	ldr	r2, [r0, #16]
 800a554:	690c      	ldr	r4, [r1, #16]
 800a556:	1b12      	subs	r2, r2, r4
 800a558:	d10e      	bne.n	800a578 <__mcmp+0x28>
 800a55a:	f100 0314 	add.w	r3, r0, #20
 800a55e:	3114      	adds	r1, #20
 800a560:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a564:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a568:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a56c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a570:	42a5      	cmp	r5, r4
 800a572:	d003      	beq.n	800a57c <__mcmp+0x2c>
 800a574:	d305      	bcc.n	800a582 <__mcmp+0x32>
 800a576:	2201      	movs	r2, #1
 800a578:	4610      	mov	r0, r2
 800a57a:	bd30      	pop	{r4, r5, pc}
 800a57c:	4283      	cmp	r3, r0
 800a57e:	d3f3      	bcc.n	800a568 <__mcmp+0x18>
 800a580:	e7fa      	b.n	800a578 <__mcmp+0x28>
 800a582:	f04f 32ff 	mov.w	r2, #4294967295
 800a586:	e7f7      	b.n	800a578 <__mcmp+0x28>

0800a588 <__mdiff>:
 800a588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	460c      	mov	r4, r1
 800a58e:	4606      	mov	r6, r0
 800a590:	4611      	mov	r1, r2
 800a592:	4620      	mov	r0, r4
 800a594:	4690      	mov	r8, r2
 800a596:	f7ff ffdb 	bl	800a550 <__mcmp>
 800a59a:	1e05      	subs	r5, r0, #0
 800a59c:	d110      	bne.n	800a5c0 <__mdiff+0x38>
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7ff fd09 	bl	8009fb8 <_Balloc>
 800a5a6:	b930      	cbnz	r0, 800a5b6 <__mdiff+0x2e>
 800a5a8:	4b3a      	ldr	r3, [pc, #232]	; (800a694 <__mdiff+0x10c>)
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	f240 2132 	movw	r1, #562	; 0x232
 800a5b0:	4839      	ldr	r0, [pc, #228]	; (800a698 <__mdiff+0x110>)
 800a5b2:	f001 f8f1 	bl	800b798 <__assert_func>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c0:	bfa4      	itt	ge
 800a5c2:	4643      	movge	r3, r8
 800a5c4:	46a0      	movge	r8, r4
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a5cc:	bfa6      	itte	ge
 800a5ce:	461c      	movge	r4, r3
 800a5d0:	2500      	movge	r5, #0
 800a5d2:	2501      	movlt	r5, #1
 800a5d4:	f7ff fcf0 	bl	8009fb8 <_Balloc>
 800a5d8:	b920      	cbnz	r0, 800a5e4 <__mdiff+0x5c>
 800a5da:	4b2e      	ldr	r3, [pc, #184]	; (800a694 <__mdiff+0x10c>)
 800a5dc:	4602      	mov	r2, r0
 800a5de:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5e2:	e7e5      	b.n	800a5b0 <__mdiff+0x28>
 800a5e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a5e8:	6926      	ldr	r6, [r4, #16]
 800a5ea:	60c5      	str	r5, [r0, #12]
 800a5ec:	f104 0914 	add.w	r9, r4, #20
 800a5f0:	f108 0514 	add.w	r5, r8, #20
 800a5f4:	f100 0e14 	add.w	lr, r0, #20
 800a5f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a5fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a600:	f108 0210 	add.w	r2, r8, #16
 800a604:	46f2      	mov	sl, lr
 800a606:	2100      	movs	r1, #0
 800a608:	f859 3b04 	ldr.w	r3, [r9], #4
 800a60c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a610:	fa1f f883 	uxth.w	r8, r3
 800a614:	fa11 f18b 	uxtah	r1, r1, fp
 800a618:	0c1b      	lsrs	r3, r3, #16
 800a61a:	eba1 0808 	sub.w	r8, r1, r8
 800a61e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a622:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a626:	fa1f f888 	uxth.w	r8, r8
 800a62a:	1419      	asrs	r1, r3, #16
 800a62c:	454e      	cmp	r6, r9
 800a62e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a632:	f84a 3b04 	str.w	r3, [sl], #4
 800a636:	d8e7      	bhi.n	800a608 <__mdiff+0x80>
 800a638:	1b33      	subs	r3, r6, r4
 800a63a:	3b15      	subs	r3, #21
 800a63c:	f023 0303 	bic.w	r3, r3, #3
 800a640:	3304      	adds	r3, #4
 800a642:	3415      	adds	r4, #21
 800a644:	42a6      	cmp	r6, r4
 800a646:	bf38      	it	cc
 800a648:	2304      	movcc	r3, #4
 800a64a:	441d      	add	r5, r3
 800a64c:	4473      	add	r3, lr
 800a64e:	469e      	mov	lr, r3
 800a650:	462e      	mov	r6, r5
 800a652:	4566      	cmp	r6, ip
 800a654:	d30e      	bcc.n	800a674 <__mdiff+0xec>
 800a656:	f10c 0203 	add.w	r2, ip, #3
 800a65a:	1b52      	subs	r2, r2, r5
 800a65c:	f022 0203 	bic.w	r2, r2, #3
 800a660:	3d03      	subs	r5, #3
 800a662:	45ac      	cmp	ip, r5
 800a664:	bf38      	it	cc
 800a666:	2200      	movcc	r2, #0
 800a668:	441a      	add	r2, r3
 800a66a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a66e:	b17b      	cbz	r3, 800a690 <__mdiff+0x108>
 800a670:	6107      	str	r7, [r0, #16]
 800a672:	e7a3      	b.n	800a5bc <__mdiff+0x34>
 800a674:	f856 8b04 	ldr.w	r8, [r6], #4
 800a678:	fa11 f288 	uxtah	r2, r1, r8
 800a67c:	1414      	asrs	r4, r2, #16
 800a67e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a682:	b292      	uxth	r2, r2
 800a684:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a688:	f84e 2b04 	str.w	r2, [lr], #4
 800a68c:	1421      	asrs	r1, r4, #16
 800a68e:	e7e0      	b.n	800a652 <__mdiff+0xca>
 800a690:	3f01      	subs	r7, #1
 800a692:	e7ea      	b.n	800a66a <__mdiff+0xe2>
 800a694:	0800bfd8 	.word	0x0800bfd8
 800a698:	0800c064 	.word	0x0800c064

0800a69c <__ulp>:
 800a69c:	b082      	sub	sp, #8
 800a69e:	ed8d 0b00 	vstr	d0, [sp]
 800a6a2:	9b01      	ldr	r3, [sp, #4]
 800a6a4:	4912      	ldr	r1, [pc, #72]	; (800a6f0 <__ulp+0x54>)
 800a6a6:	4019      	ands	r1, r3
 800a6a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	dd05      	ble.n	800a6bc <__ulp+0x20>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	ec43 2b10 	vmov	d0, r2, r3
 800a6b8:	b002      	add	sp, #8
 800a6ba:	4770      	bx	lr
 800a6bc:	4249      	negs	r1, r1
 800a6be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a6c2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a6c6:	f04f 0200 	mov.w	r2, #0
 800a6ca:	f04f 0300 	mov.w	r3, #0
 800a6ce:	da04      	bge.n	800a6da <__ulp+0x3e>
 800a6d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a6d4:	fa41 f300 	asr.w	r3, r1, r0
 800a6d8:	e7ec      	b.n	800a6b4 <__ulp+0x18>
 800a6da:	f1a0 0114 	sub.w	r1, r0, #20
 800a6de:	291e      	cmp	r1, #30
 800a6e0:	bfda      	itte	le
 800a6e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a6e6:	fa20 f101 	lsrle.w	r1, r0, r1
 800a6ea:	2101      	movgt	r1, #1
 800a6ec:	460a      	mov	r2, r1
 800a6ee:	e7e1      	b.n	800a6b4 <__ulp+0x18>
 800a6f0:	7ff00000 	.word	0x7ff00000

0800a6f4 <__b2d>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	6905      	ldr	r5, [r0, #16]
 800a6f8:	f100 0714 	add.w	r7, r0, #20
 800a6fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a700:	1f2e      	subs	r6, r5, #4
 800a702:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a706:	4620      	mov	r0, r4
 800a708:	f7ff fd48 	bl	800a19c <__hi0bits>
 800a70c:	f1c0 0320 	rsb	r3, r0, #32
 800a710:	280a      	cmp	r0, #10
 800a712:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a790 <__b2d+0x9c>
 800a716:	600b      	str	r3, [r1, #0]
 800a718:	dc14      	bgt.n	800a744 <__b2d+0x50>
 800a71a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a71e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a722:	42b7      	cmp	r7, r6
 800a724:	ea41 030c 	orr.w	r3, r1, ip
 800a728:	bf34      	ite	cc
 800a72a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a72e:	2100      	movcs	r1, #0
 800a730:	3015      	adds	r0, #21
 800a732:	fa04 f000 	lsl.w	r0, r4, r0
 800a736:	fa21 f10e 	lsr.w	r1, r1, lr
 800a73a:	ea40 0201 	orr.w	r2, r0, r1
 800a73e:	ec43 2b10 	vmov	d0, r2, r3
 800a742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a744:	42b7      	cmp	r7, r6
 800a746:	bf3a      	itte	cc
 800a748:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a74c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a750:	2100      	movcs	r1, #0
 800a752:	380b      	subs	r0, #11
 800a754:	d017      	beq.n	800a786 <__b2d+0x92>
 800a756:	f1c0 0c20 	rsb	ip, r0, #32
 800a75a:	fa04 f500 	lsl.w	r5, r4, r0
 800a75e:	42be      	cmp	r6, r7
 800a760:	fa21 f40c 	lsr.w	r4, r1, ip
 800a764:	ea45 0504 	orr.w	r5, r5, r4
 800a768:	bf8c      	ite	hi
 800a76a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a76e:	2400      	movls	r4, #0
 800a770:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a774:	fa01 f000 	lsl.w	r0, r1, r0
 800a778:	fa24 f40c 	lsr.w	r4, r4, ip
 800a77c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a780:	ea40 0204 	orr.w	r2, r0, r4
 800a784:	e7db      	b.n	800a73e <__b2d+0x4a>
 800a786:	ea44 030c 	orr.w	r3, r4, ip
 800a78a:	460a      	mov	r2, r1
 800a78c:	e7d7      	b.n	800a73e <__b2d+0x4a>
 800a78e:	bf00      	nop
 800a790:	3ff00000 	.word	0x3ff00000

0800a794 <__d2b>:
 800a794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a798:	4689      	mov	r9, r1
 800a79a:	2101      	movs	r1, #1
 800a79c:	ec57 6b10 	vmov	r6, r7, d0
 800a7a0:	4690      	mov	r8, r2
 800a7a2:	f7ff fc09 	bl	8009fb8 <_Balloc>
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	b930      	cbnz	r0, 800a7b8 <__d2b+0x24>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	4b25      	ldr	r3, [pc, #148]	; (800a844 <__d2b+0xb0>)
 800a7ae:	4826      	ldr	r0, [pc, #152]	; (800a848 <__d2b+0xb4>)
 800a7b0:	f240 310a 	movw	r1, #778	; 0x30a
 800a7b4:	f000 fff0 	bl	800b798 <__assert_func>
 800a7b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7c0:	bb35      	cbnz	r5, 800a810 <__d2b+0x7c>
 800a7c2:	2e00      	cmp	r6, #0
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	d028      	beq.n	800a81a <__d2b+0x86>
 800a7c8:	4668      	mov	r0, sp
 800a7ca:	9600      	str	r6, [sp, #0]
 800a7cc:	f7ff fd06 	bl	800a1dc <__lo0bits>
 800a7d0:	9900      	ldr	r1, [sp, #0]
 800a7d2:	b300      	cbz	r0, 800a816 <__d2b+0x82>
 800a7d4:	9a01      	ldr	r2, [sp, #4]
 800a7d6:	f1c0 0320 	rsb	r3, r0, #32
 800a7da:	fa02 f303 	lsl.w	r3, r2, r3
 800a7de:	430b      	orrs	r3, r1
 800a7e0:	40c2      	lsrs	r2, r0
 800a7e2:	6163      	str	r3, [r4, #20]
 800a7e4:	9201      	str	r2, [sp, #4]
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	61a3      	str	r3, [r4, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bf14      	ite	ne
 800a7ee:	2202      	movne	r2, #2
 800a7f0:	2201      	moveq	r2, #1
 800a7f2:	6122      	str	r2, [r4, #16]
 800a7f4:	b1d5      	cbz	r5, 800a82c <__d2b+0x98>
 800a7f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7fa:	4405      	add	r5, r0
 800a7fc:	f8c9 5000 	str.w	r5, [r9]
 800a800:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a804:	f8c8 0000 	str.w	r0, [r8]
 800a808:	4620      	mov	r0, r4
 800a80a:	b003      	add	sp, #12
 800a80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a814:	e7d5      	b.n	800a7c2 <__d2b+0x2e>
 800a816:	6161      	str	r1, [r4, #20]
 800a818:	e7e5      	b.n	800a7e6 <__d2b+0x52>
 800a81a:	a801      	add	r0, sp, #4
 800a81c:	f7ff fcde 	bl	800a1dc <__lo0bits>
 800a820:	9b01      	ldr	r3, [sp, #4]
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	2201      	movs	r2, #1
 800a826:	6122      	str	r2, [r4, #16]
 800a828:	3020      	adds	r0, #32
 800a82a:	e7e3      	b.n	800a7f4 <__d2b+0x60>
 800a82c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a830:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a834:	f8c9 0000 	str.w	r0, [r9]
 800a838:	6918      	ldr	r0, [r3, #16]
 800a83a:	f7ff fcaf 	bl	800a19c <__hi0bits>
 800a83e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a842:	e7df      	b.n	800a804 <__d2b+0x70>
 800a844:	0800bfd8 	.word	0x0800bfd8
 800a848:	0800c064 	.word	0x0800c064

0800a84c <__ratio>:
 800a84c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	4688      	mov	r8, r1
 800a852:	4669      	mov	r1, sp
 800a854:	4681      	mov	r9, r0
 800a856:	f7ff ff4d 	bl	800a6f4 <__b2d>
 800a85a:	a901      	add	r1, sp, #4
 800a85c:	4640      	mov	r0, r8
 800a85e:	ec55 4b10 	vmov	r4, r5, d0
 800a862:	f7ff ff47 	bl	800a6f4 <__b2d>
 800a866:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a86a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a86e:	eba3 0c02 	sub.w	ip, r3, r2
 800a872:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a876:	1a9b      	subs	r3, r3, r2
 800a878:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a87c:	ec51 0b10 	vmov	r0, r1, d0
 800a880:	2b00      	cmp	r3, #0
 800a882:	bfd6      	itet	le
 800a884:	460a      	movle	r2, r1
 800a886:	462a      	movgt	r2, r5
 800a888:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a88c:	468b      	mov	fp, r1
 800a88e:	462f      	mov	r7, r5
 800a890:	bfd4      	ite	le
 800a892:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a896:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a89a:	4620      	mov	r0, r4
 800a89c:	ee10 2a10 	vmov	r2, s0
 800a8a0:	465b      	mov	r3, fp
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	f7f5 ffd2 	bl	800084c <__aeabi_ddiv>
 800a8a8:	ec41 0b10 	vmov	d0, r0, r1
 800a8ac:	b003      	add	sp, #12
 800a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8b2 <__copybits>:
 800a8b2:	3901      	subs	r1, #1
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	1149      	asrs	r1, r1, #5
 800a8b8:	6914      	ldr	r4, [r2, #16]
 800a8ba:	3101      	adds	r1, #1
 800a8bc:	f102 0314 	add.w	r3, r2, #20
 800a8c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8c8:	1f05      	subs	r5, r0, #4
 800a8ca:	42a3      	cmp	r3, r4
 800a8cc:	d30c      	bcc.n	800a8e8 <__copybits+0x36>
 800a8ce:	1aa3      	subs	r3, r4, r2
 800a8d0:	3b11      	subs	r3, #17
 800a8d2:	f023 0303 	bic.w	r3, r3, #3
 800a8d6:	3211      	adds	r2, #17
 800a8d8:	42a2      	cmp	r2, r4
 800a8da:	bf88      	it	hi
 800a8dc:	2300      	movhi	r3, #0
 800a8de:	4418      	add	r0, r3
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4288      	cmp	r0, r1
 800a8e4:	d305      	bcc.n	800a8f2 <__copybits+0x40>
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8ec:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8f0:	e7eb      	b.n	800a8ca <__copybits+0x18>
 800a8f2:	f840 3b04 	str.w	r3, [r0], #4
 800a8f6:	e7f4      	b.n	800a8e2 <__copybits+0x30>

0800a8f8 <__any_on>:
 800a8f8:	f100 0214 	add.w	r2, r0, #20
 800a8fc:	6900      	ldr	r0, [r0, #16]
 800a8fe:	114b      	asrs	r3, r1, #5
 800a900:	4298      	cmp	r0, r3
 800a902:	b510      	push	{r4, lr}
 800a904:	db11      	blt.n	800a92a <__any_on+0x32>
 800a906:	dd0a      	ble.n	800a91e <__any_on+0x26>
 800a908:	f011 011f 	ands.w	r1, r1, #31
 800a90c:	d007      	beq.n	800a91e <__any_on+0x26>
 800a90e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a912:	fa24 f001 	lsr.w	r0, r4, r1
 800a916:	fa00 f101 	lsl.w	r1, r0, r1
 800a91a:	428c      	cmp	r4, r1
 800a91c:	d10b      	bne.n	800a936 <__any_on+0x3e>
 800a91e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a922:	4293      	cmp	r3, r2
 800a924:	d803      	bhi.n	800a92e <__any_on+0x36>
 800a926:	2000      	movs	r0, #0
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	4603      	mov	r3, r0
 800a92c:	e7f7      	b.n	800a91e <__any_on+0x26>
 800a92e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a932:	2900      	cmp	r1, #0
 800a934:	d0f5      	beq.n	800a922 <__any_on+0x2a>
 800a936:	2001      	movs	r0, #1
 800a938:	e7f6      	b.n	800a928 <__any_on+0x30>

0800a93a <_calloc_r>:
 800a93a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a93c:	fba1 2402 	umull	r2, r4, r1, r2
 800a940:	b94c      	cbnz	r4, 800a956 <_calloc_r+0x1c>
 800a942:	4611      	mov	r1, r2
 800a944:	9201      	str	r2, [sp, #4]
 800a946:	f7fb ffe7 	bl	8006918 <_malloc_r>
 800a94a:	9a01      	ldr	r2, [sp, #4]
 800a94c:	4605      	mov	r5, r0
 800a94e:	b930      	cbnz	r0, 800a95e <_calloc_r+0x24>
 800a950:	4628      	mov	r0, r5
 800a952:	b003      	add	sp, #12
 800a954:	bd30      	pop	{r4, r5, pc}
 800a956:	220c      	movs	r2, #12
 800a958:	6002      	str	r2, [r0, #0]
 800a95a:	2500      	movs	r5, #0
 800a95c:	e7f8      	b.n	800a950 <_calloc_r+0x16>
 800a95e:	4621      	mov	r1, r4
 800a960:	f7fb ffb1 	bl	80068c6 <memset>
 800a964:	e7f4      	b.n	800a950 <_calloc_r+0x16>
	...

0800a968 <_free_r>:
 800a968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a96a:	2900      	cmp	r1, #0
 800a96c:	d044      	beq.n	800a9f8 <_free_r+0x90>
 800a96e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a972:	9001      	str	r0, [sp, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	f1a1 0404 	sub.w	r4, r1, #4
 800a97a:	bfb8      	it	lt
 800a97c:	18e4      	addlt	r4, r4, r3
 800a97e:	f7ff fb0f 	bl	8009fa0 <__malloc_lock>
 800a982:	4a1e      	ldr	r2, [pc, #120]	; (800a9fc <_free_r+0x94>)
 800a984:	9801      	ldr	r0, [sp, #4]
 800a986:	6813      	ldr	r3, [r2, #0]
 800a988:	b933      	cbnz	r3, 800a998 <_free_r+0x30>
 800a98a:	6063      	str	r3, [r4, #4]
 800a98c:	6014      	str	r4, [r2, #0]
 800a98e:	b003      	add	sp, #12
 800a990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a994:	f7ff bb0a 	b.w	8009fac <__malloc_unlock>
 800a998:	42a3      	cmp	r3, r4
 800a99a:	d908      	bls.n	800a9ae <_free_r+0x46>
 800a99c:	6825      	ldr	r5, [r4, #0]
 800a99e:	1961      	adds	r1, r4, r5
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	bf01      	itttt	eq
 800a9a4:	6819      	ldreq	r1, [r3, #0]
 800a9a6:	685b      	ldreq	r3, [r3, #4]
 800a9a8:	1949      	addeq	r1, r1, r5
 800a9aa:	6021      	streq	r1, [r4, #0]
 800a9ac:	e7ed      	b.n	800a98a <_free_r+0x22>
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	b10b      	cbz	r3, 800a9b8 <_free_r+0x50>
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d9fa      	bls.n	800a9ae <_free_r+0x46>
 800a9b8:	6811      	ldr	r1, [r2, #0]
 800a9ba:	1855      	adds	r5, r2, r1
 800a9bc:	42a5      	cmp	r5, r4
 800a9be:	d10b      	bne.n	800a9d8 <_free_r+0x70>
 800a9c0:	6824      	ldr	r4, [r4, #0]
 800a9c2:	4421      	add	r1, r4
 800a9c4:	1854      	adds	r4, r2, r1
 800a9c6:	42a3      	cmp	r3, r4
 800a9c8:	6011      	str	r1, [r2, #0]
 800a9ca:	d1e0      	bne.n	800a98e <_free_r+0x26>
 800a9cc:	681c      	ldr	r4, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	6053      	str	r3, [r2, #4]
 800a9d2:	4421      	add	r1, r4
 800a9d4:	6011      	str	r1, [r2, #0]
 800a9d6:	e7da      	b.n	800a98e <_free_r+0x26>
 800a9d8:	d902      	bls.n	800a9e0 <_free_r+0x78>
 800a9da:	230c      	movs	r3, #12
 800a9dc:	6003      	str	r3, [r0, #0]
 800a9de:	e7d6      	b.n	800a98e <_free_r+0x26>
 800a9e0:	6825      	ldr	r5, [r4, #0]
 800a9e2:	1961      	adds	r1, r4, r5
 800a9e4:	428b      	cmp	r3, r1
 800a9e6:	bf04      	itt	eq
 800a9e8:	6819      	ldreq	r1, [r3, #0]
 800a9ea:	685b      	ldreq	r3, [r3, #4]
 800a9ec:	6063      	str	r3, [r4, #4]
 800a9ee:	bf04      	itt	eq
 800a9f0:	1949      	addeq	r1, r1, r5
 800a9f2:	6021      	streq	r1, [r4, #0]
 800a9f4:	6054      	str	r4, [r2, #4]
 800a9f6:	e7ca      	b.n	800a98e <_free_r+0x26>
 800a9f8:	b003      	add	sp, #12
 800a9fa:	bd30      	pop	{r4, r5, pc}
 800a9fc:	20004c74 	.word	0x20004c74

0800aa00 <__ssputs_r>:
 800aa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa04:	688e      	ldr	r6, [r1, #8]
 800aa06:	429e      	cmp	r6, r3
 800aa08:	4682      	mov	sl, r0
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	4690      	mov	r8, r2
 800aa0e:	461f      	mov	r7, r3
 800aa10:	d838      	bhi.n	800aa84 <__ssputs_r+0x84>
 800aa12:	898a      	ldrh	r2, [r1, #12]
 800aa14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa18:	d032      	beq.n	800aa80 <__ssputs_r+0x80>
 800aa1a:	6825      	ldr	r5, [r4, #0]
 800aa1c:	6909      	ldr	r1, [r1, #16]
 800aa1e:	eba5 0901 	sub.w	r9, r5, r1
 800aa22:	6965      	ldr	r5, [r4, #20]
 800aa24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	444b      	add	r3, r9
 800aa30:	106d      	asrs	r5, r5, #1
 800aa32:	429d      	cmp	r5, r3
 800aa34:	bf38      	it	cc
 800aa36:	461d      	movcc	r5, r3
 800aa38:	0553      	lsls	r3, r2, #21
 800aa3a:	d531      	bpl.n	800aaa0 <__ssputs_r+0xa0>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	f7fb ff6b 	bl	8006918 <_malloc_r>
 800aa42:	4606      	mov	r6, r0
 800aa44:	b950      	cbnz	r0, 800aa5c <__ssputs_r+0x5c>
 800aa46:	230c      	movs	r3, #12
 800aa48:	f8ca 3000 	str.w	r3, [sl]
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	f04f 30ff 	mov.w	r0, #4294967295
 800aa58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5c:	6921      	ldr	r1, [r4, #16]
 800aa5e:	464a      	mov	r2, r9
 800aa60:	f7fb ff23 	bl	80068aa <memcpy>
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa6e:	81a3      	strh	r3, [r4, #12]
 800aa70:	6126      	str	r6, [r4, #16]
 800aa72:	6165      	str	r5, [r4, #20]
 800aa74:	444e      	add	r6, r9
 800aa76:	eba5 0509 	sub.w	r5, r5, r9
 800aa7a:	6026      	str	r6, [r4, #0]
 800aa7c:	60a5      	str	r5, [r4, #8]
 800aa7e:	463e      	mov	r6, r7
 800aa80:	42be      	cmp	r6, r7
 800aa82:	d900      	bls.n	800aa86 <__ssputs_r+0x86>
 800aa84:	463e      	mov	r6, r7
 800aa86:	6820      	ldr	r0, [r4, #0]
 800aa88:	4632      	mov	r2, r6
 800aa8a:	4641      	mov	r1, r8
 800aa8c:	f000 fed6 	bl	800b83c <memmove>
 800aa90:	68a3      	ldr	r3, [r4, #8]
 800aa92:	1b9b      	subs	r3, r3, r6
 800aa94:	60a3      	str	r3, [r4, #8]
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	4433      	add	r3, r6
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e7db      	b.n	800aa58 <__ssputs_r+0x58>
 800aaa0:	462a      	mov	r2, r5
 800aaa2:	f000 fee5 	bl	800b870 <_realloc_r>
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d1e1      	bne.n	800aa70 <__ssputs_r+0x70>
 800aaac:	6921      	ldr	r1, [r4, #16]
 800aaae:	4650      	mov	r0, sl
 800aab0:	f7ff ff5a 	bl	800a968 <_free_r>
 800aab4:	e7c7      	b.n	800aa46 <__ssputs_r+0x46>
	...

0800aab8 <_svfiprintf_r>:
 800aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	4698      	mov	r8, r3
 800aabe:	898b      	ldrh	r3, [r1, #12]
 800aac0:	061b      	lsls	r3, r3, #24
 800aac2:	b09d      	sub	sp, #116	; 0x74
 800aac4:	4607      	mov	r7, r0
 800aac6:	460d      	mov	r5, r1
 800aac8:	4614      	mov	r4, r2
 800aaca:	d50e      	bpl.n	800aaea <_svfiprintf_r+0x32>
 800aacc:	690b      	ldr	r3, [r1, #16]
 800aace:	b963      	cbnz	r3, 800aaea <_svfiprintf_r+0x32>
 800aad0:	2140      	movs	r1, #64	; 0x40
 800aad2:	f7fb ff21 	bl	8006918 <_malloc_r>
 800aad6:	6028      	str	r0, [r5, #0]
 800aad8:	6128      	str	r0, [r5, #16]
 800aada:	b920      	cbnz	r0, 800aae6 <_svfiprintf_r+0x2e>
 800aadc:	230c      	movs	r3, #12
 800aade:	603b      	str	r3, [r7, #0]
 800aae0:	f04f 30ff 	mov.w	r0, #4294967295
 800aae4:	e0d1      	b.n	800ac8a <_svfiprintf_r+0x1d2>
 800aae6:	2340      	movs	r3, #64	; 0x40
 800aae8:	616b      	str	r3, [r5, #20]
 800aaea:	2300      	movs	r3, #0
 800aaec:	9309      	str	r3, [sp, #36]	; 0x24
 800aaee:	2320      	movs	r3, #32
 800aaf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaf8:	2330      	movs	r3, #48	; 0x30
 800aafa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aca4 <_svfiprintf_r+0x1ec>
 800aafe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab02:	f04f 0901 	mov.w	r9, #1
 800ab06:	4623      	mov	r3, r4
 800ab08:	469a      	mov	sl, r3
 800ab0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab0e:	b10a      	cbz	r2, 800ab14 <_svfiprintf_r+0x5c>
 800ab10:	2a25      	cmp	r2, #37	; 0x25
 800ab12:	d1f9      	bne.n	800ab08 <_svfiprintf_r+0x50>
 800ab14:	ebba 0b04 	subs.w	fp, sl, r4
 800ab18:	d00b      	beq.n	800ab32 <_svfiprintf_r+0x7a>
 800ab1a:	465b      	mov	r3, fp
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ff6d 	bl	800aa00 <__ssputs_r>
 800ab26:	3001      	adds	r0, #1
 800ab28:	f000 80aa 	beq.w	800ac80 <_svfiprintf_r+0x1c8>
 800ab2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab2e:	445a      	add	r2, fp
 800ab30:	9209      	str	r2, [sp, #36]	; 0x24
 800ab32:	f89a 3000 	ldrb.w	r3, [sl]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 80a2 	beq.w	800ac80 <_svfiprintf_r+0x1c8>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab46:	f10a 0a01 	add.w	sl, sl, #1
 800ab4a:	9304      	str	r3, [sp, #16]
 800ab4c:	9307      	str	r3, [sp, #28]
 800ab4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab52:	931a      	str	r3, [sp, #104]	; 0x68
 800ab54:	4654      	mov	r4, sl
 800ab56:	2205      	movs	r2, #5
 800ab58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5c:	4851      	ldr	r0, [pc, #324]	; (800aca4 <_svfiprintf_r+0x1ec>)
 800ab5e:	f7f5 fb3f 	bl	80001e0 <memchr>
 800ab62:	9a04      	ldr	r2, [sp, #16]
 800ab64:	b9d8      	cbnz	r0, 800ab9e <_svfiprintf_r+0xe6>
 800ab66:	06d0      	lsls	r0, r2, #27
 800ab68:	bf44      	itt	mi
 800ab6a:	2320      	movmi	r3, #32
 800ab6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab70:	0711      	lsls	r1, r2, #28
 800ab72:	bf44      	itt	mi
 800ab74:	232b      	movmi	r3, #43	; 0x2b
 800ab76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab80:	d015      	beq.n	800abae <_svfiprintf_r+0xf6>
 800ab82:	9a07      	ldr	r2, [sp, #28]
 800ab84:	4654      	mov	r4, sl
 800ab86:	2000      	movs	r0, #0
 800ab88:	f04f 0c0a 	mov.w	ip, #10
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab92:	3b30      	subs	r3, #48	; 0x30
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d94e      	bls.n	800ac36 <_svfiprintf_r+0x17e>
 800ab98:	b1b0      	cbz	r0, 800abc8 <_svfiprintf_r+0x110>
 800ab9a:	9207      	str	r2, [sp, #28]
 800ab9c:	e014      	b.n	800abc8 <_svfiprintf_r+0x110>
 800ab9e:	eba0 0308 	sub.w	r3, r0, r8
 800aba2:	fa09 f303 	lsl.w	r3, r9, r3
 800aba6:	4313      	orrs	r3, r2
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	46a2      	mov	sl, r4
 800abac:	e7d2      	b.n	800ab54 <_svfiprintf_r+0x9c>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	1d19      	adds	r1, r3, #4
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	9103      	str	r1, [sp, #12]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bfbb      	ittet	lt
 800abba:	425b      	neglt	r3, r3
 800abbc:	f042 0202 	orrlt.w	r2, r2, #2
 800abc0:	9307      	strge	r3, [sp, #28]
 800abc2:	9307      	strlt	r3, [sp, #28]
 800abc4:	bfb8      	it	lt
 800abc6:	9204      	strlt	r2, [sp, #16]
 800abc8:	7823      	ldrb	r3, [r4, #0]
 800abca:	2b2e      	cmp	r3, #46	; 0x2e
 800abcc:	d10c      	bne.n	800abe8 <_svfiprintf_r+0x130>
 800abce:	7863      	ldrb	r3, [r4, #1]
 800abd0:	2b2a      	cmp	r3, #42	; 0x2a
 800abd2:	d135      	bne.n	800ac40 <_svfiprintf_r+0x188>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1d1a      	adds	r2, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	9203      	str	r2, [sp, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bfb8      	it	lt
 800abe0:	f04f 33ff 	movlt.w	r3, #4294967295
 800abe4:	3402      	adds	r4, #2
 800abe6:	9305      	str	r3, [sp, #20]
 800abe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800acb4 <_svfiprintf_r+0x1fc>
 800abec:	7821      	ldrb	r1, [r4, #0]
 800abee:	2203      	movs	r2, #3
 800abf0:	4650      	mov	r0, sl
 800abf2:	f7f5 faf5 	bl	80001e0 <memchr>
 800abf6:	b140      	cbz	r0, 800ac0a <_svfiprintf_r+0x152>
 800abf8:	2340      	movs	r3, #64	; 0x40
 800abfa:	eba0 000a 	sub.w	r0, r0, sl
 800abfe:	fa03 f000 	lsl.w	r0, r3, r0
 800ac02:	9b04      	ldr	r3, [sp, #16]
 800ac04:	4303      	orrs	r3, r0
 800ac06:	3401      	adds	r4, #1
 800ac08:	9304      	str	r3, [sp, #16]
 800ac0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0e:	4826      	ldr	r0, [pc, #152]	; (800aca8 <_svfiprintf_r+0x1f0>)
 800ac10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac14:	2206      	movs	r2, #6
 800ac16:	f7f5 fae3 	bl	80001e0 <memchr>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d038      	beq.n	800ac90 <_svfiprintf_r+0x1d8>
 800ac1e:	4b23      	ldr	r3, [pc, #140]	; (800acac <_svfiprintf_r+0x1f4>)
 800ac20:	bb1b      	cbnz	r3, 800ac6a <_svfiprintf_r+0x1b2>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	3307      	adds	r3, #7
 800ac26:	f023 0307 	bic.w	r3, r3, #7
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	9303      	str	r3, [sp, #12]
 800ac2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac30:	4433      	add	r3, r6
 800ac32:	9309      	str	r3, [sp, #36]	; 0x24
 800ac34:	e767      	b.n	800ab06 <_svfiprintf_r+0x4e>
 800ac36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	e7a5      	b.n	800ab8c <_svfiprintf_r+0xd4>
 800ac40:	2300      	movs	r3, #0
 800ac42:	3401      	adds	r4, #1
 800ac44:	9305      	str	r3, [sp, #20]
 800ac46:	4619      	mov	r1, r3
 800ac48:	f04f 0c0a 	mov.w	ip, #10
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac52:	3a30      	subs	r2, #48	; 0x30
 800ac54:	2a09      	cmp	r2, #9
 800ac56:	d903      	bls.n	800ac60 <_svfiprintf_r+0x1a8>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0c5      	beq.n	800abe8 <_svfiprintf_r+0x130>
 800ac5c:	9105      	str	r1, [sp, #20]
 800ac5e:	e7c3      	b.n	800abe8 <_svfiprintf_r+0x130>
 800ac60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac64:	4604      	mov	r4, r0
 800ac66:	2301      	movs	r3, #1
 800ac68:	e7f0      	b.n	800ac4c <_svfiprintf_r+0x194>
 800ac6a:	ab03      	add	r3, sp, #12
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	462a      	mov	r2, r5
 800ac70:	4b0f      	ldr	r3, [pc, #60]	; (800acb0 <_svfiprintf_r+0x1f8>)
 800ac72:	a904      	add	r1, sp, #16
 800ac74:	4638      	mov	r0, r7
 800ac76:	f7fb ff63 	bl	8006b40 <_printf_float>
 800ac7a:	1c42      	adds	r2, r0, #1
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	d1d6      	bne.n	800ac2e <_svfiprintf_r+0x176>
 800ac80:	89ab      	ldrh	r3, [r5, #12]
 800ac82:	065b      	lsls	r3, r3, #25
 800ac84:	f53f af2c 	bmi.w	800aae0 <_svfiprintf_r+0x28>
 800ac88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac8a:	b01d      	add	sp, #116	; 0x74
 800ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	ab03      	add	r3, sp, #12
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	462a      	mov	r2, r5
 800ac96:	4b06      	ldr	r3, [pc, #24]	; (800acb0 <_svfiprintf_r+0x1f8>)
 800ac98:	a904      	add	r1, sp, #16
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	f7fc f9f4 	bl	8007088 <_printf_i>
 800aca0:	e7eb      	b.n	800ac7a <_svfiprintf_r+0x1c2>
 800aca2:	bf00      	nop
 800aca4:	0800c1bc 	.word	0x0800c1bc
 800aca8:	0800c1c6 	.word	0x0800c1c6
 800acac:	08006b41 	.word	0x08006b41
 800acb0:	0800aa01 	.word	0x0800aa01
 800acb4:	0800c1c2 	.word	0x0800c1c2

0800acb8 <__svfiscanf_r>:
 800acb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acbc:	461d      	mov	r5, r3
 800acbe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800acc0:	07df      	lsls	r7, r3, #31
 800acc2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800acc6:	4606      	mov	r6, r0
 800acc8:	460c      	mov	r4, r1
 800acca:	4692      	mov	sl, r2
 800accc:	d405      	bmi.n	800acda <__svfiscanf_r+0x22>
 800acce:	898b      	ldrh	r3, [r1, #12]
 800acd0:	0598      	lsls	r0, r3, #22
 800acd2:	d402      	bmi.n	800acda <__svfiscanf_r+0x22>
 800acd4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800acd6:	f7fb fde6 	bl	80068a6 <__retarget_lock_acquire_recursive>
 800acda:	2300      	movs	r3, #0
 800acdc:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800ace0:	4ba6      	ldr	r3, [pc, #664]	; (800af7c <__svfiscanf_r+0x2c4>)
 800ace2:	93a0      	str	r3, [sp, #640]	; 0x280
 800ace4:	f10d 0804 	add.w	r8, sp, #4
 800ace8:	4ba5      	ldr	r3, [pc, #660]	; (800af80 <__svfiscanf_r+0x2c8>)
 800acea:	4fa6      	ldr	r7, [pc, #664]	; (800af84 <__svfiscanf_r+0x2cc>)
 800acec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800af88 <__svfiscanf_r+0x2d0>
 800acf0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800acf4:	93a1      	str	r3, [sp, #644]	; 0x284
 800acf6:	9500      	str	r5, [sp, #0]
 800acf8:	f89a 3000 	ldrb.w	r3, [sl]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 8173 	beq.w	800afe8 <__svfiscanf_r+0x330>
 800ad02:	5dd9      	ldrb	r1, [r3, r7]
 800ad04:	f011 0108 	ands.w	r1, r1, #8
 800ad08:	f10a 0501 	add.w	r5, sl, #1
 800ad0c:	d019      	beq.n	800ad42 <__svfiscanf_r+0x8a>
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dd0f      	ble.n	800ad34 <__svfiscanf_r+0x7c>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	781a      	ldrb	r2, [r3, #0]
 800ad18:	5cba      	ldrb	r2, [r7, r2]
 800ad1a:	0711      	lsls	r1, r2, #28
 800ad1c:	d401      	bmi.n	800ad22 <__svfiscanf_r+0x6a>
 800ad1e:	46aa      	mov	sl, r5
 800ad20:	e7ea      	b.n	800acf8 <__svfiscanf_r+0x40>
 800ad22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ad24:	3201      	adds	r2, #1
 800ad26:	9245      	str	r2, [sp, #276]	; 0x114
 800ad28:	6862      	ldr	r2, [r4, #4]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	3a01      	subs	r2, #1
 800ad2e:	6062      	str	r2, [r4, #4]
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	e7ec      	b.n	800ad0e <__svfiscanf_r+0x56>
 800ad34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad36:	4621      	mov	r1, r4
 800ad38:	4630      	mov	r0, r6
 800ad3a:	4798      	blx	r3
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d0e9      	beq.n	800ad14 <__svfiscanf_r+0x5c>
 800ad40:	e7ed      	b.n	800ad1e <__svfiscanf_r+0x66>
 800ad42:	2b25      	cmp	r3, #37	; 0x25
 800ad44:	d012      	beq.n	800ad6c <__svfiscanf_r+0xb4>
 800ad46:	469a      	mov	sl, r3
 800ad48:	6863      	ldr	r3, [r4, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f340 8095 	ble.w	800ae7a <__svfiscanf_r+0x1c2>
 800ad50:	6822      	ldr	r2, [r4, #0]
 800ad52:	7813      	ldrb	r3, [r2, #0]
 800ad54:	4553      	cmp	r3, sl
 800ad56:	f040 8147 	bne.w	800afe8 <__svfiscanf_r+0x330>
 800ad5a:	6863      	ldr	r3, [r4, #4]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	6063      	str	r3, [r4, #4]
 800ad60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ad62:	3201      	adds	r2, #1
 800ad64:	3301      	adds	r3, #1
 800ad66:	6022      	str	r2, [r4, #0]
 800ad68:	9345      	str	r3, [sp, #276]	; 0x114
 800ad6a:	e7d8      	b.n	800ad1e <__svfiscanf_r+0x66>
 800ad6c:	9141      	str	r1, [sp, #260]	; 0x104
 800ad6e:	9143      	str	r1, [sp, #268]	; 0x10c
 800ad70:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ad74:	2b2a      	cmp	r3, #42	; 0x2a
 800ad76:	bf02      	ittt	eq
 800ad78:	2310      	moveq	r3, #16
 800ad7a:	9341      	streq	r3, [sp, #260]	; 0x104
 800ad7c:	f10a 0502 	addeq.w	r5, sl, #2
 800ad80:	220a      	movs	r2, #10
 800ad82:	46aa      	mov	sl, r5
 800ad84:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ad88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ad8c:	2b09      	cmp	r3, #9
 800ad8e:	d91e      	bls.n	800adce <__svfiscanf_r+0x116>
 800ad90:	487d      	ldr	r0, [pc, #500]	; (800af88 <__svfiscanf_r+0x2d0>)
 800ad92:	2203      	movs	r2, #3
 800ad94:	f7f5 fa24 	bl	80001e0 <memchr>
 800ad98:	b140      	cbz	r0, 800adac <__svfiscanf_r+0xf4>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	eba0 0009 	sub.w	r0, r0, r9
 800ada0:	fa03 f000 	lsl.w	r0, r3, r0
 800ada4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ada6:	4318      	orrs	r0, r3
 800ada8:	9041      	str	r0, [sp, #260]	; 0x104
 800adaa:	4655      	mov	r5, sl
 800adac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adb0:	2b78      	cmp	r3, #120	; 0x78
 800adb2:	d807      	bhi.n	800adc4 <__svfiscanf_r+0x10c>
 800adb4:	2b57      	cmp	r3, #87	; 0x57
 800adb6:	d811      	bhi.n	800addc <__svfiscanf_r+0x124>
 800adb8:	2b25      	cmp	r3, #37	; 0x25
 800adba:	d0c4      	beq.n	800ad46 <__svfiscanf_r+0x8e>
 800adbc:	d858      	bhi.n	800ae70 <__svfiscanf_r+0x1b8>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 80c8 	beq.w	800af54 <__svfiscanf_r+0x29c>
 800adc4:	2303      	movs	r3, #3
 800adc6:	9347      	str	r3, [sp, #284]	; 0x11c
 800adc8:	230a      	movs	r3, #10
 800adca:	9342      	str	r3, [sp, #264]	; 0x108
 800adcc:	e07c      	b.n	800aec8 <__svfiscanf_r+0x210>
 800adce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800add0:	fb02 1103 	mla	r1, r2, r3, r1
 800add4:	3930      	subs	r1, #48	; 0x30
 800add6:	9143      	str	r1, [sp, #268]	; 0x10c
 800add8:	4655      	mov	r5, sl
 800adda:	e7d2      	b.n	800ad82 <__svfiscanf_r+0xca>
 800addc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ade0:	2a20      	cmp	r2, #32
 800ade2:	d8ef      	bhi.n	800adc4 <__svfiscanf_r+0x10c>
 800ade4:	a101      	add	r1, pc, #4	; (adr r1, 800adec <__svfiscanf_r+0x134>)
 800ade6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800adea:	bf00      	nop
 800adec:	0800aeb3 	.word	0x0800aeb3
 800adf0:	0800adc5 	.word	0x0800adc5
 800adf4:	0800adc5 	.word	0x0800adc5
 800adf8:	0800af11 	.word	0x0800af11
 800adfc:	0800adc5 	.word	0x0800adc5
 800ae00:	0800adc5 	.word	0x0800adc5
 800ae04:	0800adc5 	.word	0x0800adc5
 800ae08:	0800adc5 	.word	0x0800adc5
 800ae0c:	0800adc5 	.word	0x0800adc5
 800ae10:	0800adc5 	.word	0x0800adc5
 800ae14:	0800adc5 	.word	0x0800adc5
 800ae18:	0800af27 	.word	0x0800af27
 800ae1c:	0800aefd 	.word	0x0800aefd
 800ae20:	0800ae77 	.word	0x0800ae77
 800ae24:	0800ae77 	.word	0x0800ae77
 800ae28:	0800ae77 	.word	0x0800ae77
 800ae2c:	0800adc5 	.word	0x0800adc5
 800ae30:	0800af01 	.word	0x0800af01
 800ae34:	0800adc5 	.word	0x0800adc5
 800ae38:	0800adc5 	.word	0x0800adc5
 800ae3c:	0800adc5 	.word	0x0800adc5
 800ae40:	0800adc5 	.word	0x0800adc5
 800ae44:	0800af37 	.word	0x0800af37
 800ae48:	0800af09 	.word	0x0800af09
 800ae4c:	0800aeab 	.word	0x0800aeab
 800ae50:	0800adc5 	.word	0x0800adc5
 800ae54:	0800adc5 	.word	0x0800adc5
 800ae58:	0800af33 	.word	0x0800af33
 800ae5c:	0800adc5 	.word	0x0800adc5
 800ae60:	0800aefd 	.word	0x0800aefd
 800ae64:	0800adc5 	.word	0x0800adc5
 800ae68:	0800adc5 	.word	0x0800adc5
 800ae6c:	0800aeb3 	.word	0x0800aeb3
 800ae70:	3b45      	subs	r3, #69	; 0x45
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d8a6      	bhi.n	800adc4 <__svfiscanf_r+0x10c>
 800ae76:	2305      	movs	r3, #5
 800ae78:	e025      	b.n	800aec6 <__svfiscanf_r+0x20e>
 800ae7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4630      	mov	r0, r6
 800ae80:	4798      	blx	r3
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f43f af64 	beq.w	800ad50 <__svfiscanf_r+0x98>
 800ae88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae8a:	07da      	lsls	r2, r3, #31
 800ae8c:	f140 80a4 	bpl.w	800afd8 <__svfiscanf_r+0x320>
 800ae90:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d067      	beq.n	800af66 <__svfiscanf_r+0x2ae>
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ae9c:	bf18      	it	ne
 800ae9e:	f04f 30ff 	movne.w	r0, #4294967295
 800aea2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800aea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aeac:	f042 0220 	orr.w	r2, r2, #32
 800aeb0:	9241      	str	r2, [sp, #260]	; 0x104
 800aeb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aeb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeb8:	9241      	str	r2, [sp, #260]	; 0x104
 800aeba:	2210      	movs	r2, #16
 800aebc:	2b6f      	cmp	r3, #111	; 0x6f
 800aebe:	9242      	str	r2, [sp, #264]	; 0x108
 800aec0:	bf34      	ite	cc
 800aec2:	2303      	movcc	r3, #3
 800aec4:	2304      	movcs	r3, #4
 800aec6:	9347      	str	r3, [sp, #284]	; 0x11c
 800aec8:	6863      	ldr	r3, [r4, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dd4e      	ble.n	800af6c <__svfiscanf_r+0x2b4>
 800aece:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aed0:	065b      	lsls	r3, r3, #25
 800aed2:	d404      	bmi.n	800aede <__svfiscanf_r+0x226>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	781a      	ldrb	r2, [r3, #0]
 800aed8:	5cba      	ldrb	r2, [r7, r2]
 800aeda:	0710      	lsls	r0, r2, #28
 800aedc:	d456      	bmi.n	800af8c <__svfiscanf_r+0x2d4>
 800aede:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	dc65      	bgt.n	800afb0 <__svfiscanf_r+0x2f8>
 800aee4:	466b      	mov	r3, sp
 800aee6:	4622      	mov	r2, r4
 800aee8:	a941      	add	r1, sp, #260	; 0x104
 800aeea:	4630      	mov	r0, r6
 800aeec:	f000 f8b2 	bl	800b054 <_scanf_chars>
 800aef0:	2801      	cmp	r0, #1
 800aef2:	d079      	beq.n	800afe8 <__svfiscanf_r+0x330>
 800aef4:	2802      	cmp	r0, #2
 800aef6:	f47f af12 	bne.w	800ad1e <__svfiscanf_r+0x66>
 800aefa:	e7c5      	b.n	800ae88 <__svfiscanf_r+0x1d0>
 800aefc:	220a      	movs	r2, #10
 800aefe:	e7dd      	b.n	800aebc <__svfiscanf_r+0x204>
 800af00:	2300      	movs	r3, #0
 800af02:	9342      	str	r3, [sp, #264]	; 0x108
 800af04:	2303      	movs	r3, #3
 800af06:	e7de      	b.n	800aec6 <__svfiscanf_r+0x20e>
 800af08:	2308      	movs	r3, #8
 800af0a:	9342      	str	r3, [sp, #264]	; 0x108
 800af0c:	2304      	movs	r3, #4
 800af0e:	e7da      	b.n	800aec6 <__svfiscanf_r+0x20e>
 800af10:	4629      	mov	r1, r5
 800af12:	4640      	mov	r0, r8
 800af14:	f000 faa0 	bl	800b458 <__sccl>
 800af18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1e:	9341      	str	r3, [sp, #260]	; 0x104
 800af20:	4605      	mov	r5, r0
 800af22:	2301      	movs	r3, #1
 800af24:	e7cf      	b.n	800aec6 <__svfiscanf_r+0x20e>
 800af26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af2c:	9341      	str	r3, [sp, #260]	; 0x104
 800af2e:	2300      	movs	r3, #0
 800af30:	e7c9      	b.n	800aec6 <__svfiscanf_r+0x20e>
 800af32:	2302      	movs	r3, #2
 800af34:	e7c7      	b.n	800aec6 <__svfiscanf_r+0x20e>
 800af36:	9841      	ldr	r0, [sp, #260]	; 0x104
 800af38:	06c3      	lsls	r3, r0, #27
 800af3a:	f53f aef0 	bmi.w	800ad1e <__svfiscanf_r+0x66>
 800af3e:	9b00      	ldr	r3, [sp, #0]
 800af40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af42:	1d19      	adds	r1, r3, #4
 800af44:	9100      	str	r1, [sp, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f010 0f01 	tst.w	r0, #1
 800af4c:	bf14      	ite	ne
 800af4e:	801a      	strhne	r2, [r3, #0]
 800af50:	601a      	streq	r2, [r3, #0]
 800af52:	e6e4      	b.n	800ad1e <__svfiscanf_r+0x66>
 800af54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af56:	07d8      	lsls	r0, r3, #31
 800af58:	d405      	bmi.n	800af66 <__svfiscanf_r+0x2ae>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	0599      	lsls	r1, r3, #22
 800af5e:	d402      	bmi.n	800af66 <__svfiscanf_r+0x2ae>
 800af60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af62:	f7fb fca1 	bl	80068a8 <__retarget_lock_release_recursive>
 800af66:	f04f 30ff 	mov.w	r0, #4294967295
 800af6a:	e79a      	b.n	800aea2 <__svfiscanf_r+0x1ea>
 800af6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af6e:	4621      	mov	r1, r4
 800af70:	4630      	mov	r0, r6
 800af72:	4798      	blx	r3
 800af74:	2800      	cmp	r0, #0
 800af76:	d0aa      	beq.n	800aece <__svfiscanf_r+0x216>
 800af78:	e786      	b.n	800ae88 <__svfiscanf_r+0x1d0>
 800af7a:	bf00      	nop
 800af7c:	0800b64d 	.word	0x0800b64d
 800af80:	0800b331 	.word	0x0800b331
 800af84:	0800be59 	.word	0x0800be59
 800af88:	0800c1c2 	.word	0x0800c1c2
 800af8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af8e:	3201      	adds	r2, #1
 800af90:	9245      	str	r2, [sp, #276]	; 0x114
 800af92:	6862      	ldr	r2, [r4, #4]
 800af94:	3a01      	subs	r2, #1
 800af96:	2a00      	cmp	r2, #0
 800af98:	6062      	str	r2, [r4, #4]
 800af9a:	dd02      	ble.n	800afa2 <__svfiscanf_r+0x2ea>
 800af9c:	3301      	adds	r3, #1
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	e798      	b.n	800aed4 <__svfiscanf_r+0x21c>
 800afa2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800afa4:	4621      	mov	r1, r4
 800afa6:	4630      	mov	r0, r6
 800afa8:	4798      	blx	r3
 800afaa:	2800      	cmp	r0, #0
 800afac:	d092      	beq.n	800aed4 <__svfiscanf_r+0x21c>
 800afae:	e76b      	b.n	800ae88 <__svfiscanf_r+0x1d0>
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	dc06      	bgt.n	800afc2 <__svfiscanf_r+0x30a>
 800afb4:	466b      	mov	r3, sp
 800afb6:	4622      	mov	r2, r4
 800afb8:	a941      	add	r1, sp, #260	; 0x104
 800afba:	4630      	mov	r0, r6
 800afbc:	f000 f8a4 	bl	800b108 <_scanf_i>
 800afc0:	e796      	b.n	800aef0 <__svfiscanf_r+0x238>
 800afc2:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <__svfiscanf_r+0x348>)
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f43f aeaa 	beq.w	800ad1e <__svfiscanf_r+0x66>
 800afca:	466b      	mov	r3, sp
 800afcc:	4622      	mov	r2, r4
 800afce:	a941      	add	r1, sp, #260	; 0x104
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7fc f97f 	bl	80072d4 <_scanf_float>
 800afd6:	e78b      	b.n	800aef0 <__svfiscanf_r+0x238>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	0599      	lsls	r1, r3, #22
 800afdc:	f53f af58 	bmi.w	800ae90 <__svfiscanf_r+0x1d8>
 800afe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afe2:	f7fb fc61 	bl	80068a8 <__retarget_lock_release_recursive>
 800afe6:	e753      	b.n	800ae90 <__svfiscanf_r+0x1d8>
 800afe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afea:	07da      	lsls	r2, r3, #31
 800afec:	d405      	bmi.n	800affa <__svfiscanf_r+0x342>
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	059b      	lsls	r3, r3, #22
 800aff2:	d402      	bmi.n	800affa <__svfiscanf_r+0x342>
 800aff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aff6:	f7fb fc57 	bl	80068a8 <__retarget_lock_release_recursive>
 800affa:	9844      	ldr	r0, [sp, #272]	; 0x110
 800affc:	e751      	b.n	800aea2 <__svfiscanf_r+0x1ea>
 800affe:	bf00      	nop
 800b000:	080072d5 	.word	0x080072d5

0800b004 <_vfiscanf_r>:
 800b004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b006:	460c      	mov	r4, r1
 800b008:	4605      	mov	r5, r0
 800b00a:	b138      	cbz	r0, 800b01c <_vfiscanf_r+0x18>
 800b00c:	6981      	ldr	r1, [r0, #24]
 800b00e:	b929      	cbnz	r1, 800b01c <_vfiscanf_r+0x18>
 800b010:	e9cd 2300 	strd	r2, r3, [sp]
 800b014:	f7fb fb68 	bl	80066e8 <__sinit>
 800b018:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b01c:	490a      	ldr	r1, [pc, #40]	; (800b048 <_vfiscanf_r+0x44>)
 800b01e:	428c      	cmp	r4, r1
 800b020:	d107      	bne.n	800b032 <_vfiscanf_r+0x2e>
 800b022:	686c      	ldr	r4, [r5, #4]
 800b024:	4621      	mov	r1, r4
 800b026:	4628      	mov	r0, r5
 800b028:	b003      	add	sp, #12
 800b02a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b02e:	f7ff be43 	b.w	800acb8 <__svfiscanf_r>
 800b032:	4906      	ldr	r1, [pc, #24]	; (800b04c <_vfiscanf_r+0x48>)
 800b034:	428c      	cmp	r4, r1
 800b036:	d101      	bne.n	800b03c <_vfiscanf_r+0x38>
 800b038:	68ac      	ldr	r4, [r5, #8]
 800b03a:	e7f3      	b.n	800b024 <_vfiscanf_r+0x20>
 800b03c:	4904      	ldr	r1, [pc, #16]	; (800b050 <_vfiscanf_r+0x4c>)
 800b03e:	428c      	cmp	r4, r1
 800b040:	bf08      	it	eq
 800b042:	68ec      	ldreq	r4, [r5, #12]
 800b044:	e7ee      	b.n	800b024 <_vfiscanf_r+0x20>
 800b046:	bf00      	nop
 800b048:	0800bd8c 	.word	0x0800bd8c
 800b04c:	0800bdac 	.word	0x0800bdac
 800b050:	0800bd6c 	.word	0x0800bd6c

0800b054 <_scanf_chars>:
 800b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b058:	4615      	mov	r5, r2
 800b05a:	688a      	ldr	r2, [r1, #8]
 800b05c:	4680      	mov	r8, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	b932      	cbnz	r2, 800b070 <_scanf_chars+0x1c>
 800b062:	698a      	ldr	r2, [r1, #24]
 800b064:	2a00      	cmp	r2, #0
 800b066:	bf0c      	ite	eq
 800b068:	2201      	moveq	r2, #1
 800b06a:	f04f 32ff 	movne.w	r2, #4294967295
 800b06e:	608a      	str	r2, [r1, #8]
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b104 <_scanf_chars+0xb0>
 800b076:	06d1      	lsls	r1, r2, #27
 800b078:	bf5f      	itttt	pl
 800b07a:	681a      	ldrpl	r2, [r3, #0]
 800b07c:	1d11      	addpl	r1, r2, #4
 800b07e:	6019      	strpl	r1, [r3, #0]
 800b080:	6816      	ldrpl	r6, [r2, #0]
 800b082:	2700      	movs	r7, #0
 800b084:	69a0      	ldr	r0, [r4, #24]
 800b086:	b188      	cbz	r0, 800b0ac <_scanf_chars+0x58>
 800b088:	2801      	cmp	r0, #1
 800b08a:	d107      	bne.n	800b09c <_scanf_chars+0x48>
 800b08c:	682a      	ldr	r2, [r5, #0]
 800b08e:	7811      	ldrb	r1, [r2, #0]
 800b090:	6962      	ldr	r2, [r4, #20]
 800b092:	5c52      	ldrb	r2, [r2, r1]
 800b094:	b952      	cbnz	r2, 800b0ac <_scanf_chars+0x58>
 800b096:	2f00      	cmp	r7, #0
 800b098:	d031      	beq.n	800b0fe <_scanf_chars+0xaa>
 800b09a:	e022      	b.n	800b0e2 <_scanf_chars+0x8e>
 800b09c:	2802      	cmp	r0, #2
 800b09e:	d120      	bne.n	800b0e2 <_scanf_chars+0x8e>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b0a8:	071b      	lsls	r3, r3, #28
 800b0aa:	d41a      	bmi.n	800b0e2 <_scanf_chars+0x8e>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	06da      	lsls	r2, r3, #27
 800b0b0:	bf5e      	ittt	pl
 800b0b2:	682b      	ldrpl	r3, [r5, #0]
 800b0b4:	781b      	ldrbpl	r3, [r3, #0]
 800b0b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b0ba:	682a      	ldr	r2, [r5, #0]
 800b0bc:	686b      	ldr	r3, [r5, #4]
 800b0be:	3201      	adds	r2, #1
 800b0c0:	602a      	str	r2, [r5, #0]
 800b0c2:	68a2      	ldr	r2, [r4, #8]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	3a01      	subs	r2, #1
 800b0c8:	606b      	str	r3, [r5, #4]
 800b0ca:	3701      	adds	r7, #1
 800b0cc:	60a2      	str	r2, [r4, #8]
 800b0ce:	b142      	cbz	r2, 800b0e2 <_scanf_chars+0x8e>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	dcd7      	bgt.n	800b084 <_scanf_chars+0x30>
 800b0d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4640      	mov	r0, r8
 800b0dc:	4798      	blx	r3
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d0d0      	beq.n	800b084 <_scanf_chars+0x30>
 800b0e2:	6823      	ldr	r3, [r4, #0]
 800b0e4:	f013 0310 	ands.w	r3, r3, #16
 800b0e8:	d105      	bne.n	800b0f6 <_scanf_chars+0xa2>
 800b0ea:	68e2      	ldr	r2, [r4, #12]
 800b0ec:	3201      	adds	r2, #1
 800b0ee:	60e2      	str	r2, [r4, #12]
 800b0f0:	69a2      	ldr	r2, [r4, #24]
 800b0f2:	b102      	cbz	r2, 800b0f6 <_scanf_chars+0xa2>
 800b0f4:	7033      	strb	r3, [r6, #0]
 800b0f6:	6923      	ldr	r3, [r4, #16]
 800b0f8:	443b      	add	r3, r7
 800b0fa:	6123      	str	r3, [r4, #16]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b102:	bf00      	nop
 800b104:	0800be59 	.word	0x0800be59

0800b108 <_scanf_i>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	4698      	mov	r8, r3
 800b10e:	4b76      	ldr	r3, [pc, #472]	; (800b2e8 <_scanf_i+0x1e0>)
 800b110:	460c      	mov	r4, r1
 800b112:	4682      	mov	sl, r0
 800b114:	4616      	mov	r6, r2
 800b116:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b11a:	b087      	sub	sp, #28
 800b11c:	ab03      	add	r3, sp, #12
 800b11e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b122:	4b72      	ldr	r3, [pc, #456]	; (800b2ec <_scanf_i+0x1e4>)
 800b124:	69a1      	ldr	r1, [r4, #24]
 800b126:	4a72      	ldr	r2, [pc, #456]	; (800b2f0 <_scanf_i+0x1e8>)
 800b128:	2903      	cmp	r1, #3
 800b12a:	bf18      	it	ne
 800b12c:	461a      	movne	r2, r3
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	9201      	str	r2, [sp, #4]
 800b132:	1e5a      	subs	r2, r3, #1
 800b134:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b138:	bf88      	it	hi
 800b13a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b13e:	4627      	mov	r7, r4
 800b140:	bf82      	ittt	hi
 800b142:	eb03 0905 	addhi.w	r9, r3, r5
 800b146:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b14a:	60a3      	strhi	r3, [r4, #8]
 800b14c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b150:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b154:	bf98      	it	ls
 800b156:	f04f 0900 	movls.w	r9, #0
 800b15a:	6023      	str	r3, [r4, #0]
 800b15c:	463d      	mov	r5, r7
 800b15e:	f04f 0b00 	mov.w	fp, #0
 800b162:	6831      	ldr	r1, [r6, #0]
 800b164:	ab03      	add	r3, sp, #12
 800b166:	7809      	ldrb	r1, [r1, #0]
 800b168:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b16c:	2202      	movs	r2, #2
 800b16e:	f7f5 f837 	bl	80001e0 <memchr>
 800b172:	b328      	cbz	r0, 800b1c0 <_scanf_i+0xb8>
 800b174:	f1bb 0f01 	cmp.w	fp, #1
 800b178:	d159      	bne.n	800b22e <_scanf_i+0x126>
 800b17a:	6862      	ldr	r2, [r4, #4]
 800b17c:	b92a      	cbnz	r2, 800b18a <_scanf_i+0x82>
 800b17e:	6822      	ldr	r2, [r4, #0]
 800b180:	2308      	movs	r3, #8
 800b182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b186:	6063      	str	r3, [r4, #4]
 800b188:	6022      	str	r2, [r4, #0]
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b190:	6022      	str	r2, [r4, #0]
 800b192:	68a2      	ldr	r2, [r4, #8]
 800b194:	1e51      	subs	r1, r2, #1
 800b196:	60a1      	str	r1, [r4, #8]
 800b198:	b192      	cbz	r2, 800b1c0 <_scanf_i+0xb8>
 800b19a:	6832      	ldr	r2, [r6, #0]
 800b19c:	1c51      	adds	r1, r2, #1
 800b19e:	6031      	str	r1, [r6, #0]
 800b1a0:	7812      	ldrb	r2, [r2, #0]
 800b1a2:	f805 2b01 	strb.w	r2, [r5], #1
 800b1a6:	6872      	ldr	r2, [r6, #4]
 800b1a8:	3a01      	subs	r2, #1
 800b1aa:	2a00      	cmp	r2, #0
 800b1ac:	6072      	str	r2, [r6, #4]
 800b1ae:	dc07      	bgt.n	800b1c0 <_scanf_i+0xb8>
 800b1b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4650      	mov	r0, sl
 800b1b8:	4790      	blx	r2
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	f040 8085 	bne.w	800b2ca <_scanf_i+0x1c2>
 800b1c0:	f10b 0b01 	add.w	fp, fp, #1
 800b1c4:	f1bb 0f03 	cmp.w	fp, #3
 800b1c8:	d1cb      	bne.n	800b162 <_scanf_i+0x5a>
 800b1ca:	6863      	ldr	r3, [r4, #4]
 800b1cc:	b90b      	cbnz	r3, 800b1d2 <_scanf_i+0xca>
 800b1ce:	230a      	movs	r3, #10
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	6863      	ldr	r3, [r4, #4]
 800b1d4:	4947      	ldr	r1, [pc, #284]	; (800b2f4 <_scanf_i+0x1ec>)
 800b1d6:	6960      	ldr	r0, [r4, #20]
 800b1d8:	1ac9      	subs	r1, r1, r3
 800b1da:	f000 f93d 	bl	800b458 <__sccl>
 800b1de:	f04f 0b00 	mov.w	fp, #0
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	6822      	ldr	r2, [r4, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d03d      	beq.n	800b266 <_scanf_i+0x15e>
 800b1ea:	6831      	ldr	r1, [r6, #0]
 800b1ec:	6960      	ldr	r0, [r4, #20]
 800b1ee:	f891 c000 	ldrb.w	ip, [r1]
 800b1f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d035      	beq.n	800b266 <_scanf_i+0x15e>
 800b1fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b1fe:	d124      	bne.n	800b24a <_scanf_i+0x142>
 800b200:	0510      	lsls	r0, r2, #20
 800b202:	d522      	bpl.n	800b24a <_scanf_i+0x142>
 800b204:	f10b 0b01 	add.w	fp, fp, #1
 800b208:	f1b9 0f00 	cmp.w	r9, #0
 800b20c:	d003      	beq.n	800b216 <_scanf_i+0x10e>
 800b20e:	3301      	adds	r3, #1
 800b210:	f109 39ff 	add.w	r9, r9, #4294967295
 800b214:	60a3      	str	r3, [r4, #8]
 800b216:	6873      	ldr	r3, [r6, #4]
 800b218:	3b01      	subs	r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	6073      	str	r3, [r6, #4]
 800b21e:	dd1b      	ble.n	800b258 <_scanf_i+0x150>
 800b220:	6833      	ldr	r3, [r6, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	6033      	str	r3, [r6, #0]
 800b226:	68a3      	ldr	r3, [r4, #8]
 800b228:	3b01      	subs	r3, #1
 800b22a:	60a3      	str	r3, [r4, #8]
 800b22c:	e7d9      	b.n	800b1e2 <_scanf_i+0xda>
 800b22e:	f1bb 0f02 	cmp.w	fp, #2
 800b232:	d1ae      	bne.n	800b192 <_scanf_i+0x8a>
 800b234:	6822      	ldr	r2, [r4, #0]
 800b236:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b23a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b23e:	d1bf      	bne.n	800b1c0 <_scanf_i+0xb8>
 800b240:	2310      	movs	r3, #16
 800b242:	6063      	str	r3, [r4, #4]
 800b244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b248:	e7a2      	b.n	800b190 <_scanf_i+0x88>
 800b24a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b24e:	6022      	str	r2, [r4, #0]
 800b250:	780b      	ldrb	r3, [r1, #0]
 800b252:	f805 3b01 	strb.w	r3, [r5], #1
 800b256:	e7de      	b.n	800b216 <_scanf_i+0x10e>
 800b258:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b25c:	4631      	mov	r1, r6
 800b25e:	4650      	mov	r0, sl
 800b260:	4798      	blx	r3
 800b262:	2800      	cmp	r0, #0
 800b264:	d0df      	beq.n	800b226 <_scanf_i+0x11e>
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	05db      	lsls	r3, r3, #23
 800b26a:	d50d      	bpl.n	800b288 <_scanf_i+0x180>
 800b26c:	42bd      	cmp	r5, r7
 800b26e:	d909      	bls.n	800b284 <_scanf_i+0x17c>
 800b270:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b274:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b278:	4632      	mov	r2, r6
 800b27a:	4650      	mov	r0, sl
 800b27c:	4798      	blx	r3
 800b27e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b282:	464d      	mov	r5, r9
 800b284:	42bd      	cmp	r5, r7
 800b286:	d02d      	beq.n	800b2e4 <_scanf_i+0x1dc>
 800b288:	6822      	ldr	r2, [r4, #0]
 800b28a:	f012 0210 	ands.w	r2, r2, #16
 800b28e:	d113      	bne.n	800b2b8 <_scanf_i+0x1b0>
 800b290:	702a      	strb	r2, [r5, #0]
 800b292:	6863      	ldr	r3, [r4, #4]
 800b294:	9e01      	ldr	r6, [sp, #4]
 800b296:	4639      	mov	r1, r7
 800b298:	4650      	mov	r0, sl
 800b29a:	47b0      	blx	r6
 800b29c:	6821      	ldr	r1, [r4, #0]
 800b29e:	f8d8 3000 	ldr.w	r3, [r8]
 800b2a2:	f011 0f20 	tst.w	r1, #32
 800b2a6:	d013      	beq.n	800b2d0 <_scanf_i+0x1c8>
 800b2a8:	1d1a      	adds	r2, r3, #4
 800b2aa:	f8c8 2000 	str.w	r2, [r8]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6018      	str	r0, [r3, #0]
 800b2b2:	68e3      	ldr	r3, [r4, #12]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	60e3      	str	r3, [r4, #12]
 800b2b8:	1bed      	subs	r5, r5, r7
 800b2ba:	44ab      	add	fp, r5
 800b2bc:	6925      	ldr	r5, [r4, #16]
 800b2be:	445d      	add	r5, fp
 800b2c0:	6125      	str	r5, [r4, #16]
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	b007      	add	sp, #28
 800b2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ca:	f04f 0b00 	mov.w	fp, #0
 800b2ce:	e7ca      	b.n	800b266 <_scanf_i+0x15e>
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	f8c8 2000 	str.w	r2, [r8]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f011 0f01 	tst.w	r1, #1
 800b2dc:	bf14      	ite	ne
 800b2de:	8018      	strhne	r0, [r3, #0]
 800b2e0:	6018      	streq	r0, [r3, #0]
 800b2e2:	e7e6      	b.n	800b2b2 <_scanf_i+0x1aa>
 800b2e4:	2001      	movs	r0, #1
 800b2e6:	e7ed      	b.n	800b2c4 <_scanf_i+0x1bc>
 800b2e8:	0800bcb4 	.word	0x0800bcb4
 800b2ec:	0800b5d5 	.word	0x0800b5d5
 800b2f0:	0800872d 	.word	0x0800872d
 800b2f4:	0800c1e6 	.word	0x0800c1e6

0800b2f8 <_read_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d07      	ldr	r5, [pc, #28]	; (800b318 <_read_r+0x20>)
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	4608      	mov	r0, r1
 800b300:	4611      	mov	r1, r2
 800b302:	2200      	movs	r2, #0
 800b304:	602a      	str	r2, [r5, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	f7f6 f95d 	bl	80015c6 <_read>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	d102      	bne.n	800b316 <_read_r+0x1e>
 800b310:	682b      	ldr	r3, [r5, #0]
 800b312:	b103      	cbz	r3, 800b316 <_read_r+0x1e>
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	bd38      	pop	{r3, r4, r5, pc}
 800b318:	20004c7c 	.word	0x20004c7c

0800b31c <lflush>:
 800b31c:	8983      	ldrh	r3, [r0, #12]
 800b31e:	f003 0309 	and.w	r3, r3, #9
 800b322:	2b09      	cmp	r3, #9
 800b324:	d101      	bne.n	800b32a <lflush+0xe>
 800b326:	f7fe ba23 	b.w	8009770 <fflush>
 800b32a:	2000      	movs	r0, #0
 800b32c:	4770      	bx	lr
	...

0800b330 <__srefill_r>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	460c      	mov	r4, r1
 800b334:	4605      	mov	r5, r0
 800b336:	b118      	cbz	r0, 800b340 <__srefill_r+0x10>
 800b338:	6983      	ldr	r3, [r0, #24]
 800b33a:	b90b      	cbnz	r3, 800b340 <__srefill_r+0x10>
 800b33c:	f7fb f9d4 	bl	80066e8 <__sinit>
 800b340:	4b3b      	ldr	r3, [pc, #236]	; (800b430 <__srefill_r+0x100>)
 800b342:	429c      	cmp	r4, r3
 800b344:	d10a      	bne.n	800b35c <__srefill_r+0x2c>
 800b346:	686c      	ldr	r4, [r5, #4]
 800b348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b34c:	2300      	movs	r3, #0
 800b34e:	6063      	str	r3, [r4, #4]
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	069e      	lsls	r6, r3, #26
 800b354:	d50c      	bpl.n	800b370 <__srefill_r+0x40>
 800b356:	f04f 30ff 	mov.w	r0, #4294967295
 800b35a:	e066      	b.n	800b42a <__srefill_r+0xfa>
 800b35c:	4b35      	ldr	r3, [pc, #212]	; (800b434 <__srefill_r+0x104>)
 800b35e:	429c      	cmp	r4, r3
 800b360:	d101      	bne.n	800b366 <__srefill_r+0x36>
 800b362:	68ac      	ldr	r4, [r5, #8]
 800b364:	e7f0      	b.n	800b348 <__srefill_r+0x18>
 800b366:	4b34      	ldr	r3, [pc, #208]	; (800b438 <__srefill_r+0x108>)
 800b368:	429c      	cmp	r4, r3
 800b36a:	bf08      	it	eq
 800b36c:	68ec      	ldreq	r4, [r5, #12]
 800b36e:	e7eb      	b.n	800b348 <__srefill_r+0x18>
 800b370:	0758      	lsls	r0, r3, #29
 800b372:	d448      	bmi.n	800b406 <__srefill_r+0xd6>
 800b374:	06d9      	lsls	r1, r3, #27
 800b376:	d405      	bmi.n	800b384 <__srefill_r+0x54>
 800b378:	2309      	movs	r3, #9
 800b37a:	602b      	str	r3, [r5, #0]
 800b37c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	e7e8      	b.n	800b356 <__srefill_r+0x26>
 800b384:	071a      	lsls	r2, r3, #28
 800b386:	d50b      	bpl.n	800b3a0 <__srefill_r+0x70>
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7fe f9b4 	bl	80096f8 <_fflush_r>
 800b390:	2800      	cmp	r0, #0
 800b392:	d1e0      	bne.n	800b356 <__srefill_r+0x26>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	60a0      	str	r0, [r4, #8]
 800b398:	f023 0308 	bic.w	r3, r3, #8
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	61a0      	str	r0, [r4, #24]
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	f043 0304 	orr.w	r3, r3, #4
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	b91b      	cbnz	r3, 800b3b4 <__srefill_r+0x84>
 800b3ac:	4621      	mov	r1, r4
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f7fe fd9c 	bl	8009eec <__smakebuf_r>
 800b3b4:	89a6      	ldrh	r6, [r4, #12]
 800b3b6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b3ba:	07b3      	lsls	r3, r6, #30
 800b3bc:	d00f      	beq.n	800b3de <__srefill_r+0xae>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	4b1e      	ldr	r3, [pc, #120]	; (800b43c <__srefill_r+0x10c>)
 800b3c4:	491e      	ldr	r1, [pc, #120]	; (800b440 <__srefill_r+0x110>)
 800b3c6:	6818      	ldr	r0, [r3, #0]
 800b3c8:	f006 0609 	and.w	r6, r6, #9
 800b3cc:	f7fb fa0a 	bl	80067e4 <_fwalk>
 800b3d0:	2e09      	cmp	r6, #9
 800b3d2:	81a7      	strh	r7, [r4, #12]
 800b3d4:	d103      	bne.n	800b3de <__srefill_r+0xae>
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4628      	mov	r0, r5
 800b3da:	f7fe f907 	bl	80095ec <__sflush_r>
 800b3de:	6922      	ldr	r2, [r4, #16]
 800b3e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b3e2:	6963      	ldr	r3, [r4, #20]
 800b3e4:	6a21      	ldr	r1, [r4, #32]
 800b3e6:	6022      	str	r2, [r4, #0]
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b0      	blx	r6
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	6060      	str	r0, [r4, #4]
 800b3f0:	dc1c      	bgt.n	800b42c <__srefill_r+0xfc>
 800b3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3f6:	bf17      	itett	ne
 800b3f8:	2200      	movne	r2, #0
 800b3fa:	f043 0320 	orreq.w	r3, r3, #32
 800b3fe:	6062      	strne	r2, [r4, #4]
 800b400:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b404:	e7bc      	b.n	800b380 <__srefill_r+0x50>
 800b406:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b408:	2900      	cmp	r1, #0
 800b40a:	d0cd      	beq.n	800b3a8 <__srefill_r+0x78>
 800b40c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b410:	4299      	cmp	r1, r3
 800b412:	d002      	beq.n	800b41a <__srefill_r+0xea>
 800b414:	4628      	mov	r0, r5
 800b416:	f7ff faa7 	bl	800a968 <_free_r>
 800b41a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b41c:	6063      	str	r3, [r4, #4]
 800b41e:	2000      	movs	r0, #0
 800b420:	6360      	str	r0, [r4, #52]	; 0x34
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0c0      	beq.n	800b3a8 <__srefill_r+0x78>
 800b426:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b42c:	2000      	movs	r0, #0
 800b42e:	e7fc      	b.n	800b42a <__srefill_r+0xfa>
 800b430:	0800bd8c 	.word	0x0800bd8c
 800b434:	0800bdac 	.word	0x0800bdac
 800b438:	0800bd6c 	.word	0x0800bd6c
 800b43c:	0800bdcc 	.word	0x0800bdcc
 800b440:	0800b31d 	.word	0x0800b31d
 800b444:	00000000 	.word	0x00000000

0800b448 <nan>:
 800b448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b450 <nan+0x8>
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	00000000 	.word	0x00000000
 800b454:	7ff80000 	.word	0x7ff80000

0800b458 <__sccl>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	780b      	ldrb	r3, [r1, #0]
 800b45c:	4604      	mov	r4, r0
 800b45e:	2b5e      	cmp	r3, #94	; 0x5e
 800b460:	bf0b      	itete	eq
 800b462:	784b      	ldrbeq	r3, [r1, #1]
 800b464:	1c48      	addne	r0, r1, #1
 800b466:	1c88      	addeq	r0, r1, #2
 800b468:	2200      	movne	r2, #0
 800b46a:	bf08      	it	eq
 800b46c:	2201      	moveq	r2, #1
 800b46e:	1e61      	subs	r1, r4, #1
 800b470:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b474:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b478:	42a9      	cmp	r1, r5
 800b47a:	d1fb      	bne.n	800b474 <__sccl+0x1c>
 800b47c:	b90b      	cbnz	r3, 800b482 <__sccl+0x2a>
 800b47e:	3801      	subs	r0, #1
 800b480:	bd70      	pop	{r4, r5, r6, pc}
 800b482:	f082 0201 	eor.w	r2, r2, #1
 800b486:	54e2      	strb	r2, [r4, r3]
 800b488:	4605      	mov	r5, r0
 800b48a:	4628      	mov	r0, r5
 800b48c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b490:	292d      	cmp	r1, #45	; 0x2d
 800b492:	d006      	beq.n	800b4a2 <__sccl+0x4a>
 800b494:	295d      	cmp	r1, #93	; 0x5d
 800b496:	d0f3      	beq.n	800b480 <__sccl+0x28>
 800b498:	b909      	cbnz	r1, 800b49e <__sccl+0x46>
 800b49a:	4628      	mov	r0, r5
 800b49c:	e7f0      	b.n	800b480 <__sccl+0x28>
 800b49e:	460b      	mov	r3, r1
 800b4a0:	e7f1      	b.n	800b486 <__sccl+0x2e>
 800b4a2:	786e      	ldrb	r6, [r5, #1]
 800b4a4:	2e5d      	cmp	r6, #93	; 0x5d
 800b4a6:	d0fa      	beq.n	800b49e <__sccl+0x46>
 800b4a8:	42b3      	cmp	r3, r6
 800b4aa:	dcf8      	bgt.n	800b49e <__sccl+0x46>
 800b4ac:	3502      	adds	r5, #2
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	3101      	adds	r1, #1
 800b4b2:	428e      	cmp	r6, r1
 800b4b4:	5462      	strb	r2, [r4, r1]
 800b4b6:	dcfb      	bgt.n	800b4b0 <__sccl+0x58>
 800b4b8:	1af1      	subs	r1, r6, r3
 800b4ba:	3901      	subs	r1, #1
 800b4bc:	1c58      	adds	r0, r3, #1
 800b4be:	42b3      	cmp	r3, r6
 800b4c0:	bfa8      	it	ge
 800b4c2:	2100      	movge	r1, #0
 800b4c4:	1843      	adds	r3, r0, r1
 800b4c6:	e7e0      	b.n	800b48a <__sccl+0x32>

0800b4c8 <strncmp>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	b17a      	cbz	r2, 800b4ec <strncmp+0x24>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	3901      	subs	r1, #1
 800b4d0:	1884      	adds	r4, r0, r2
 800b4d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b4d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b4da:	4290      	cmp	r0, r2
 800b4dc:	d101      	bne.n	800b4e2 <strncmp+0x1a>
 800b4de:	42a3      	cmp	r3, r4
 800b4e0:	d101      	bne.n	800b4e6 <strncmp+0x1e>
 800b4e2:	1a80      	subs	r0, r0, r2
 800b4e4:	bd10      	pop	{r4, pc}
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d1f3      	bne.n	800b4d2 <strncmp+0xa>
 800b4ea:	e7fa      	b.n	800b4e2 <strncmp+0x1a>
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	e7f9      	b.n	800b4e4 <strncmp+0x1c>

0800b4f0 <_strtoul_l.constprop.0>:
 800b4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4f4:	4f36      	ldr	r7, [pc, #216]	; (800b5d0 <_strtoul_l.constprop.0+0xe0>)
 800b4f6:	4686      	mov	lr, r0
 800b4f8:	460d      	mov	r5, r1
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b500:	5de6      	ldrb	r6, [r4, r7]
 800b502:	f016 0608 	ands.w	r6, r6, #8
 800b506:	d1f8      	bne.n	800b4fa <_strtoul_l.constprop.0+0xa>
 800b508:	2c2d      	cmp	r4, #45	; 0x2d
 800b50a:	d12f      	bne.n	800b56c <_strtoul_l.constprop.0+0x7c>
 800b50c:	782c      	ldrb	r4, [r5, #0]
 800b50e:	2601      	movs	r6, #1
 800b510:	1c85      	adds	r5, r0, #2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d057      	beq.n	800b5c6 <_strtoul_l.constprop.0+0xd6>
 800b516:	2b10      	cmp	r3, #16
 800b518:	d109      	bne.n	800b52e <_strtoul_l.constprop.0+0x3e>
 800b51a:	2c30      	cmp	r4, #48	; 0x30
 800b51c:	d107      	bne.n	800b52e <_strtoul_l.constprop.0+0x3e>
 800b51e:	7828      	ldrb	r0, [r5, #0]
 800b520:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b524:	2858      	cmp	r0, #88	; 0x58
 800b526:	d149      	bne.n	800b5bc <_strtoul_l.constprop.0+0xcc>
 800b528:	786c      	ldrb	r4, [r5, #1]
 800b52a:	2310      	movs	r3, #16
 800b52c:	3502      	adds	r5, #2
 800b52e:	f04f 38ff 	mov.w	r8, #4294967295
 800b532:	2700      	movs	r7, #0
 800b534:	fbb8 f8f3 	udiv	r8, r8, r3
 800b538:	fb03 f908 	mul.w	r9, r3, r8
 800b53c:	ea6f 0909 	mvn.w	r9, r9
 800b540:	4638      	mov	r0, r7
 800b542:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b546:	f1bc 0f09 	cmp.w	ip, #9
 800b54a:	d814      	bhi.n	800b576 <_strtoul_l.constprop.0+0x86>
 800b54c:	4664      	mov	r4, ip
 800b54e:	42a3      	cmp	r3, r4
 800b550:	dd22      	ble.n	800b598 <_strtoul_l.constprop.0+0xa8>
 800b552:	2f00      	cmp	r7, #0
 800b554:	db1d      	blt.n	800b592 <_strtoul_l.constprop.0+0xa2>
 800b556:	4580      	cmp	r8, r0
 800b558:	d31b      	bcc.n	800b592 <_strtoul_l.constprop.0+0xa2>
 800b55a:	d101      	bne.n	800b560 <_strtoul_l.constprop.0+0x70>
 800b55c:	45a1      	cmp	r9, r4
 800b55e:	db18      	blt.n	800b592 <_strtoul_l.constprop.0+0xa2>
 800b560:	fb00 4003 	mla	r0, r0, r3, r4
 800b564:	2701      	movs	r7, #1
 800b566:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b56a:	e7ea      	b.n	800b542 <_strtoul_l.constprop.0+0x52>
 800b56c:	2c2b      	cmp	r4, #43	; 0x2b
 800b56e:	bf04      	itt	eq
 800b570:	782c      	ldrbeq	r4, [r5, #0]
 800b572:	1c85      	addeq	r5, r0, #2
 800b574:	e7cd      	b.n	800b512 <_strtoul_l.constprop.0+0x22>
 800b576:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b57a:	f1bc 0f19 	cmp.w	ip, #25
 800b57e:	d801      	bhi.n	800b584 <_strtoul_l.constprop.0+0x94>
 800b580:	3c37      	subs	r4, #55	; 0x37
 800b582:	e7e4      	b.n	800b54e <_strtoul_l.constprop.0+0x5e>
 800b584:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b588:	f1bc 0f19 	cmp.w	ip, #25
 800b58c:	d804      	bhi.n	800b598 <_strtoul_l.constprop.0+0xa8>
 800b58e:	3c57      	subs	r4, #87	; 0x57
 800b590:	e7dd      	b.n	800b54e <_strtoul_l.constprop.0+0x5e>
 800b592:	f04f 37ff 	mov.w	r7, #4294967295
 800b596:	e7e6      	b.n	800b566 <_strtoul_l.constprop.0+0x76>
 800b598:	2f00      	cmp	r7, #0
 800b59a:	da07      	bge.n	800b5ac <_strtoul_l.constprop.0+0xbc>
 800b59c:	2322      	movs	r3, #34	; 0x22
 800b59e:	f8ce 3000 	str.w	r3, [lr]
 800b5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a6:	b932      	cbnz	r2, 800b5b6 <_strtoul_l.constprop.0+0xc6>
 800b5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ac:	b106      	cbz	r6, 800b5b0 <_strtoul_l.constprop.0+0xc0>
 800b5ae:	4240      	negs	r0, r0
 800b5b0:	2a00      	cmp	r2, #0
 800b5b2:	d0f9      	beq.n	800b5a8 <_strtoul_l.constprop.0+0xb8>
 800b5b4:	b107      	cbz	r7, 800b5b8 <_strtoul_l.constprop.0+0xc8>
 800b5b6:	1e69      	subs	r1, r5, #1
 800b5b8:	6011      	str	r1, [r2, #0]
 800b5ba:	e7f5      	b.n	800b5a8 <_strtoul_l.constprop.0+0xb8>
 800b5bc:	2430      	movs	r4, #48	; 0x30
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1b5      	bne.n	800b52e <_strtoul_l.constprop.0+0x3e>
 800b5c2:	2308      	movs	r3, #8
 800b5c4:	e7b3      	b.n	800b52e <_strtoul_l.constprop.0+0x3e>
 800b5c6:	2c30      	cmp	r4, #48	; 0x30
 800b5c8:	d0a9      	beq.n	800b51e <_strtoul_l.constprop.0+0x2e>
 800b5ca:	230a      	movs	r3, #10
 800b5cc:	e7af      	b.n	800b52e <_strtoul_l.constprop.0+0x3e>
 800b5ce:	bf00      	nop
 800b5d0:	0800be59 	.word	0x0800be59

0800b5d4 <_strtoul_r>:
 800b5d4:	f7ff bf8c 	b.w	800b4f0 <_strtoul_l.constprop.0>

0800b5d8 <__submore>:
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	460c      	mov	r4, r1
 800b5de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b5e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5e4:	4299      	cmp	r1, r3
 800b5e6:	d11d      	bne.n	800b624 <__submore+0x4c>
 800b5e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b5ec:	f7fb f994 	bl	8006918 <_malloc_r>
 800b5f0:	b918      	cbnz	r0, 800b5fa <__submore+0x22>
 800b5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5fe:	63a3      	str	r3, [r4, #56]	; 0x38
 800b600:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b604:	6360      	str	r0, [r4, #52]	; 0x34
 800b606:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b60a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b60e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b612:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b616:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b61a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b61e:	6020      	str	r0, [r4, #0]
 800b620:	2000      	movs	r0, #0
 800b622:	e7e8      	b.n	800b5f6 <__submore+0x1e>
 800b624:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b626:	0077      	lsls	r7, r6, #1
 800b628:	463a      	mov	r2, r7
 800b62a:	f000 f921 	bl	800b870 <_realloc_r>
 800b62e:	4605      	mov	r5, r0
 800b630:	2800      	cmp	r0, #0
 800b632:	d0de      	beq.n	800b5f2 <__submore+0x1a>
 800b634:	eb00 0806 	add.w	r8, r0, r6
 800b638:	4601      	mov	r1, r0
 800b63a:	4632      	mov	r2, r6
 800b63c:	4640      	mov	r0, r8
 800b63e:	f7fb f934 	bl	80068aa <memcpy>
 800b642:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b646:	f8c4 8000 	str.w	r8, [r4]
 800b64a:	e7e9      	b.n	800b620 <__submore+0x48>

0800b64c <_ungetc_r>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	4614      	mov	r4, r2
 800b650:	1c4a      	adds	r2, r1, #1
 800b652:	4606      	mov	r6, r0
 800b654:	460d      	mov	r5, r1
 800b656:	d103      	bne.n	800b660 <_ungetc_r+0x14>
 800b658:	f04f 35ff 	mov.w	r5, #4294967295
 800b65c:	4628      	mov	r0, r5
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	b118      	cbz	r0, 800b66a <_ungetc_r+0x1e>
 800b662:	6983      	ldr	r3, [r0, #24]
 800b664:	b90b      	cbnz	r3, 800b66a <_ungetc_r+0x1e>
 800b666:	f7fb f83f 	bl	80066e8 <__sinit>
 800b66a:	4b41      	ldr	r3, [pc, #260]	; (800b770 <_ungetc_r+0x124>)
 800b66c:	429c      	cmp	r4, r3
 800b66e:	d11d      	bne.n	800b6ac <_ungetc_r+0x60>
 800b670:	6874      	ldr	r4, [r6, #4]
 800b672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b674:	07db      	lsls	r3, r3, #31
 800b676:	d405      	bmi.n	800b684 <_ungetc_r+0x38>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	0598      	lsls	r0, r3, #22
 800b67c:	d402      	bmi.n	800b684 <_ungetc_r+0x38>
 800b67e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b680:	f7fb f911 	bl	80068a6 <__retarget_lock_acquire_recursive>
 800b684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b688:	f023 0320 	bic.w	r3, r3, #32
 800b68c:	0759      	lsls	r1, r3, #29
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	b29a      	uxth	r2, r3
 800b692:	d42d      	bmi.n	800b6f0 <_ungetc_r+0xa4>
 800b694:	06d3      	lsls	r3, r2, #27
 800b696:	d413      	bmi.n	800b6c0 <_ungetc_r+0x74>
 800b698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b69a:	07dd      	lsls	r5, r3, #31
 800b69c:	d4dc      	bmi.n	800b658 <_ungetc_r+0xc>
 800b69e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b6a2:	d1d9      	bne.n	800b658 <_ungetc_r+0xc>
 800b6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6a6:	f7fb f8ff 	bl	80068a8 <__retarget_lock_release_recursive>
 800b6aa:	e7d5      	b.n	800b658 <_ungetc_r+0xc>
 800b6ac:	4b31      	ldr	r3, [pc, #196]	; (800b774 <_ungetc_r+0x128>)
 800b6ae:	429c      	cmp	r4, r3
 800b6b0:	d101      	bne.n	800b6b6 <_ungetc_r+0x6a>
 800b6b2:	68b4      	ldr	r4, [r6, #8]
 800b6b4:	e7dd      	b.n	800b672 <_ungetc_r+0x26>
 800b6b6:	4b30      	ldr	r3, [pc, #192]	; (800b778 <_ungetc_r+0x12c>)
 800b6b8:	429c      	cmp	r4, r3
 800b6ba:	bf08      	it	eq
 800b6bc:	68f4      	ldreq	r4, [r6, #12]
 800b6be:	e7d8      	b.n	800b672 <_ungetc_r+0x26>
 800b6c0:	0710      	lsls	r0, r2, #28
 800b6c2:	d511      	bpl.n	800b6e8 <_ungetc_r+0x9c>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	f7fe f816 	bl	80096f8 <_fflush_r>
 800b6cc:	b130      	cbz	r0, 800b6dc <_ungetc_r+0x90>
 800b6ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6d0:	07d9      	lsls	r1, r3, #31
 800b6d2:	d4c1      	bmi.n	800b658 <_ungetc_r+0xc>
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b6da:	e7e2      	b.n	800b6a2 <_ungetc_r+0x56>
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	60a0      	str	r0, [r4, #8]
 800b6e0:	f023 0308 	bic.w	r3, r3, #8
 800b6e4:	81a3      	strh	r3, [r4, #12]
 800b6e6:	61a0      	str	r0, [r4, #24]
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f043 0304 	orr.w	r3, r3, #4
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6f2:	6862      	ldr	r2, [r4, #4]
 800b6f4:	b2ed      	uxtb	r5, r5
 800b6f6:	b1d3      	cbz	r3, 800b72e <_ungetc_r+0xe2>
 800b6f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	dc05      	bgt.n	800b70a <_ungetc_r+0xbe>
 800b6fe:	4621      	mov	r1, r4
 800b700:	4630      	mov	r0, r6
 800b702:	f7ff ff69 	bl	800b5d8 <__submore>
 800b706:	2800      	cmp	r0, #0
 800b708:	d1e1      	bne.n	800b6ce <_ungetc_r+0x82>
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	1e5a      	subs	r2, r3, #1
 800b70e:	6022      	str	r2, [r4, #0]
 800b710:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	3301      	adds	r3, #1
 800b718:	6063      	str	r3, [r4, #4]
 800b71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b71c:	07da      	lsls	r2, r3, #31
 800b71e:	d49d      	bmi.n	800b65c <_ungetc_r+0x10>
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	059b      	lsls	r3, r3, #22
 800b724:	d49a      	bmi.n	800b65c <_ungetc_r+0x10>
 800b726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b728:	f7fb f8be 	bl	80068a8 <__retarget_lock_release_recursive>
 800b72c:	e796      	b.n	800b65c <_ungetc_r+0x10>
 800b72e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b730:	6920      	ldr	r0, [r4, #16]
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	f001 0101 	and.w	r1, r1, #1
 800b738:	b160      	cbz	r0, 800b754 <_ungetc_r+0x108>
 800b73a:	4298      	cmp	r0, r3
 800b73c:	d20a      	bcs.n	800b754 <_ungetc_r+0x108>
 800b73e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800b742:	42a8      	cmp	r0, r5
 800b744:	d106      	bne.n	800b754 <_ungetc_r+0x108>
 800b746:	3b01      	subs	r3, #1
 800b748:	3201      	adds	r2, #1
 800b74a:	6023      	str	r3, [r4, #0]
 800b74c:	6062      	str	r2, [r4, #4]
 800b74e:	2900      	cmp	r1, #0
 800b750:	d184      	bne.n	800b65c <_ungetc_r+0x10>
 800b752:	e7e5      	b.n	800b720 <_ungetc_r+0xd4>
 800b754:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b75c:	6363      	str	r3, [r4, #52]	; 0x34
 800b75e:	2303      	movs	r3, #3
 800b760:	63a3      	str	r3, [r4, #56]	; 0x38
 800b762:	4623      	mov	r3, r4
 800b764:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	2301      	movs	r3, #1
 800b76c:	6063      	str	r3, [r4, #4]
 800b76e:	e7ee      	b.n	800b74e <_ungetc_r+0x102>
 800b770:	0800bd8c 	.word	0x0800bd8c
 800b774:	0800bdac 	.word	0x0800bdac
 800b778:	0800bd6c 	.word	0x0800bd6c

0800b77c <__ascii_wctomb>:
 800b77c:	b149      	cbz	r1, 800b792 <__ascii_wctomb+0x16>
 800b77e:	2aff      	cmp	r2, #255	; 0xff
 800b780:	bf85      	ittet	hi
 800b782:	238a      	movhi	r3, #138	; 0x8a
 800b784:	6003      	strhi	r3, [r0, #0]
 800b786:	700a      	strbls	r2, [r1, #0]
 800b788:	f04f 30ff 	movhi.w	r0, #4294967295
 800b78c:	bf98      	it	ls
 800b78e:	2001      	movls	r0, #1
 800b790:	4770      	bx	lr
 800b792:	4608      	mov	r0, r1
 800b794:	4770      	bx	lr
	...

0800b798 <__assert_func>:
 800b798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b79a:	4614      	mov	r4, r2
 800b79c:	461a      	mov	r2, r3
 800b79e:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <__assert_func+0x2c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	68d8      	ldr	r0, [r3, #12]
 800b7a6:	b14c      	cbz	r4, 800b7bc <__assert_func+0x24>
 800b7a8:	4b07      	ldr	r3, [pc, #28]	; (800b7c8 <__assert_func+0x30>)
 800b7aa:	9100      	str	r1, [sp, #0]
 800b7ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7b0:	4906      	ldr	r1, [pc, #24]	; (800b7cc <__assert_func+0x34>)
 800b7b2:	462b      	mov	r3, r5
 800b7b4:	f000 f80e 	bl	800b7d4 <fiprintf>
 800b7b8:	f000 f9e2 	bl	800bb80 <abort>
 800b7bc:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <__assert_func+0x38>)
 800b7be:	461c      	mov	r4, r3
 800b7c0:	e7f3      	b.n	800b7aa <__assert_func+0x12>
 800b7c2:	bf00      	nop
 800b7c4:	20000010 	.word	0x20000010
 800b7c8:	0800c1e8 	.word	0x0800c1e8
 800b7cc:	0800c1f5 	.word	0x0800c1f5
 800b7d0:	0800c223 	.word	0x0800c223

0800b7d4 <fiprintf>:
 800b7d4:	b40e      	push	{r1, r2, r3}
 800b7d6:	b503      	push	{r0, r1, lr}
 800b7d8:	4601      	mov	r1, r0
 800b7da:	ab03      	add	r3, sp, #12
 800b7dc:	4805      	ldr	r0, [pc, #20]	; (800b7f4 <fiprintf+0x20>)
 800b7de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7e2:	6800      	ldr	r0, [r0, #0]
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	f000 f89b 	bl	800b920 <_vfiprintf_r>
 800b7ea:	b002      	add	sp, #8
 800b7ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7f0:	b003      	add	sp, #12
 800b7f2:	4770      	bx	lr
 800b7f4:	20000010 	.word	0x20000010

0800b7f8 <_fstat_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4d07      	ldr	r5, [pc, #28]	; (800b818 <_fstat_r+0x20>)
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4604      	mov	r4, r0
 800b800:	4608      	mov	r0, r1
 800b802:	4611      	mov	r1, r2
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	f7f5 ff23 	bl	8001650 <_fstat>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	d102      	bne.n	800b814 <_fstat_r+0x1c>
 800b80e:	682b      	ldr	r3, [r5, #0]
 800b810:	b103      	cbz	r3, 800b814 <_fstat_r+0x1c>
 800b812:	6023      	str	r3, [r4, #0]
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	bf00      	nop
 800b818:	20004c7c 	.word	0x20004c7c

0800b81c <_isatty_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4d06      	ldr	r5, [pc, #24]	; (800b838 <_isatty_r+0x1c>)
 800b820:	2300      	movs	r3, #0
 800b822:	4604      	mov	r4, r0
 800b824:	4608      	mov	r0, r1
 800b826:	602b      	str	r3, [r5, #0]
 800b828:	f7f5 ff22 	bl	8001670 <_isatty>
 800b82c:	1c43      	adds	r3, r0, #1
 800b82e:	d102      	bne.n	800b836 <_isatty_r+0x1a>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	b103      	cbz	r3, 800b836 <_isatty_r+0x1a>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	20004c7c 	.word	0x20004c7c

0800b83c <memmove>:
 800b83c:	4288      	cmp	r0, r1
 800b83e:	b510      	push	{r4, lr}
 800b840:	eb01 0402 	add.w	r4, r1, r2
 800b844:	d902      	bls.n	800b84c <memmove+0x10>
 800b846:	4284      	cmp	r4, r0
 800b848:	4623      	mov	r3, r4
 800b84a:	d807      	bhi.n	800b85c <memmove+0x20>
 800b84c:	1e43      	subs	r3, r0, #1
 800b84e:	42a1      	cmp	r1, r4
 800b850:	d008      	beq.n	800b864 <memmove+0x28>
 800b852:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b85a:	e7f8      	b.n	800b84e <memmove+0x12>
 800b85c:	4402      	add	r2, r0
 800b85e:	4601      	mov	r1, r0
 800b860:	428a      	cmp	r2, r1
 800b862:	d100      	bne.n	800b866 <memmove+0x2a>
 800b864:	bd10      	pop	{r4, pc}
 800b866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b86a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b86e:	e7f7      	b.n	800b860 <memmove+0x24>

0800b870 <_realloc_r>:
 800b870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b874:	4680      	mov	r8, r0
 800b876:	4614      	mov	r4, r2
 800b878:	460e      	mov	r6, r1
 800b87a:	b921      	cbnz	r1, 800b886 <_realloc_r+0x16>
 800b87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b880:	4611      	mov	r1, r2
 800b882:	f7fb b849 	b.w	8006918 <_malloc_r>
 800b886:	b92a      	cbnz	r2, 800b894 <_realloc_r+0x24>
 800b888:	f7ff f86e 	bl	800a968 <_free_r>
 800b88c:	4625      	mov	r5, r4
 800b88e:	4628      	mov	r0, r5
 800b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b894:	f000 f97b 	bl	800bb8e <_malloc_usable_size_r>
 800b898:	4284      	cmp	r4, r0
 800b89a:	4607      	mov	r7, r0
 800b89c:	d802      	bhi.n	800b8a4 <_realloc_r+0x34>
 800b89e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8a2:	d812      	bhi.n	800b8ca <_realloc_r+0x5a>
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	f7fb f836 	bl	8006918 <_malloc_r>
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d0ed      	beq.n	800b88e <_realloc_r+0x1e>
 800b8b2:	42bc      	cmp	r4, r7
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	4631      	mov	r1, r6
 800b8b8:	bf28      	it	cs
 800b8ba:	463a      	movcs	r2, r7
 800b8bc:	f7fa fff5 	bl	80068aa <memcpy>
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	f7ff f850 	bl	800a968 <_free_r>
 800b8c8:	e7e1      	b.n	800b88e <_realloc_r+0x1e>
 800b8ca:	4635      	mov	r5, r6
 800b8cc:	e7df      	b.n	800b88e <_realloc_r+0x1e>

0800b8ce <__sfputc_r>:
 800b8ce:	6893      	ldr	r3, [r2, #8]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	b410      	push	{r4}
 800b8d6:	6093      	str	r3, [r2, #8]
 800b8d8:	da08      	bge.n	800b8ec <__sfputc_r+0x1e>
 800b8da:	6994      	ldr	r4, [r2, #24]
 800b8dc:	42a3      	cmp	r3, r4
 800b8de:	db01      	blt.n	800b8e4 <__sfputc_r+0x16>
 800b8e0:	290a      	cmp	r1, #10
 800b8e2:	d103      	bne.n	800b8ec <__sfputc_r+0x1e>
 800b8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e8:	f7fc bf22 	b.w	8008730 <__swbuf_r>
 800b8ec:	6813      	ldr	r3, [r2, #0]
 800b8ee:	1c58      	adds	r0, r3, #1
 800b8f0:	6010      	str	r0, [r2, #0]
 800b8f2:	7019      	strb	r1, [r3, #0]
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <__sfputs_r>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	4606      	mov	r6, r0
 800b900:	460f      	mov	r7, r1
 800b902:	4614      	mov	r4, r2
 800b904:	18d5      	adds	r5, r2, r3
 800b906:	42ac      	cmp	r4, r5
 800b908:	d101      	bne.n	800b90e <__sfputs_r+0x12>
 800b90a:	2000      	movs	r0, #0
 800b90c:	e007      	b.n	800b91e <__sfputs_r+0x22>
 800b90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b912:	463a      	mov	r2, r7
 800b914:	4630      	mov	r0, r6
 800b916:	f7ff ffda 	bl	800b8ce <__sfputc_r>
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	d1f3      	bne.n	800b906 <__sfputs_r+0xa>
 800b91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b920 <_vfiprintf_r>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	460d      	mov	r5, r1
 800b926:	b09d      	sub	sp, #116	; 0x74
 800b928:	4614      	mov	r4, r2
 800b92a:	4698      	mov	r8, r3
 800b92c:	4606      	mov	r6, r0
 800b92e:	b118      	cbz	r0, 800b938 <_vfiprintf_r+0x18>
 800b930:	6983      	ldr	r3, [r0, #24]
 800b932:	b90b      	cbnz	r3, 800b938 <_vfiprintf_r+0x18>
 800b934:	f7fa fed8 	bl	80066e8 <__sinit>
 800b938:	4b89      	ldr	r3, [pc, #548]	; (800bb60 <_vfiprintf_r+0x240>)
 800b93a:	429d      	cmp	r5, r3
 800b93c:	d11b      	bne.n	800b976 <_vfiprintf_r+0x56>
 800b93e:	6875      	ldr	r5, [r6, #4]
 800b940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b942:	07d9      	lsls	r1, r3, #31
 800b944:	d405      	bmi.n	800b952 <_vfiprintf_r+0x32>
 800b946:	89ab      	ldrh	r3, [r5, #12]
 800b948:	059a      	lsls	r2, r3, #22
 800b94a:	d402      	bmi.n	800b952 <_vfiprintf_r+0x32>
 800b94c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b94e:	f7fa ffaa 	bl	80068a6 <__retarget_lock_acquire_recursive>
 800b952:	89ab      	ldrh	r3, [r5, #12]
 800b954:	071b      	lsls	r3, r3, #28
 800b956:	d501      	bpl.n	800b95c <_vfiprintf_r+0x3c>
 800b958:	692b      	ldr	r3, [r5, #16]
 800b95a:	b9eb      	cbnz	r3, 800b998 <_vfiprintf_r+0x78>
 800b95c:	4629      	mov	r1, r5
 800b95e:	4630      	mov	r0, r6
 800b960:	f7fc ff4a 	bl	80087f8 <__swsetup_r>
 800b964:	b1c0      	cbz	r0, 800b998 <_vfiprintf_r+0x78>
 800b966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b968:	07dc      	lsls	r4, r3, #31
 800b96a:	d50e      	bpl.n	800b98a <_vfiprintf_r+0x6a>
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	b01d      	add	sp, #116	; 0x74
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	4b7b      	ldr	r3, [pc, #492]	; (800bb64 <_vfiprintf_r+0x244>)
 800b978:	429d      	cmp	r5, r3
 800b97a:	d101      	bne.n	800b980 <_vfiprintf_r+0x60>
 800b97c:	68b5      	ldr	r5, [r6, #8]
 800b97e:	e7df      	b.n	800b940 <_vfiprintf_r+0x20>
 800b980:	4b79      	ldr	r3, [pc, #484]	; (800bb68 <_vfiprintf_r+0x248>)
 800b982:	429d      	cmp	r5, r3
 800b984:	bf08      	it	eq
 800b986:	68f5      	ldreq	r5, [r6, #12]
 800b988:	e7da      	b.n	800b940 <_vfiprintf_r+0x20>
 800b98a:	89ab      	ldrh	r3, [r5, #12]
 800b98c:	0598      	lsls	r0, r3, #22
 800b98e:	d4ed      	bmi.n	800b96c <_vfiprintf_r+0x4c>
 800b990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b992:	f7fa ff89 	bl	80068a8 <__retarget_lock_release_recursive>
 800b996:	e7e9      	b.n	800b96c <_vfiprintf_r+0x4c>
 800b998:	2300      	movs	r3, #0
 800b99a:	9309      	str	r3, [sp, #36]	; 0x24
 800b99c:	2320      	movs	r3, #32
 800b99e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9a6:	2330      	movs	r3, #48	; 0x30
 800b9a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb6c <_vfiprintf_r+0x24c>
 800b9ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9b0:	f04f 0901 	mov.w	r9, #1
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	469a      	mov	sl, r3
 800b9b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9bc:	b10a      	cbz	r2, 800b9c2 <_vfiprintf_r+0xa2>
 800b9be:	2a25      	cmp	r2, #37	; 0x25
 800b9c0:	d1f9      	bne.n	800b9b6 <_vfiprintf_r+0x96>
 800b9c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b9c6:	d00b      	beq.n	800b9e0 <_vfiprintf_r+0xc0>
 800b9c8:	465b      	mov	r3, fp
 800b9ca:	4622      	mov	r2, r4
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7ff ff94 	bl	800b8fc <__sfputs_r>
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	f000 80aa 	beq.w	800bb2e <_vfiprintf_r+0x20e>
 800b9da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9dc:	445a      	add	r2, fp
 800b9de:	9209      	str	r2, [sp, #36]	; 0x24
 800b9e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 80a2 	beq.w	800bb2e <_vfiprintf_r+0x20e>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9f4:	f10a 0a01 	add.w	sl, sl, #1
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	9307      	str	r3, [sp, #28]
 800b9fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba00:	931a      	str	r3, [sp, #104]	; 0x68
 800ba02:	4654      	mov	r4, sl
 800ba04:	2205      	movs	r2, #5
 800ba06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0a:	4858      	ldr	r0, [pc, #352]	; (800bb6c <_vfiprintf_r+0x24c>)
 800ba0c:	f7f4 fbe8 	bl	80001e0 <memchr>
 800ba10:	9a04      	ldr	r2, [sp, #16]
 800ba12:	b9d8      	cbnz	r0, 800ba4c <_vfiprintf_r+0x12c>
 800ba14:	06d1      	lsls	r1, r2, #27
 800ba16:	bf44      	itt	mi
 800ba18:	2320      	movmi	r3, #32
 800ba1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba1e:	0713      	lsls	r3, r2, #28
 800ba20:	bf44      	itt	mi
 800ba22:	232b      	movmi	r3, #43	; 0x2b
 800ba24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba28:	f89a 3000 	ldrb.w	r3, [sl]
 800ba2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba2e:	d015      	beq.n	800ba5c <_vfiprintf_r+0x13c>
 800ba30:	9a07      	ldr	r2, [sp, #28]
 800ba32:	4654      	mov	r4, sl
 800ba34:	2000      	movs	r0, #0
 800ba36:	f04f 0c0a 	mov.w	ip, #10
 800ba3a:	4621      	mov	r1, r4
 800ba3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba40:	3b30      	subs	r3, #48	; 0x30
 800ba42:	2b09      	cmp	r3, #9
 800ba44:	d94e      	bls.n	800bae4 <_vfiprintf_r+0x1c4>
 800ba46:	b1b0      	cbz	r0, 800ba76 <_vfiprintf_r+0x156>
 800ba48:	9207      	str	r2, [sp, #28]
 800ba4a:	e014      	b.n	800ba76 <_vfiprintf_r+0x156>
 800ba4c:	eba0 0308 	sub.w	r3, r0, r8
 800ba50:	fa09 f303 	lsl.w	r3, r9, r3
 800ba54:	4313      	orrs	r3, r2
 800ba56:	9304      	str	r3, [sp, #16]
 800ba58:	46a2      	mov	sl, r4
 800ba5a:	e7d2      	b.n	800ba02 <_vfiprintf_r+0xe2>
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	1d19      	adds	r1, r3, #4
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	9103      	str	r1, [sp, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	bfbb      	ittet	lt
 800ba68:	425b      	neglt	r3, r3
 800ba6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba6e:	9307      	strge	r3, [sp, #28]
 800ba70:	9307      	strlt	r3, [sp, #28]
 800ba72:	bfb8      	it	lt
 800ba74:	9204      	strlt	r2, [sp, #16]
 800ba76:	7823      	ldrb	r3, [r4, #0]
 800ba78:	2b2e      	cmp	r3, #46	; 0x2e
 800ba7a:	d10c      	bne.n	800ba96 <_vfiprintf_r+0x176>
 800ba7c:	7863      	ldrb	r3, [r4, #1]
 800ba7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba80:	d135      	bne.n	800baee <_vfiprintf_r+0x1ce>
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	1d1a      	adds	r2, r3, #4
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	9203      	str	r2, [sp, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	bfb8      	it	lt
 800ba8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba92:	3402      	adds	r4, #2
 800ba94:	9305      	str	r3, [sp, #20]
 800ba96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb7c <_vfiprintf_r+0x25c>
 800ba9a:	7821      	ldrb	r1, [r4, #0]
 800ba9c:	2203      	movs	r2, #3
 800ba9e:	4650      	mov	r0, sl
 800baa0:	f7f4 fb9e 	bl	80001e0 <memchr>
 800baa4:	b140      	cbz	r0, 800bab8 <_vfiprintf_r+0x198>
 800baa6:	2340      	movs	r3, #64	; 0x40
 800baa8:	eba0 000a 	sub.w	r0, r0, sl
 800baac:	fa03 f000 	lsl.w	r0, r3, r0
 800bab0:	9b04      	ldr	r3, [sp, #16]
 800bab2:	4303      	orrs	r3, r0
 800bab4:	3401      	adds	r4, #1
 800bab6:	9304      	str	r3, [sp, #16]
 800bab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800babc:	482c      	ldr	r0, [pc, #176]	; (800bb70 <_vfiprintf_r+0x250>)
 800babe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bac2:	2206      	movs	r2, #6
 800bac4:	f7f4 fb8c 	bl	80001e0 <memchr>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d03f      	beq.n	800bb4c <_vfiprintf_r+0x22c>
 800bacc:	4b29      	ldr	r3, [pc, #164]	; (800bb74 <_vfiprintf_r+0x254>)
 800bace:	bb1b      	cbnz	r3, 800bb18 <_vfiprintf_r+0x1f8>
 800bad0:	9b03      	ldr	r3, [sp, #12]
 800bad2:	3307      	adds	r3, #7
 800bad4:	f023 0307 	bic.w	r3, r3, #7
 800bad8:	3308      	adds	r3, #8
 800bada:	9303      	str	r3, [sp, #12]
 800badc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bade:	443b      	add	r3, r7
 800bae0:	9309      	str	r3, [sp, #36]	; 0x24
 800bae2:	e767      	b.n	800b9b4 <_vfiprintf_r+0x94>
 800bae4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bae8:	460c      	mov	r4, r1
 800baea:	2001      	movs	r0, #1
 800baec:	e7a5      	b.n	800ba3a <_vfiprintf_r+0x11a>
 800baee:	2300      	movs	r3, #0
 800baf0:	3401      	adds	r4, #1
 800baf2:	9305      	str	r3, [sp, #20]
 800baf4:	4619      	mov	r1, r3
 800baf6:	f04f 0c0a 	mov.w	ip, #10
 800bafa:	4620      	mov	r0, r4
 800bafc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb00:	3a30      	subs	r2, #48	; 0x30
 800bb02:	2a09      	cmp	r2, #9
 800bb04:	d903      	bls.n	800bb0e <_vfiprintf_r+0x1ee>
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d0c5      	beq.n	800ba96 <_vfiprintf_r+0x176>
 800bb0a:	9105      	str	r1, [sp, #20]
 800bb0c:	e7c3      	b.n	800ba96 <_vfiprintf_r+0x176>
 800bb0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb12:	4604      	mov	r4, r0
 800bb14:	2301      	movs	r3, #1
 800bb16:	e7f0      	b.n	800bafa <_vfiprintf_r+0x1da>
 800bb18:	ab03      	add	r3, sp, #12
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	4b16      	ldr	r3, [pc, #88]	; (800bb78 <_vfiprintf_r+0x258>)
 800bb20:	a904      	add	r1, sp, #16
 800bb22:	4630      	mov	r0, r6
 800bb24:	f7fb f80c 	bl	8006b40 <_printf_float>
 800bb28:	4607      	mov	r7, r0
 800bb2a:	1c78      	adds	r0, r7, #1
 800bb2c:	d1d6      	bne.n	800badc <_vfiprintf_r+0x1bc>
 800bb2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb30:	07d9      	lsls	r1, r3, #31
 800bb32:	d405      	bmi.n	800bb40 <_vfiprintf_r+0x220>
 800bb34:	89ab      	ldrh	r3, [r5, #12]
 800bb36:	059a      	lsls	r2, r3, #22
 800bb38:	d402      	bmi.n	800bb40 <_vfiprintf_r+0x220>
 800bb3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb3c:	f7fa feb4 	bl	80068a8 <__retarget_lock_release_recursive>
 800bb40:	89ab      	ldrh	r3, [r5, #12]
 800bb42:	065b      	lsls	r3, r3, #25
 800bb44:	f53f af12 	bmi.w	800b96c <_vfiprintf_r+0x4c>
 800bb48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb4a:	e711      	b.n	800b970 <_vfiprintf_r+0x50>
 800bb4c:	ab03      	add	r3, sp, #12
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	462a      	mov	r2, r5
 800bb52:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <_vfiprintf_r+0x258>)
 800bb54:	a904      	add	r1, sp, #16
 800bb56:	4630      	mov	r0, r6
 800bb58:	f7fb fa96 	bl	8007088 <_printf_i>
 800bb5c:	e7e4      	b.n	800bb28 <_vfiprintf_r+0x208>
 800bb5e:	bf00      	nop
 800bb60:	0800bd8c 	.word	0x0800bd8c
 800bb64:	0800bdac 	.word	0x0800bdac
 800bb68:	0800bd6c 	.word	0x0800bd6c
 800bb6c:	0800c1bc 	.word	0x0800c1bc
 800bb70:	0800c1c6 	.word	0x0800c1c6
 800bb74:	08006b41 	.word	0x08006b41
 800bb78:	0800b8fd 	.word	0x0800b8fd
 800bb7c:	0800c1c2 	.word	0x0800c1c2

0800bb80 <abort>:
 800bb80:	b508      	push	{r3, lr}
 800bb82:	2006      	movs	r0, #6
 800bb84:	f000 f834 	bl	800bbf0 <raise>
 800bb88:	2001      	movs	r0, #1
 800bb8a:	f7f5 fd12 	bl	80015b2 <_exit>

0800bb8e <_malloc_usable_size_r>:
 800bb8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb92:	1f18      	subs	r0, r3, #4
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	bfbc      	itt	lt
 800bb98:	580b      	ldrlt	r3, [r1, r0]
 800bb9a:	18c0      	addlt	r0, r0, r3
 800bb9c:	4770      	bx	lr

0800bb9e <_raise_r>:
 800bb9e:	291f      	cmp	r1, #31
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	4604      	mov	r4, r0
 800bba4:	460d      	mov	r5, r1
 800bba6:	d904      	bls.n	800bbb2 <_raise_r+0x14>
 800bba8:	2316      	movs	r3, #22
 800bbaa:	6003      	str	r3, [r0, #0]
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb0:	bd38      	pop	{r3, r4, r5, pc}
 800bbb2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbb4:	b112      	cbz	r2, 800bbbc <_raise_r+0x1e>
 800bbb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbba:	b94b      	cbnz	r3, 800bbd0 <_raise_r+0x32>
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 f831 	bl	800bc24 <_getpid_r>
 800bbc2:	462a      	mov	r2, r5
 800bbc4:	4601      	mov	r1, r0
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbcc:	f000 b818 	b.w	800bc00 <_kill_r>
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d00a      	beq.n	800bbea <_raise_r+0x4c>
 800bbd4:	1c59      	adds	r1, r3, #1
 800bbd6:	d103      	bne.n	800bbe0 <_raise_r+0x42>
 800bbd8:	2316      	movs	r3, #22
 800bbda:	6003      	str	r3, [r0, #0]
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e7e7      	b.n	800bbb0 <_raise_r+0x12>
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	4798      	blx	r3
 800bbea:	2000      	movs	r0, #0
 800bbec:	e7e0      	b.n	800bbb0 <_raise_r+0x12>
	...

0800bbf0 <raise>:
 800bbf0:	4b02      	ldr	r3, [pc, #8]	; (800bbfc <raise+0xc>)
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	f7ff bfd2 	b.w	800bb9e <_raise_r>
 800bbfa:	bf00      	nop
 800bbfc:	20000010 	.word	0x20000010

0800bc00 <_kill_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d07      	ldr	r5, [pc, #28]	; (800bc20 <_kill_r+0x20>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	602b      	str	r3, [r5, #0]
 800bc0e:	f7f5 fcc0 	bl	8001592 <_kill>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	d102      	bne.n	800bc1c <_kill_r+0x1c>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	b103      	cbz	r3, 800bc1c <_kill_r+0x1c>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	bf00      	nop
 800bc20:	20004c7c 	.word	0x20004c7c

0800bc24 <_getpid_r>:
 800bc24:	f7f5 bcad 	b.w	8001582 <_getpid>

0800bc28 <_init>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr

0800bc34 <_fini>:
 800bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc36:	bf00      	nop
 800bc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3a:	bc08      	pop	{r3}
 800bc3c:	469e      	mov	lr, r3
 800bc3e:	4770      	bx	lr
