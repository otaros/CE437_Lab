
Lab6_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003984  08003984  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800398c  0800398c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  080039a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080039a0  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011390  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ef  00000000  00000000  000313cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00034378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002664a  00000000  00000000  00035168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ee4  00000000  00000000  0005b7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5a9b  00000000  00000000  0006c696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e74  00000000  00000000  00162184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003954 	.word	0x08003954

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003954 	.word	0x08003954

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_TIM_PeriodElapsedCallback>:
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
}
extern void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	unlocked = false;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000134 	.word	0x20000134

0800052c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000530:	f000 fb7f 	bl	8000c32 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000534:	f000 f816 	bl	8000564 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000538:	f000 f946 	bl	80007c8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800053c:	f000 f914 	bl	8000768 <MX_USART3_UART_Init>
	MX_CAN1_Init();
 8000540:	f000 f87a 	bl	8000638 <MX_CAN1_Init>
	MX_RNG_Init();
 8000544:	f000 f8ae 	bl	80006a4 <MX_RNG_Init>
	MX_TIM2_Init();
 8000548:	f000 f8c0 	bl	80006cc <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <main+0x30>)
 800054e:	f002 f913 	bl	8002778 <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN 2 */
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000552:	2102      	movs	r1, #2
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <main+0x34>)
 8000556:	f000 fcc4 	bl	8000ee2 <HAL_CAN_ActivateNotification>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800055a:	e7fe      	b.n	800055a <main+0x2e>
 800055c:	20000060 	.word	0x20000060
 8000560:	20000028 	.word	0x20000028

08000564 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 f9e6 	bl	8003944 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000588:	f000 ffaa 	bl	80014e0 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 80005d8:	2350      	movs	r3, #80	; 0x50
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 ff89 	bl	8001500 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80005f4:	f000 f988 	bl	8000908 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2102      	movs	r1, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fa16 	bl	8001a48 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000622:	f000 f971 	bl	8000908 <Error_Handler>
	}
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_CAN1_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_CAN1_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_CAN1_Init+0x64>)
 8000644:	220a      	movs	r2, #10
 8000646:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_CAN1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_CAN1_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_CAN1_Init+0x64>)
 8000656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800065a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_CAN1_Init+0x64>)
 800065e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000662:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_CAN1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_CAN1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_CAN1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_CAN1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_CAN1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_CAN1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_CAN1_Init+0x64>)
 800068a:	f000 fb2f 	bl	8000cec <HAL_CAN_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8000694:	f000 f938 	bl	8000908 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	40006400 	.word	0x40006400

080006a4 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_RNG_Init+0x20>)
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <MX_RNG_Init+0x24>)
 80006ac:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_RNG_Init+0x20>)
 80006b0:	f001 ffe0 	bl	8002674 <HAL_RNG_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_RNG_Init+0x1a>
	{
		Error_Handler();
 80006ba:	f000 f925 	bl	8000908 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000050 	.word	0x20000050
 80006c8:	50060800 	.word	0x50060800

080006cc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
	{ 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_TIM2_Init+0x98>)
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_TIM2_Init+0x98>)
 80006f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006f8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_TIM2_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 50000;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_TIM2_Init+0x98>)
 8000702:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000706:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_TIM2_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_TIM2_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <MX_TIM2_Init+0x98>)
 8000716:	f001 ffd7 	bl	80026c8 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8000720:	f000 f8f2 	bl	8000908 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_TIM2_Init+0x98>)
 8000732:	f002 f9b9 	bl	8002aa8 <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 800073c:	f000 f8e4 	bl	8000908 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_TIM2_Init+0x98>)
 800074e:	f002 fbd7 	bl	8002f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8000758:	f000 f8d6 	bl	8000908 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000060 	.word	0x20000060

08000768 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_USART3_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART3_UART_Init+0x58>)
 80007ac:	f002 fc54 	bl	8003058 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 80007b6:	f000 f8a7 	bl	8000908 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000ac 	.word	0x200000ac
 80007c4:	40004800 	.word	0x40004800

080007c8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <MX_GPIO_Init+0x130>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a45      	ldr	r2, [pc, #276]	; (80008f8 <MX_GPIO_Init+0x130>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <MX_GPIO_Init+0x130>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <MX_GPIO_Init+0x130>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a3f      	ldr	r2, [pc, #252]	; (80008f8 <MX_GPIO_Init+0x130>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a39      	ldr	r2, [pc, #228]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <MX_GPIO_Init+0x130>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <MX_GPIO_Init+0x130>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2d      	ldr	r2, [pc, #180]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_GPIO_Init+0x130>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <MX_GPIO_Init+0x130>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_GPIO_Init+0x130>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0181 	movw	r1, #16513	; 0x4081
 8000874:	4821      	ldr	r0, [pc, #132]	; (80008fc <MX_GPIO_Init+0x134>)
 8000876:	f000 fe19 	bl	80014ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4820      	ldr	r0, [pc, #128]	; (8000900 <MX_GPIO_Init+0x138>)
 8000880:	f000 fe14 	bl	80014ac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : Button_Pin */
	GPIO_InitStruct.Pin = Button_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	481a      	ldr	r0, [pc, #104]	; (8000904 <MX_GPIO_Init+0x13c>)
 800089a:	f000 fc5b 	bl	8001154 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800089e:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4811      	ldr	r0, [pc, #68]	; (80008fc <MX_GPIO_Init+0x134>)
 80008b8:	f000 fc4c 	bl	8001154 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0x138>)
 80008d4:	f000 fc3e 	bl	8001154 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_GPIO_Init+0x138>)
 80008ec:	f000 fc32 	bl	8001154 <HAL_GPIO_Init>
}
 80008f0:	bf00      	nop
 80008f2:	3730      	adds	r7, #48	; 0x30
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400
 8000900:	40021800 	.word	0x40021800
 8000904:	40020800 	.word	0x40020800

08000908 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x44>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x44>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x44>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x44>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x44>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_CAN_MspInit+0x7c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d128      	bne.n	80009d0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_CAN_MspInit+0x80>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <HAL_CAN_MspInit+0x80>)
 8000984:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_CAN_MspInit+0x80>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_CAN_MspInit+0x80>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_CAN_MspInit+0x80>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_CAN_MspInit+0x80>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009c0:	2309      	movs	r3, #9
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <HAL_CAN_MspInit+0x84>)
 80009cc:	f000 fbc2 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40006400 	.word	0x40006400
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000

080009e4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0a4      	sub	sp, #144	; 0x90
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2284      	movs	r2, #132	; 0x84
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 ffa5 	bl	8003944 <memset>
  if(hrng->Instance==RNG)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <HAL_RNG_MspInit+0x60>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d11b      	bne.n	8000a3c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a08:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fa3d 	bl	8001e94 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000a20:	f7ff ff72 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_RNG_MspInit+0x64>)
 8000a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_RNG_MspInit+0x64>)
 8000a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2e:	6353      	str	r3, [r2, #52]	; 0x34
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_RNG_MspInit+0x64>)
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3790      	adds	r7, #144	; 0x90
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	50060800 	.word	0x50060800
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a5c:	d113      	bne.n	8000a86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_TIM_Base_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <HAL_TIM_Base_MspInit+0x44>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_TIM_Base_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	201c      	movs	r0, #28
 8000a7c:	f000 fb33 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a80:	201c      	movs	r0, #28
 8000a82:	f000 fb4c 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0aa      	sub	sp, #168	; 0xa8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2284      	movs	r2, #132	; 0x84
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 ff45 	bl	8003944 <memset>
  if(huart->Instance==USART3)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d13c      	bne.n	8000b3e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f9de 	bl	8001e94 <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ade:	f7ff ff13 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b3a:	f000 fb0b 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	37a8      	adds	r7, #168	; 0xa8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f884 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <TIM2_IRQHandler+0x10>)
 8000bae:	f001 fe5b 	bl	8002868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000060 	.word	0x20000060

08000bbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	; (8000c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ffd7 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 fe75 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fc8b 	bl	800052c <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c24:	08003994 	.word	0x08003994
  ldr r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c2c:	2000013c 	.word	0x2000013c

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>

08000c32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 fa4a 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f805 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c42:	f7ff fe67 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fa65 	bl	800113a <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 fa2d 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000138 	.word	0x20000138

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000138 	.word	0x20000138

08000cec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e0ed      	b.n	8000eda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fe26 	bl	800095c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d20:	f7ff ffd8 	bl	8000cd4 <HAL_GetTick>
 8000d24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d26:	e012      	b.n	8000d4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d28:	f7ff ffd4 	bl	8000cd4 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d90b      	bls.n	8000d4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2205      	movs	r2, #5
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e0c5      	b.n	8000eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0e5      	beq.n	8000d28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0202 	bic.w	r2, r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d6c:	f7ff ffb2 	bl	8000cd4 <HAL_GetTick>
 8000d70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d72:	e012      	b.n	8000d9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d74:	f7ff ffae 	bl	8000cd4 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b0a      	cmp	r3, #10
 8000d80:	d90b      	bls.n	8000d9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2205      	movs	r2, #5
 8000d92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e09f      	b.n	8000eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e5      	bne.n	8000d74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7e1b      	ldrb	r3, [r3, #24]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d108      	bne.n	8000dc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e007      	b.n	8000dd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7e5b      	ldrb	r3, [r3, #25]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d108      	bne.n	8000dec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e9b      	ldrb	r3, [r3, #26]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0220 	bic.w	r2, r2, #32
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7edb      	ldrb	r3, [r3, #27]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0210 	bic.w	r2, r2, #16
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0210 	orr.w	r2, r2, #16
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7f1b      	ldrb	r3, [r3, #28]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0208 	orr.w	r2, r2, #8
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0208 	bic.w	r2, r2, #8
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7f5b      	ldrb	r3, [r3, #29]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0204 	orr.w	r2, r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0204 	bic.w	r2, r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	ea42 0103 	orr.w	r1, r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d002      	beq.n	8000f00 <HAL_CAN_ActivateNotification+0x1e>
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d109      	bne.n	8000f14 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6959      	ldr	r1, [r3, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	e006      	b.n	8000f22 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
  }
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <__NVIC_SetPriorityGrouping+0x40>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x40>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	05fa0000 	.word	0x05fa0000

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e175      	b.n	8001460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8164 	bne.w	800145a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x56>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80be 	beq.w	800145a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_GPIO_Init+0x324>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_GPIO_Init+0x324>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <HAL_GPIO_Init+0x324>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012f6:	4a61      	ldr	r2, [pc, #388]	; (800147c <HAL_GPIO_Init+0x328>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a58      	ldr	r2, [pc, #352]	; (8001480 <HAL_GPIO_Init+0x32c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d037      	beq.n	8001392 <HAL_GPIO_Init+0x23e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a57      	ldr	r2, [pc, #348]	; (8001484 <HAL_GPIO_Init+0x330>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d031      	beq.n	800138e <HAL_GPIO_Init+0x23a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a56      	ldr	r2, [pc, #344]	; (8001488 <HAL_GPIO_Init+0x334>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d02b      	beq.n	800138a <HAL_GPIO_Init+0x236>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a55      	ldr	r2, [pc, #340]	; (800148c <HAL_GPIO_Init+0x338>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x232>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a54      	ldr	r2, [pc, #336]	; (8001490 <HAL_GPIO_Init+0x33c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x22e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a53      	ldr	r2, [pc, #332]	; (8001494 <HAL_GPIO_Init+0x340>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x22a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a52      	ldr	r2, [pc, #328]	; (8001498 <HAL_GPIO_Init+0x344>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x226>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x348>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_GPIO_Init+0x34c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x21a>
 800136a:	2309      	movs	r3, #9
 800136c:	e012      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800136e:	230a      	movs	r3, #10
 8001370:	e010      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001372:	2308      	movs	r3, #8
 8001374:	e00e      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001376:	2307      	movs	r3, #7
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800137a:	2306      	movs	r3, #6
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	; (800147c <HAL_GPIO_Init+0x328>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <HAL_GPIO_Init+0x354>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a34      	ldr	r2, [pc, #208]	; (80014a8 <HAL_GPIO_Init+0x354>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <HAL_GPIO_Init+0x354>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a29      	ldr	r2, [pc, #164]	; (80014a8 <HAL_GPIO_Init+0x354>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_GPIO_Init+0x354>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142a:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <HAL_GPIO_Init+0x354>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_GPIO_Init+0x354>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_GPIO_Init+0x354>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f ae86 	bls.w	8001174 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40021400 	.word	0x40021400
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40022400 	.word	0x40022400
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40007000 	.word	0x40007000

08001500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e291      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8087 	beq.w	8001632 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001524:	4b96      	ldr	r3, [pc, #600]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b04      	cmp	r3, #4
 800152e:	d00c      	beq.n	800154a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001530:	4b93      	ldr	r3, [pc, #588]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d112      	bne.n	8001562 <HAL_RCC_OscConfig+0x62>
 800153c:	4b90      	ldr	r3, [pc, #576]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b8d      	ldr	r3, [pc, #564]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d06c      	beq.n	8001630 <HAL_RCC_OscConfig+0x130>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d168      	bne.n	8001630 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e26b      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x7a>
 800156c:	4b84      	ldr	r3, [pc, #528]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a83      	ldr	r2, [pc, #524]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0xd8>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x9c>
 8001582:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7e      	ldr	r2, [pc, #504]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b7c      	ldr	r3, [pc, #496]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a7b      	ldr	r2, [pc, #492]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xd8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0xc0>
 80015a6:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a75      	ldr	r2, [pc, #468]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b73      	ldr	r3, [pc, #460]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a72      	ldr	r2, [pc, #456]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xd8>
 80015c0:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6e      	ldr	r2, [pc, #440]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b6c      	ldr	r3, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a6b      	ldr	r2, [pc, #428]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb78 	bl	8000cd4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fb74 	bl	8000cd4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e21f      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b61      	ldr	r3, [pc, #388]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe8>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fb64 	bl	8000cd4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fb60 	bl	8000cd4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e20b      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x110>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d069      	beq.n	8001712 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163e:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d11c      	bne.n	8001690 <HAL_RCC_OscConfig+0x190>
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x17a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1df      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	493d      	ldr	r1, [pc, #244]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e040      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d023      	beq.n	80016e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a38      	ldr	r2, [pc, #224]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb16 	bl	8000cd4 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fb12 	bl	8000cd4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1bd      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4929      	ldr	r1, [pc, #164]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
 80016de:	e018      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a26      	ldr	r2, [pc, #152]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff faf2 	bl	8000cd4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff faee 	bl	8000cd4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e199      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d038      	beq.n	8001790 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d019      	beq.n	800175a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff facf 	bl	8000cd4 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff facb 	bl	8000cd4 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e176      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800174e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x23a>
 8001758:	e01a      	b.n	8001790 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 800175c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_RCC_OscConfig+0x280>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff fab5 	bl	8000cd4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fab1 	bl	8000cd4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d903      	bls.n	8001784 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e15c      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
 8001780:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4b91      	ldr	r3, [pc, #580]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ee      	bne.n	800176e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80a4 	beq.w	80018e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b8b      	ldr	r3, [pc, #556]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a87      	ldr	r2, [pc, #540]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b85      	ldr	r3, [pc, #532]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c6:	4b82      	ldr	r3, [pc, #520]	; (80019d0 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7e      	ldr	r2, [pc, #504]	; (80019d0 <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff fa79 	bl	8000cd4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fa75 	bl	8000cd4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e120      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b75      	ldr	r3, [pc, #468]	; (80019d0 <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x31a>
 800180c:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	; 0x70
 8001818:	e02d      	b.n	8001876 <HAL_RCC_OscConfig+0x376>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x33c>
 8001822:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	4a69      	ldr	r2, [pc, #420]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6713      	str	r3, [r2, #112]	; 0x70
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a66      	ldr	r2, [pc, #408]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
 800183a:	e01c      	b.n	8001876 <HAL_RCC_OscConfig+0x376>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x35e>
 8001844:	4b61      	ldr	r3, [pc, #388]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a60      	ldr	r2, [pc, #384]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
 8001850:	4b5e      	ldr	r3, [pc, #376]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a5d      	ldr	r2, [pc, #372]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x376>
 800185e:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6713      	str	r3, [r2, #112]	; 0x70
 800186a:	4b58      	ldr	r3, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	4a57      	ldr	r2, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fa29 	bl	8000cd4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fa25 	bl	8000cd4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0ce      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ee      	beq.n	8001886 <HAL_RCC_OscConfig+0x386>
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa13 	bl	8000cd4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fa0f 	bl	8000cd4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ee      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80a4 	beq.w	8001a38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d06b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d149      	bne.n	8001998 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b31      	ldr	r3, [pc, #196]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a30      	ldr	r2, [pc, #192]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800190a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f9e0 	bl	8000cd4 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f9dc 	bl	8000cd4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e087      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	019b      	lsls	r3, r3, #6
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	3b01      	subs	r3, #1
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	4313      	orrs	r3, r2
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800195e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001962:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a18      	ldr	r2, [pc, #96]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f9b0 	bl	8000cd4 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f9ac 	bl	8000cd4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e057      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x478>
 8001996:	e04f      	b.n	8001a38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800199e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f996 	bl	8000cd4 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f992 	bl	8000cd4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e03d      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x4ac>
 80019ca:	e035      	b.n	8001a38 <HAL_RCC_OscConfig+0x538>
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x544>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d028      	beq.n	8001a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d121      	bne.n	8001a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d11a      	bne.n	8001a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d111      	bne.n	8001a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	085b      	lsrs	r3, r3, #1
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0d0      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d910      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 020f 	bic.w	r2, r3, #15
 8001a76:	4965      	ldr	r1, [pc, #404]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0b8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac0:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a52      	ldr	r2, [pc, #328]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	494d      	ldr	r1, [pc, #308]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d040      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d115      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e073      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e06b      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2a:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4936      	ldr	r1, [pc, #216]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3c:	f7ff f8ca 	bl	8000cd4 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7ff f8c6 	bl	8000cd4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e053      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 020c 	and.w	r2, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1eb      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d210      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 020f 	bic.w	r2, r3, #15
 8001b82:	4922      	ldr	r1, [pc, #136]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e032      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4916      	ldr	r1, [pc, #88]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	490e      	ldr	r1, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bda:	f000 f821 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	490a      	ldr	r1, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x1cc>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1d4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f826 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	0800396c 	.word	0x0800396c
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c24:	b094      	sub	sp, #80	; 0x50
 8001c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c30:	2300      	movs	r3, #0
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c38:	4b79      	ldr	r3, [pc, #484]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d00d      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x40>
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	f200 80e1 	bhi.w	8001e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c52:	e0db      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c54:	4b73      	ldr	r3, [pc, #460]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c58:	e0db      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5e:	e0d8      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c76:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	099b      	lsrs	r3, r3, #6
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c92:	4622      	mov	r2, r4
 8001c94:	462b      	mov	r3, r5
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	0159      	lsls	r1, r3, #5
 8001ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca4:	0150      	lsls	r0, r2, #5
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4621      	mov	r1, r4
 8001cac:	1a51      	subs	r1, r2, r1
 8001cae:	6139      	str	r1, [r7, #16]
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cc4:	4659      	mov	r1, fp
 8001cc6:	018b      	lsls	r3, r1, #6
 8001cc8:	4651      	mov	r1, sl
 8001cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cce:	4651      	mov	r1, sl
 8001cd0:	018a      	lsls	r2, r1, #6
 8001cd2:	4651      	mov	r1, sl
 8001cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8001cd8:	4659      	mov	r1, fp
 8001cda:	eb63 0901 	sbc.w	r9, r3, r1
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf2:	4690      	mov	r8, r2
 8001cf4:	4699      	mov	r9, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	eb18 0303 	adds.w	r3, r8, r3
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	462b      	mov	r3, r5
 8001d00:	eb49 0303 	adc.w	r3, r9, r3
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d12:	4629      	mov	r1, r5
 8001d14:	024b      	lsls	r3, r1, #9
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	024a      	lsls	r2, r1, #9
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2200      	movs	r2, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d30:	f7fe fa6a 	bl	8000208 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d3c:	e058      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	099b      	lsrs	r3, r3, #6
 8001d44:	2200      	movs	r2, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	4611      	mov	r1, r2
 8001d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
 8001d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d58:	4642      	mov	r2, r8
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	0159      	lsls	r1, r3, #5
 8001d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6a:	0150      	lsls	r0, r2, #5
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4641      	mov	r1, r8
 8001d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d76:	4649      	mov	r1, r9
 8001d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d90:	ebb2 040a 	subs.w	r4, r2, sl
 8001d94:	eb63 050b 	sbc.w	r5, r3, fp
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	00eb      	lsls	r3, r5, #3
 8001da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da6:	00e2      	lsls	r2, r4, #3
 8001da8:	4614      	mov	r4, r2
 8001daa:	461d      	mov	r5, r3
 8001dac:	4643      	mov	r3, r8
 8001dae:	18e3      	adds	r3, r4, r3
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	464b      	mov	r3, r9
 8001db4:	eb45 0303 	adc.w	r3, r5, r3
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	028b      	lsls	r3, r1, #10
 8001dca:	4621      	mov	r1, r4
 8001dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	028a      	lsls	r2, r1, #10
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	61fa      	str	r2, [r7, #28]
 8001de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de4:	f7fe fa10 	bl	8000208 <__aeabi_uldivmod>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4613      	mov	r3, r2
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3750      	adds	r7, #80	; 0x50
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	00f42400 	.word	0x00f42400
 8001e28:	007a1200 	.word	0x007a1200

08001e2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e48:	f7ff fff0 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0a9b      	lsrs	r3, r3, #10
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	0800397c 	.word	0x0800397c

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e70:	f7ff ffdc 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0b5b      	lsrs	r3, r3, #13
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	0800397c 	.word	0x0800397c

08001e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d012      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ebc:	4b69      	ldr	r3, [pc, #420]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a68      	ldr	r2, [pc, #416]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ec6:	6093      	str	r3, [r2, #8]
 8001ec8:	4b66      	ldr	r3, [pc, #408]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	4964      	ldr	r1, [pc, #400]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d017      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	4959      	ldr	r1, [pc, #356]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d017      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	494a      	ldr	r1, [pc, #296]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f48:	d101      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 808b 	beq.w	800208e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4a39      	ldr	r2, [pc, #228]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	; 0x40
 8001f84:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a34      	ldr	r2, [pc, #208]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fe9a 	bl	8000cd4 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa4:	f7fe fe96 	bl	8000cd4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e357      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d035      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d02e      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d114      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe fe5e 	bl	8000cd4 <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	e00a      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7fe fe5a 	bl	8000cd4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e319      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0ee      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800204a:	d111      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800205a:	400b      	ands	r3, r1
 800205c:	4901      	ldr	r1, [pc, #4]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
 8002062:	e00b      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002064:	40023800 	.word	0x40023800
 8002068:	40007000 	.word	0x40007000
 800206c:	0ffffcff 	.word	0x0ffffcff
 8002070:	4baa      	ldr	r3, [pc, #680]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4aa9      	ldr	r2, [pc, #676]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002076:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800207a:	6093      	str	r3, [r2, #8]
 800207c:	4ba7      	ldr	r3, [pc, #668]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800207e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	49a4      	ldr	r1, [pc, #656]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208a:	4313      	orrs	r3, r2
 800208c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800209a:	4ba0      	ldr	r3, [pc, #640]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a0:	4a9e      	ldr	r2, [pc, #632]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020aa:	4b9c      	ldr	r3, [pc, #624]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	4999      	ldr	r1, [pc, #612]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020c8:	4b94      	ldr	r3, [pc, #592]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020d6:	4991      	ldr	r1, [pc, #580]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ea:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f8:	4988      	ldr	r1, [pc, #544]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800210c:	4b83      	ldr	r3, [pc, #524]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211a:	4980      	ldr	r1, [pc, #512]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800212e:	4b7b      	ldr	r3, [pc, #492]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4977      	ldr	r1, [pc, #476]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002150:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	496f      	ldr	r1, [pc, #444]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002172:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f023 020c 	bic.w	r2, r3, #12
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002180:	4966      	ldr	r1, [pc, #408]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	495e      	ldr	r1, [pc, #376]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021b6:	4b59      	ldr	r3, [pc, #356]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c4:	4955      	ldr	r1, [pc, #340]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021d8:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	494d      	ldr	r1, [pc, #308]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021fa:	4b48      	ldr	r3, [pc, #288]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	4944      	ldr	r1, [pc, #272]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800221c:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	493c      	ldr	r1, [pc, #240]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800223e:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224c:	4933      	ldr	r1, [pc, #204]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002260:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800226e:	492b      	ldr	r1, [pc, #172]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d011      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002290:	4922      	ldr	r1, [pc, #136]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800229c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022a0:	d101      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d0:	4912      	ldr	r1, [pc, #72]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f4:	4909      	ldr	r1, [pc, #36]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d006      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80d9 	beq.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002310:	4b02      	ldr	r3, [pc, #8]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a01      	ldr	r2, [pc, #4]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800231a:	e001      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800231c:	40023800 	.word	0x40023800
 8002320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002322:	f7fe fcd7 	bl	8000cd4 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800232a:	f7fe fcd3 	bl	8000cd4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e194      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800233c:	4b6c      	ldr	r3, [pc, #432]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d021      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	2b00      	cmp	r3, #0
 800235a:	d11d      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800235c:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800235e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800236c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002370:	0e1b      	lsrs	r3, r3, #24
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	019a      	lsls	r2, r3, #6
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	061b      	lsls	r3, r3, #24
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	071b      	lsls	r3, r3, #28
 8002390:	4957      	ldr	r1, [pc, #348]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d02e      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c2:	d129      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023c4:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ca:	0c1b      	lsrs	r3, r3, #16
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d8:	0f1b      	lsrs	r3, r3, #28
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	019a      	lsls	r2, r3, #6
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	071b      	lsls	r3, r3, #28
 80023f8:	493d      	ldr	r1, [pc, #244]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002400:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002406:	f023 021f 	bic.w	r2, r3, #31
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	3b01      	subs	r3, #1
 8002410:	4937      	ldr	r1, [pc, #220]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01d      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002424:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800242a:	0e1b      	lsrs	r3, r3, #24
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002438:	0f1b      	lsrs	r3, r3, #28
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	019a      	lsls	r2, r3, #6
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	431a      	orrs	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	431a      	orrs	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	071b      	lsls	r3, r3, #28
 8002458:	4925      	ldr	r1, [pc, #148]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d011      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	019a      	lsls	r2, r3, #6
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	041b      	lsls	r3, r3, #16
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	061b      	lsls	r3, r3, #24
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	071b      	lsls	r3, r3, #28
 8002488:	4919      	ldr	r1, [pc, #100]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800249a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249c:	f7fe fc1a 	bl	8000cd4 <HAL_GetTick>
 80024a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024a4:	f7fe fc16 	bl	8000cd4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0d7      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 80cd 	bne.w	8002664 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d6:	f7fe fbfd 	bl	8000cd4 <HAL_GetTick>
 80024da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024de:	f7fe fbf9 	bl	8000cd4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d903      	bls.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0ba      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80024f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024f4:	4b5e      	ldr	r3, [pc, #376]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002500:	d0ed      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800251e:	2b00      	cmp	r3, #0
 8002520:	d02e      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d12a      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800252a:	4b51      	ldr	r3, [pc, #324]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002538:	4b4d      	ldr	r3, [pc, #308]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	0f1b      	lsrs	r3, r3, #28
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	019a      	lsls	r2, r3, #6
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	071b      	lsls	r3, r3, #28
 800255e:	4944      	ldr	r1, [pc, #272]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002566:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800256c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	493d      	ldr	r1, [pc, #244]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d022      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002594:	d11d      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025a4:	4b32      	ldr	r3, [pc, #200]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	0f1b      	lsrs	r3, r3, #28
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	019a      	lsls	r2, r3, #6
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	431a      	orrs	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	071b      	lsls	r3, r3, #28
 80025ca:	4929      	ldr	r1, [pc, #164]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d028      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e4:	0e1b      	lsrs	r3, r3, #24
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	019a      	lsls	r2, r3, #6
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	431a      	orrs	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	071b      	lsls	r3, r3, #28
 8002612:	4917      	ldr	r1, [pc, #92]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	4911      	ldr	r1, [pc, #68]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe fb4a 	bl	8000cd4 <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002644:	f7fe fb46 	bl	8000cd4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e007      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002662:	d1ef      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e01c      	b.n	80026c0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	795b      	ldrb	r3, [r3, #5]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe f9a4 	bl	80009e4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0204 	orr.w	r2, r2, #4
 80026b0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e049      	b.n	800276e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe f9ac 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f000 fac0 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d001      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e054      	b.n	800283a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a26      	ldr	r2, [pc, #152]	; (8002848 <HAL_TIM_Base_Start_IT+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d01d      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_TIM_Base_Start_IT+0xd4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_TIM_Base_Start_IT+0xd8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_TIM_Base_Start_IT+0xdc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <HAL_TIM_Base_Start_IT+0xe0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_TIM_Base_Start_IT+0xe4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_TIM_Base_Start_IT+0xe8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d115      	bne.n	8002824 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_TIM_Base_Start_IT+0xec>)
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b06      	cmp	r3, #6
 8002808:	d015      	beq.n	8002836 <HAL_TIM_Base_Start_IT+0xbe>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002810:	d011      	beq.n	8002836 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002822:	e008      	b.n	8002836 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e000      	b.n	8002838 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002836:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40010000 	.word	0x40010000
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800
 8002854:	40000c00 	.word	0x40000c00
 8002858:	40010400 	.word	0x40010400
 800285c:	40014000 	.word	0x40014000
 8002860:	40001800 	.word	0x40001800
 8002864:	00010007 	.word	0x00010007

08002868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d122      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b02      	cmp	r3, #2
 800288a:	d11b      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0202 	mvn.w	r2, #2
 8002894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f9d0 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f9c2 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f9d3 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0204 	mvn.w	r2, #4
 80028e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f9a6 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f998 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f9a9 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b08      	cmp	r3, #8
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b08      	cmp	r3, #8
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0208 	mvn.w	r2, #8
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2204      	movs	r2, #4
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f97c 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f96e 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f97f 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b10      	cmp	r3, #16
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b10      	cmp	r3, #16
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0210 	mvn.w	r2, #16
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2208      	movs	r2, #8
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f952 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f944 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f955 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0201 	mvn.w	r2, #1
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fd fd90 	bl	800050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b80      	cmp	r3, #128	; 0x80
 80029f8:	d10e      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d107      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fb0c 	bl	8003030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a26:	d10e      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b80      	cmp	r3, #128	; 0x80
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 faff 	bl	8003044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d10e      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d107      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f903 	bl	8002c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d10e      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d107      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f06f 0220 	mvn.w	r2, #32
 8002a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fabf 	bl	800301c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e0b4      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x186>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <HAL_TIM_ConfigClockSource+0x190>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afc:	d03e      	beq.n	8002b7c <HAL_TIM_ConfigClockSource+0xd4>
 8002afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b02:	f200 8087 	bhi.w	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0a:	f000 8086 	beq.w	8002c1a <HAL_TIM_ConfigClockSource+0x172>
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b12:	d87f      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b14:	2b70      	cmp	r3, #112	; 0x70
 8002b16:	d01a      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0xa6>
 8002b18:	2b70      	cmp	r3, #112	; 0x70
 8002b1a:	d87b      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d050      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x11a>
 8002b20:	2b60      	cmp	r3, #96	; 0x60
 8002b22:	d877      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b24:	2b50      	cmp	r3, #80	; 0x50
 8002b26:	d03c      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b28:	2b50      	cmp	r3, #80	; 0x50
 8002b2a:	d873      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d058      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x13a>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d86f      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b34:	2b30      	cmp	r3, #48	; 0x30
 8002b36:	d064      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x15a>
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d86b      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d060      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x15a>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d867      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05c      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d05a      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x15a>
 8002b4c:	e062      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f000 f9af 	bl	8002ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	609a      	str	r2, [r3, #8]
      break;
 8002b7a:	e04f      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f000 f998 	bl	8002ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9e:	609a      	str	r2, [r3, #8]
      break;
 8002ba0:	e03c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f000 f90c 	bl	8002dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2150      	movs	r1, #80	; 0x50
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f965 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e02c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f000 f92b 	bl	8002e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2160      	movs	r1, #96	; 0x60
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 f955 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002be0:	e01c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 f8ec 	bl	8002dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2140      	movs	r1, #64	; 0x40
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f945 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c00:	e00c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f000 f93c 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c12:	e003      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      break;
 8002c18:	e000      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	fffeff88 	.word	0xfffeff88

08002c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a40      	ldr	r2, [pc, #256]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d00f      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3d      	ldr	r2, [pc, #244]	; (8002da4 <TIM_Base_SetConfig+0x118>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00b      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <TIM_Base_SetConfig+0x11c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <TIM_Base_SetConfig+0x120>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cec:	d027      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <TIM_Base_SetConfig+0x118>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d023      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <TIM_Base_SetConfig+0x11c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <TIM_Base_SetConfig+0x120>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d017      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <TIM_Base_SetConfig+0x128>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <TIM_Base_SetConfig+0x12c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00f      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <TIM_Base_SetConfig+0x130>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <TIM_Base_SetConfig+0x134>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <TIM_Base_SetConfig+0x138>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <TIM_Base_SetConfig+0x13c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0xf8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d103      	bne.n	8002d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	615a      	str	r2, [r3, #20]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40010400 	.word	0x40010400
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40014800 	.word	0x40014800
 8002dc0:	40001800 	.word	0x40001800
 8002dc4:	40001c00 	.word	0x40001c00
 8002dc8:	40002000 	.word	0x40002000

08002dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 030a 	bic.w	r3, r3, #10
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	031b      	lsls	r3, r3, #12
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f043 0307 	orr.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	021a      	lsls	r2, r3, #8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e06d      	b.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a30      	ldr	r2, [pc, #192]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2f      	ldr	r2, [pc, #188]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d108      	bne.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d022      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8a:	d01d      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d018      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a15      	ldr	r2, [pc, #84]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40010000 	.word	0x40010000
 8003004:	40010400 	.word	0x40010400
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800
 8003010:	40000c00 	.word	0x40000c00
 8003014:	40014000 	.word	0x40014000
 8003018:	40001800 	.word	0x40001800

0800301c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e040      	b.n	80030ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd fd0a 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f82c 	bl	80030f4 <UART_SetConfig>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e022      	b.n	80030ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa84 	bl	80035bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb0b 	bl	8003700 <UART_CheckIdleState>
 80030ea:	4603      	mov	r3, r0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4ba6      	ldr	r3, [pc, #664]	; (80033b8 <UART_SetConfig+0x2c4>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	430b      	orrs	r3, r1
 800312a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a94      	ldr	r2, [pc, #592]	; (80033bc <UART_SetConfig+0x2c8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d120      	bne.n	80031b2 <UART_SetConfig+0xbe>
 8003170:	4b93      	ldr	r3, [pc, #588]	; (80033c0 <UART_SetConfig+0x2cc>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b03      	cmp	r3, #3
 800317c:	d816      	bhi.n	80031ac <UART_SetConfig+0xb8>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x90>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	08003195 	.word	0x08003195
 8003188:	080031a1 	.word	0x080031a1
 800318c:	0800319b 	.word	0x0800319b
 8003190:	080031a7 	.word	0x080031a7
 8003194:	2301      	movs	r3, #1
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e150      	b.n	800343c <UART_SetConfig+0x348>
 800319a:	2302      	movs	r3, #2
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e14d      	b.n	800343c <UART_SetConfig+0x348>
 80031a0:	2304      	movs	r3, #4
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e14a      	b.n	800343c <UART_SetConfig+0x348>
 80031a6:	2308      	movs	r3, #8
 80031a8:	77fb      	strb	r3, [r7, #31]
 80031aa:	e147      	b.n	800343c <UART_SetConfig+0x348>
 80031ac:	2310      	movs	r3, #16
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e144      	b.n	800343c <UART_SetConfig+0x348>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a83      	ldr	r2, [pc, #524]	; (80033c4 <UART_SetConfig+0x2d0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d132      	bne.n	8003222 <UART_SetConfig+0x12e>
 80031bc:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <UART_SetConfig+0x2cc>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d828      	bhi.n	800321c <UART_SetConfig+0x128>
 80031ca:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0xdc>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	08003205 	.word	0x08003205
 80031d4:	0800321d 	.word	0x0800321d
 80031d8:	0800321d 	.word	0x0800321d
 80031dc:	0800321d 	.word	0x0800321d
 80031e0:	08003211 	.word	0x08003211
 80031e4:	0800321d 	.word	0x0800321d
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	0800321d 	.word	0x0800321d
 80031f0:	0800320b 	.word	0x0800320b
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	0800321d 	.word	0x0800321d
 8003200:	08003217 	.word	0x08003217
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e118      	b.n	800343c <UART_SetConfig+0x348>
 800320a:	2302      	movs	r3, #2
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e115      	b.n	800343c <UART_SetConfig+0x348>
 8003210:	2304      	movs	r3, #4
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e112      	b.n	800343c <UART_SetConfig+0x348>
 8003216:	2308      	movs	r3, #8
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e10f      	b.n	800343c <UART_SetConfig+0x348>
 800321c:	2310      	movs	r3, #16
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e10c      	b.n	800343c <UART_SetConfig+0x348>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a68      	ldr	r2, [pc, #416]	; (80033c8 <UART_SetConfig+0x2d4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d120      	bne.n	800326e <UART_SetConfig+0x17a>
 800322c:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <UART_SetConfig+0x2cc>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003236:	2b30      	cmp	r3, #48	; 0x30
 8003238:	d013      	beq.n	8003262 <UART_SetConfig+0x16e>
 800323a:	2b30      	cmp	r3, #48	; 0x30
 800323c:	d814      	bhi.n	8003268 <UART_SetConfig+0x174>
 800323e:	2b20      	cmp	r3, #32
 8003240:	d009      	beq.n	8003256 <UART_SetConfig+0x162>
 8003242:	2b20      	cmp	r3, #32
 8003244:	d810      	bhi.n	8003268 <UART_SetConfig+0x174>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <UART_SetConfig+0x15c>
 800324a:	2b10      	cmp	r3, #16
 800324c:	d006      	beq.n	800325c <UART_SetConfig+0x168>
 800324e:	e00b      	b.n	8003268 <UART_SetConfig+0x174>
 8003250:	2300      	movs	r3, #0
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	e0f2      	b.n	800343c <UART_SetConfig+0x348>
 8003256:	2302      	movs	r3, #2
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e0ef      	b.n	800343c <UART_SetConfig+0x348>
 800325c:	2304      	movs	r3, #4
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e0ec      	b.n	800343c <UART_SetConfig+0x348>
 8003262:	2308      	movs	r3, #8
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e0e9      	b.n	800343c <UART_SetConfig+0x348>
 8003268:	2310      	movs	r3, #16
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e0e6      	b.n	800343c <UART_SetConfig+0x348>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a56      	ldr	r2, [pc, #344]	; (80033cc <UART_SetConfig+0x2d8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d120      	bne.n	80032ba <UART_SetConfig+0x1c6>
 8003278:	4b51      	ldr	r3, [pc, #324]	; (80033c0 <UART_SetConfig+0x2cc>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003282:	2bc0      	cmp	r3, #192	; 0xc0
 8003284:	d013      	beq.n	80032ae <UART_SetConfig+0x1ba>
 8003286:	2bc0      	cmp	r3, #192	; 0xc0
 8003288:	d814      	bhi.n	80032b4 <UART_SetConfig+0x1c0>
 800328a:	2b80      	cmp	r3, #128	; 0x80
 800328c:	d009      	beq.n	80032a2 <UART_SetConfig+0x1ae>
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d810      	bhi.n	80032b4 <UART_SetConfig+0x1c0>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <UART_SetConfig+0x1a8>
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d006      	beq.n	80032a8 <UART_SetConfig+0x1b4>
 800329a:	e00b      	b.n	80032b4 <UART_SetConfig+0x1c0>
 800329c:	2300      	movs	r3, #0
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e0cc      	b.n	800343c <UART_SetConfig+0x348>
 80032a2:	2302      	movs	r3, #2
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e0c9      	b.n	800343c <UART_SetConfig+0x348>
 80032a8:	2304      	movs	r3, #4
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e0c6      	b.n	800343c <UART_SetConfig+0x348>
 80032ae:	2308      	movs	r3, #8
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e0c3      	b.n	800343c <UART_SetConfig+0x348>
 80032b4:	2310      	movs	r3, #16
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e0c0      	b.n	800343c <UART_SetConfig+0x348>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a44      	ldr	r2, [pc, #272]	; (80033d0 <UART_SetConfig+0x2dc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d125      	bne.n	8003310 <UART_SetConfig+0x21c>
 80032c4:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <UART_SetConfig+0x2cc>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d2:	d017      	beq.n	8003304 <UART_SetConfig+0x210>
 80032d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d8:	d817      	bhi.n	800330a <UART_SetConfig+0x216>
 80032da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032de:	d00b      	beq.n	80032f8 <UART_SetConfig+0x204>
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d811      	bhi.n	800330a <UART_SetConfig+0x216>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <UART_SetConfig+0x1fe>
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d006      	beq.n	80032fe <UART_SetConfig+0x20a>
 80032f0:	e00b      	b.n	800330a <UART_SetConfig+0x216>
 80032f2:	2300      	movs	r3, #0
 80032f4:	77fb      	strb	r3, [r7, #31]
 80032f6:	e0a1      	b.n	800343c <UART_SetConfig+0x348>
 80032f8:	2302      	movs	r3, #2
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e09e      	b.n	800343c <UART_SetConfig+0x348>
 80032fe:	2304      	movs	r3, #4
 8003300:	77fb      	strb	r3, [r7, #31]
 8003302:	e09b      	b.n	800343c <UART_SetConfig+0x348>
 8003304:	2308      	movs	r3, #8
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e098      	b.n	800343c <UART_SetConfig+0x348>
 800330a:	2310      	movs	r3, #16
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e095      	b.n	800343c <UART_SetConfig+0x348>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <UART_SetConfig+0x2e0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d125      	bne.n	8003366 <UART_SetConfig+0x272>
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <UART_SetConfig+0x2cc>)
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003328:	d017      	beq.n	800335a <UART_SetConfig+0x266>
 800332a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800332e:	d817      	bhi.n	8003360 <UART_SetConfig+0x26c>
 8003330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003334:	d00b      	beq.n	800334e <UART_SetConfig+0x25a>
 8003336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333a:	d811      	bhi.n	8003360 <UART_SetConfig+0x26c>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <UART_SetConfig+0x254>
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d006      	beq.n	8003354 <UART_SetConfig+0x260>
 8003346:	e00b      	b.n	8003360 <UART_SetConfig+0x26c>
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e076      	b.n	800343c <UART_SetConfig+0x348>
 800334e:	2302      	movs	r3, #2
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e073      	b.n	800343c <UART_SetConfig+0x348>
 8003354:	2304      	movs	r3, #4
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e070      	b.n	800343c <UART_SetConfig+0x348>
 800335a:	2308      	movs	r3, #8
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e06d      	b.n	800343c <UART_SetConfig+0x348>
 8003360:	2310      	movs	r3, #16
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e06a      	b.n	800343c <UART_SetConfig+0x348>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <UART_SetConfig+0x2e4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d138      	bne.n	80033e2 <UART_SetConfig+0x2ee>
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <UART_SetConfig+0x2cc>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800337a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800337e:	d017      	beq.n	80033b0 <UART_SetConfig+0x2bc>
 8003380:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003384:	d82a      	bhi.n	80033dc <UART_SetConfig+0x2e8>
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	d00b      	beq.n	80033a4 <UART_SetConfig+0x2b0>
 800338c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003390:	d824      	bhi.n	80033dc <UART_SetConfig+0x2e8>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <UART_SetConfig+0x2aa>
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	d006      	beq.n	80033aa <UART_SetConfig+0x2b6>
 800339c:	e01e      	b.n	80033dc <UART_SetConfig+0x2e8>
 800339e:	2300      	movs	r3, #0
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e04b      	b.n	800343c <UART_SetConfig+0x348>
 80033a4:	2302      	movs	r3, #2
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e048      	b.n	800343c <UART_SetConfig+0x348>
 80033aa:	2304      	movs	r3, #4
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e045      	b.n	800343c <UART_SetConfig+0x348>
 80033b0:	2308      	movs	r3, #8
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e042      	b.n	800343c <UART_SetConfig+0x348>
 80033b6:	bf00      	nop
 80033b8:	efff69f3 	.word	0xefff69f3
 80033bc:	40011000 	.word	0x40011000
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40004400 	.word	0x40004400
 80033c8:	40004800 	.word	0x40004800
 80033cc:	40004c00 	.word	0x40004c00
 80033d0:	40005000 	.word	0x40005000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	40007800 	.word	0x40007800
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e02c      	b.n	800343c <UART_SetConfig+0x348>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a72      	ldr	r2, [pc, #456]	; (80035b0 <UART_SetConfig+0x4bc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d125      	bne.n	8003438 <UART_SetConfig+0x344>
 80033ec:	4b71      	ldr	r3, [pc, #452]	; (80035b4 <UART_SetConfig+0x4c0>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033fa:	d017      	beq.n	800342c <UART_SetConfig+0x338>
 80033fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003400:	d817      	bhi.n	8003432 <UART_SetConfig+0x33e>
 8003402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003406:	d00b      	beq.n	8003420 <UART_SetConfig+0x32c>
 8003408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340c:	d811      	bhi.n	8003432 <UART_SetConfig+0x33e>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <UART_SetConfig+0x326>
 8003412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003416:	d006      	beq.n	8003426 <UART_SetConfig+0x332>
 8003418:	e00b      	b.n	8003432 <UART_SetConfig+0x33e>
 800341a:	2300      	movs	r3, #0
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e00d      	b.n	800343c <UART_SetConfig+0x348>
 8003420:	2302      	movs	r3, #2
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e00a      	b.n	800343c <UART_SetConfig+0x348>
 8003426:	2304      	movs	r3, #4
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e007      	b.n	800343c <UART_SetConfig+0x348>
 800342c:	2308      	movs	r3, #8
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e004      	b.n	800343c <UART_SetConfig+0x348>
 8003432:	2310      	movs	r3, #16
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e001      	b.n	800343c <UART_SetConfig+0x348>
 8003438:	2310      	movs	r3, #16
 800343a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d15b      	bne.n	80034fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003446:	7ffb      	ldrb	r3, [r7, #31]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d828      	bhi.n	800349e <UART_SetConfig+0x3aa>
 800344c:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <UART_SetConfig+0x360>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003479 	.word	0x08003479
 8003458:	08003481 	.word	0x08003481
 800345c:	08003489 	.word	0x08003489
 8003460:	0800349f 	.word	0x0800349f
 8003464:	0800348f 	.word	0x0800348f
 8003468:	0800349f 	.word	0x0800349f
 800346c:	0800349f 	.word	0x0800349f
 8003470:	0800349f 	.word	0x0800349f
 8003474:	08003497 	.word	0x08003497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003478:	f7fe fce4 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 800347c:	61b8      	str	r0, [r7, #24]
        break;
 800347e:	e013      	b.n	80034a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003480:	f7fe fcf4 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8003484:	61b8      	str	r0, [r7, #24]
        break;
 8003486:	e00f      	b.n	80034a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003488:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <UART_SetConfig+0x4c4>)
 800348a:	61bb      	str	r3, [r7, #24]
        break;
 800348c:	e00c      	b.n	80034a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800348e:	f7fe fbc7 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8003492:	61b8      	str	r0, [r7, #24]
        break;
 8003494:	e008      	b.n	80034a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e004      	b.n	80034a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	77bb      	strb	r3, [r7, #30]
        break;
 80034a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d074      	beq.n	8003598 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	005a      	lsls	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d916      	bls.n	80034f8 <UART_SetConfig+0x404>
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d212      	bcs.n	80034f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f023 030f 	bic.w	r3, r3, #15
 80034da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	89fb      	ldrh	r3, [r7, #14]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	89fa      	ldrh	r2, [r7, #14]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	e04f      	b.n	8003598 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	77bb      	strb	r3, [r7, #30]
 80034fc:	e04c      	b.n	8003598 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034fe:	7ffb      	ldrb	r3, [r7, #31]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d828      	bhi.n	8003556 <UART_SetConfig+0x462>
 8003504:	a201      	add	r2, pc, #4	; (adr r2, 800350c <UART_SetConfig+0x418>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003531 	.word	0x08003531
 8003510:	08003539 	.word	0x08003539
 8003514:	08003541 	.word	0x08003541
 8003518:	08003557 	.word	0x08003557
 800351c:	08003547 	.word	0x08003547
 8003520:	08003557 	.word	0x08003557
 8003524:	08003557 	.word	0x08003557
 8003528:	08003557 	.word	0x08003557
 800352c:	0800354f 	.word	0x0800354f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7fe fc88 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8003534:	61b8      	str	r0, [r7, #24]
        break;
 8003536:	e013      	b.n	8003560 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003538:	f7fe fc98 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 800353c:	61b8      	str	r0, [r7, #24]
        break;
 800353e:	e00f      	b.n	8003560 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <UART_SetConfig+0x4c4>)
 8003542:	61bb      	str	r3, [r7, #24]
        break;
 8003544:	e00c      	b.n	8003560 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003546:	f7fe fb6b 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 800354a:	61b8      	str	r0, [r7, #24]
        break;
 800354c:	e008      	b.n	8003560 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003552:	61bb      	str	r3, [r7, #24]
        break;
 8003554:	e004      	b.n	8003560 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	77bb      	strb	r3, [r7, #30]
        break;
 800355e:	bf00      	nop
    }

    if (pclk != 0U)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085a      	lsrs	r2, r3, #1
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	441a      	add	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b0f      	cmp	r3, #15
 800357e:	d909      	bls.n	8003594 <UART_SetConfig+0x4a0>
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d205      	bcs.n	8003594 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e001      	b.n	8003598 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40007c00 	.word	0x40007c00
 80035b4:	40023800 	.word	0x40023800
 80035b8:	00f42400 	.word	0x00f42400

080035bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01a      	beq.n	80036d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ba:	d10a      	bne.n	80036d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af02      	add	r7, sp, #8
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003710:	f7fd fae0 	bl	8000cd4 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	d10e      	bne.n	8003742 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f81b 	bl	800376e <UART_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e011      	b.n	8003766 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b09c      	sub	sp, #112	; 0x70
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4613      	mov	r3, r2
 800377c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377e:	e0a7      	b.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	f000 80a3 	beq.w	80038d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fd faa3 	bl	8000cd4 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800379a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800379c:	2b00      	cmp	r3, #0
 800379e:	d13f      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037b4:	667b      	str	r3, [r7, #100]	; 0x64
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e6      	bne.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3308      	adds	r3, #8
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	663b      	str	r3, [r7, #96]	; 0x60
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80037f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e5      	bne.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e068      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d050      	beq.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383c:	d148      	bne.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003846:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800385c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
 8003868:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800386c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e6      	bne.n	8003848 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3308      	adds	r3, #8
 8003880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	613b      	str	r3, [r7, #16]
   return(result);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	66bb      	str	r3, [r7, #104]	; 0x68
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3308      	adds	r3, #8
 8003898:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800389a:	623a      	str	r2, [r7, #32]
 800389c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	69f9      	ldr	r1, [r7, #28]
 80038a0:	6a3a      	ldr	r2, [r7, #32]
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e5      	bne.n	800387a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e010      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	f43f af48 	beq.w	8003780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3770      	adds	r7, #112	; 0x70
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4d0d      	ldr	r5, [pc, #52]	; (8003934 <__libc_init_array+0x38>)
 8003900:	4c0d      	ldr	r4, [pc, #52]	; (8003938 <__libc_init_array+0x3c>)
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	2600      	movs	r6, #0
 8003908:	42a6      	cmp	r6, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	4d0b      	ldr	r5, [pc, #44]	; (800393c <__libc_init_array+0x40>)
 800390e:	4c0c      	ldr	r4, [pc, #48]	; (8003940 <__libc_init_array+0x44>)
 8003910:	f000 f820 	bl	8003954 <_init>
 8003914:	1b64      	subs	r4, r4, r5
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	2600      	movs	r6, #0
 800391a:	42a6      	cmp	r6, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f855 3b04 	ldr.w	r3, [r5], #4
 8003924:	4798      	blx	r3
 8003926:	3601      	adds	r6, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f855 3b04 	ldr.w	r3, [r5], #4
 800392e:	4798      	blx	r3
 8003930:	3601      	adds	r6, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	0800398c 	.word	0x0800398c
 8003938:	0800398c 	.word	0x0800398c
 800393c:	0800398c 	.word	0x0800398c
 8003940:	08003990 	.word	0x08003990

08003944 <memset>:
 8003944:	4402      	add	r2, r0
 8003946:	4603      	mov	r3, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	f803 1b01 	strb.w	r1, [r3], #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <_init>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr

08003960 <_fini>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr
